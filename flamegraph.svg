<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="13774"><g><title>tetrs:gl0 (4 samples, 0.03%)</title><rect x="0.0145%" y="645" width="0.0290%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="4"/><text x="0.2645%" y="655.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="0.0145%" y="629" width="0.0290%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="4"/><text x="0.2645%" y="639.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="0.0145%" y="613" width="0.0290%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="4"/><text x="0.2645%" y="623.50"></text></g><g><title>[radeonsi_dri.so] (4 samples, 0.03%)</title><rect x="0.0145%" y="597" width="0.0290%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="4"/><text x="0.2645%" y="607.50"></text></g><g><title>[radeonsi_dri.so] (4 samples, 0.03%)</title><rect x="0.0145%" y="581" width="0.0290%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="4"/><text x="0.2645%" y="591.50"></text></g><g><title>[radeonsi_dri.so] (4 samples, 0.03%)</title><rect x="0.0145%" y="565" width="0.0290%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="4"/><text x="0.2645%" y="575.50"></text></g><g><title>[radeonsi_dri.so] (4 samples, 0.03%)</title><rect x="0.0145%" y="549" width="0.0290%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="4"/><text x="0.2645%" y="559.50"></text></g><g><title>[radeonsi_dri.so] (4 samples, 0.03%)</title><rect x="0.0145%" y="533" width="0.0290%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="4"/><text x="0.2645%" y="543.50"></text></g><g><title>[radeonsi_dri.so] (4 samples, 0.03%)</title><rect x="0.0145%" y="517" width="0.0290%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="4"/><text x="0.2645%" y="527.50"></text></g><g><title>[radeonsi_dri.so] (4 samples, 0.03%)</title><rect x="0.0145%" y="501" width="0.0290%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="4"/><text x="0.2645%" y="511.50"></text></g><g><title>[radeonsi_dri.so] (4 samples, 0.03%)</title><rect x="0.0145%" y="485" width="0.0290%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="4"/><text x="0.2645%" y="495.50"></text></g><g><title>[radeonsi_dri.so] (4 samples, 0.03%)</title><rect x="0.0145%" y="469" width="0.0290%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="4"/><text x="0.2645%" y="479.50"></text></g><g><title>[radeonsi_dri.so] (4 samples, 0.03%)</title><rect x="0.0145%" y="453" width="0.0290%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="4"/><text x="0.2645%" y="463.50"></text></g><g><title>[radeonsi_dri.so] (3 samples, 0.02%)</title><rect x="0.0218%" y="437" width="0.0218%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="3"/><text x="0.2718%" y="447.50"></text></g><g><title>[radeonsi_dri.so] (3 samples, 0.02%)</title><rect x="0.0218%" y="421" width="0.0218%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="3"/><text x="0.2718%" y="431.50"></text></g><g><title>[radeonsi_dri.so] (3 samples, 0.02%)</title><rect x="0.0218%" y="405" width="0.0218%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="3"/><text x="0.2718%" y="415.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.0436%" y="597" width="0.0145%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="2"/><text x="0.2936%" y="607.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.0436%" y="581" width="0.0145%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="2"/><text x="0.2936%" y="591.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.0436%" y="565" width="0.0145%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="2"/><text x="0.2936%" y="575.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.0436%" y="549" width="0.0145%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="2"/><text x="0.2936%" y="559.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.0436%" y="533" width="0.0145%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="2"/><text x="0.2936%" y="543.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.0436%" y="517" width="0.0145%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="2"/><text x="0.2936%" y="527.50"></text></g><g><title>tetrs:sh0 (3 samples, 0.02%)</title><rect x="0.0436%" y="645" width="0.0218%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="3"/><text x="0.2936%" y="655.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="0.0436%" y="629" width="0.0218%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="3"/><text x="0.2936%" y="639.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="0.0436%" y="613" width="0.0218%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="3"/><text x="0.2936%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="0.0726%" y="597" width="0.0145%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="2"/><text x="0.3226%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="0.0726%" y="581" width="0.0145%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="2"/><text x="0.3226%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.04%)</title><rect x="0.0726%" y="613" width="0.0436%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="6"/><text x="0.3226%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0871%" y="597" width="0.0290%" height="15" fill="rgb(214,148,48)" fg:x="12" fg:w="4"/><text x="0.3371%" y="607.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0871%" y="581" width="0.0290%" height="15" fill="rgb(232,36,49)" fg:x="12" fg:w="4"/><text x="0.3371%" y="591.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0871%" y="565" width="0.0290%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="4"/><text x="0.3371%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0871%" y="549" width="0.0290%" height="15" fill="rgb(229,88,8)" fg:x="12" fg:w="4"/><text x="0.3371%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0871%" y="533" width="0.0290%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="4"/><text x="0.3371%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0871%" y="517" width="0.0290%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="4"/><text x="0.3371%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0871%" y="501" width="0.0290%" height="15" fill="rgb(241,83,37)" fg:x="12" fg:w="4"/><text x="0.3371%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0871%" y="485" width="0.0290%" height="15" fill="rgb(233,36,39)" fg:x="12" fg:w="4"/><text x="0.3371%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.0871%" y="469" width="0.0290%" height="15" fill="rgb(226,3,54)" fg:x="12" fg:w="4"/><text x="0.3371%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.05%)</title><rect x="0.0726%" y="629" width="0.0508%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="7"/><text x="0.3226%" y="639.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="0.1307%" y="581" width="0.0436%" height="15" fill="rgb(238,167,29)" fg:x="18" fg:w="6"/><text x="0.3807%" y="591.50"></text></g><g><title>[libc.so.6] (9 samples, 0.07%)</title><rect x="0.1307%" y="597" width="0.0653%" height="15" fill="rgb(232,182,51)" fg:x="18" fg:w="9"/><text x="0.3807%" y="607.50"></text></g><g><title>snprintf (3 samples, 0.02%)</title><rect x="0.1742%" y="581" width="0.0218%" height="15" fill="rgb(231,60,39)" fg:x="24" fg:w="3"/><text x="0.4242%" y="591.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="0.1742%" y="565" width="0.0218%" height="15" fill="rgb(208,69,12)" fg:x="24" fg:w="3"/><text x="0.4242%" y="575.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="0.1742%" y="549" width="0.0218%" height="15" fill="rgb(235,93,37)" fg:x="24" fg:w="3"/><text x="0.4242%" y="559.50"></text></g><g><title>[unknown] (7 samples, 0.05%)</title><rect x="0.2468%" y="517" width="0.0508%" height="15" fill="rgb(213,116,39)" fg:x="34" fg:w="7"/><text x="0.4968%" y="527.50"></text></g><g><title>[unknown] (7 samples, 0.05%)</title><rect x="0.2468%" y="501" width="0.0508%" height="15" fill="rgb(222,207,29)" fg:x="34" fg:w="7"/><text x="0.4968%" y="511.50"></text></g><g><title>[unknown] (7 samples, 0.05%)</title><rect x="0.2468%" y="485" width="0.0508%" height="15" fill="rgb(206,96,30)" fg:x="34" fg:w="7"/><text x="0.4968%" y="495.50"></text></g><g><title>[unknown] (7 samples, 0.05%)</title><rect x="0.2468%" y="469" width="0.0508%" height="15" fill="rgb(218,138,4)" fg:x="34" fg:w="7"/><text x="0.4968%" y="479.50"></text></g><g><title>[unknown] (7 samples, 0.05%)</title><rect x="0.2468%" y="453" width="0.0508%" height="15" fill="rgb(250,191,14)" fg:x="34" fg:w="7"/><text x="0.4968%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="0.2614%" y="437" width="0.0363%" height="15" fill="rgb(239,60,40)" fg:x="36" fg:w="5"/><text x="0.5114%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.2759%" y="421" width="0.0218%" height="15" fill="rgb(206,27,48)" fg:x="38" fg:w="3"/><text x="0.5259%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.2831%" y="405" width="0.0145%" height="15" fill="rgb(225,35,8)" fg:x="39" fg:w="2"/><text x="0.5331%" y="415.50"></text></g><g><title>[libc.so.6] (12 samples, 0.09%)</title><rect x="0.2468%" y="533" width="0.0871%" height="15" fill="rgb(250,213,24)" fg:x="34" fg:w="12"/><text x="0.4968%" y="543.50"></text></g><g><title>__mmap (5 samples, 0.04%)</title><rect x="0.2977%" y="517" width="0.0363%" height="15" fill="rgb(247,123,22)" fg:x="41" fg:w="5"/><text x="0.5477%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.3049%" y="501" width="0.0290%" height="15" fill="rgb(231,138,38)" fg:x="42" fg:w="4"/><text x="0.5549%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.3049%" y="485" width="0.0290%" height="15" fill="rgb(231,145,46)" fg:x="42" fg:w="4"/><text x="0.5549%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.3049%" y="469" width="0.0290%" height="15" fill="rgb(251,118,11)" fg:x="42" fg:w="4"/><text x="0.5549%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.3049%" y="453" width="0.0290%" height="15" fill="rgb(217,147,25)" fg:x="42" fg:w="4"/><text x="0.5549%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.3049%" y="437" width="0.0290%" height="15" fill="rgb(247,81,37)" fg:x="42" fg:w="4"/><text x="0.5549%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.3122%" y="421" width="0.0218%" height="15" fill="rgb(209,12,38)" fg:x="43" fg:w="3"/><text x="0.5622%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.3194%" y="405" width="0.0145%" height="15" fill="rgb(227,1,9)" fg:x="44" fg:w="2"/><text x="0.5694%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.3194%" y="389" width="0.0145%" height="15" fill="rgb(248,47,43)" fg:x="44" fg:w="2"/><text x="0.5694%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.3194%" y="373" width="0.0145%" height="15" fill="rgb(221,10,30)" fg:x="44" fg:w="2"/><text x="0.5694%" y="383.50"></text></g><g><title>[radeonsi_dri.so] (21 samples, 0.15%)</title><rect x="0.1960%" y="597" width="0.1525%" height="15" fill="rgb(210,229,1)" fg:x="27" fg:w="21"/><text x="0.4460%" y="607.50"></text></g><g><title>cfree (20 samples, 0.15%)</title><rect x="0.2033%" y="581" width="0.1452%" height="15" fill="rgb(222,148,37)" fg:x="28" fg:w="20"/><text x="0.4533%" y="591.50"></text></g><g><title>[libc.so.6] (20 samples, 0.15%)</title><rect x="0.2033%" y="565" width="0.1452%" height="15" fill="rgb(234,67,33)" fg:x="28" fg:w="20"/><text x="0.4533%" y="575.50"></text></g><g><title>[libc.so.6] (20 samples, 0.15%)</title><rect x="0.2033%" y="549" width="0.1452%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="20"/><text x="0.4533%" y="559.50"></text></g><g><title>get_nprocs (2 samples, 0.01%)</title><rect x="0.3340%" y="533" width="0.0145%" height="15" fill="rgb(247,138,52)" fg:x="46" fg:w="2"/><text x="0.5840%" y="543.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="0.3340%" y="517" width="0.0145%" height="15" fill="rgb(213,79,30)" fg:x="46" fg:w="2"/><text x="0.5840%" y="527.50"></text></g><g><title>[unknown] (10 samples, 0.07%)</title><rect x="0.3485%" y="597" width="0.0726%" height="15" fill="rgb(246,177,23)" fg:x="48" fg:w="10"/><text x="0.5985%" y="607.50"></text></g><g><title>[unknown] (8 samples, 0.06%)</title><rect x="0.3630%" y="581" width="0.0581%" height="15" fill="rgb(230,62,27)" fg:x="50" fg:w="8"/><text x="0.6130%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.04%)</title><rect x="0.3775%" y="565" width="0.0436%" height="15" fill="rgb(216,154,8)" fg:x="52" fg:w="6"/><text x="0.6275%" y="575.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="0.3920%" y="549" width="0.0290%" height="15" fill="rgb(244,35,45)" fg:x="54" fg:w="4"/><text x="0.6420%" y="559.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.3993%" y="533" width="0.0218%" height="15" fill="rgb(251,115,12)" fg:x="55" fg:w="3"/><text x="0.6493%" y="543.50"></text></g><g><title>[libc.so.6] (42 samples, 0.30%)</title><rect x="0.1234%" y="629" width="0.3049%" height="15" fill="rgb(240,54,50)" fg:x="17" fg:w="42"/><text x="0.3734%" y="639.50"></text></g><g><title>[libc.so.6] (42 samples, 0.30%)</title><rect x="0.1234%" y="613" width="0.3049%" height="15" fill="rgb(233,84,52)" fg:x="17" fg:w="42"/><text x="0.3734%" y="623.50"></text></g><g><title>[unknown] (10 samples, 0.07%)</title><rect x="0.4356%" y="613" width="0.0726%" height="15" fill="rgb(207,117,47)" fg:x="60" fg:w="10"/><text x="0.6856%" y="623.50"></text></g><g><title>[unknown] (10 samples, 0.07%)</title><rect x="0.4356%" y="597" width="0.0726%" height="15" fill="rgb(249,43,39)" fg:x="60" fg:w="10"/><text x="0.6856%" y="607.50"></text></g><g><title>[unknown] (8 samples, 0.06%)</title><rect x="0.4501%" y="581" width="0.0581%" height="15" fill="rgb(209,38,44)" fg:x="62" fg:w="8"/><text x="0.7001%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.4937%" y="565" width="0.0145%" height="15" fill="rgb(236,212,23)" fg:x="68" fg:w="2"/><text x="0.7437%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.01%)</title><rect x="0.5082%" y="469" width="0.0145%" height="15" fill="rgb(242,79,21)" fg:x="70" fg:w="2"/><text x="0.7582%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 0.01%)</title><rect x="0.5082%" y="453" width="0.0145%" height="15" fill="rgb(211,96,35)" fg:x="70" fg:w="2"/><text x="0.7582%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.01%)</title><rect x="0.5082%" y="437" width="0.0145%" height="15" fill="rgb(253,215,40)" fg:x="70" fg:w="2"/><text x="0.7582%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="0.5082%" y="421" width="0.0145%" height="15" fill="rgb(211,81,21)" fg:x="70" fg:w="2"/><text x="0.7582%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="0.5082%" y="405" width="0.0145%" height="15" fill="rgb(208,190,38)" fg:x="70" fg:w="2"/><text x="0.7582%" y="415.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.01%)</title><rect x="0.5082%" y="389" width="0.0145%" height="15" fill="rgb(235,213,38)" fg:x="70" fg:w="2"/><text x="0.7582%" y="399.50"></text></g><g><title>miniquad::graphics::gl::load_shader_internal::_{{closure}} (2 samples, 0.01%)</title><rect x="0.5082%" y="373" width="0.0145%" height="15" fill="rgb(237,122,38)" fg:x="70" fg:w="2"/><text x="0.7582%" y="383.50"></text></g><g><title>miniquad::graphics::gl::get_uniform_location (2 samples, 0.01%)</title><rect x="0.5082%" y="357" width="0.0145%" height="15" fill="rgb(244,218,35)" fg:x="70" fg:w="2"/><text x="0.7582%" y="367.50"></text></g><g><title>miniquad::native::gl::glGetUniformLocation (2 samples, 0.01%)</title><rect x="0.5082%" y="341" width="0.0145%" height="15" fill="rgb(240,68,47)" fg:x="70" fg:w="2"/><text x="0.7582%" y="351.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5082%" y="325" width="0.0145%" height="15" fill="rgb(210,16,53)" fg:x="70" fg:w="2"/><text x="0.7582%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="0.5082%" y="533" width="0.0218%" height="15" fill="rgb(235,124,12)" fg:x="70" fg:w="3"/><text x="0.7582%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="0.5082%" y="517" width="0.0218%" height="15" fill="rgb(224,169,11)" fg:x="70" fg:w="3"/><text x="0.7582%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="0.5082%" y="501" width="0.0218%" height="15" fill="rgb(250,166,2)" fg:x="70" fg:w="3"/><text x="0.7582%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="0.5082%" y="485" width="0.0218%" height="15" fill="rgb(242,216,29)" fg:x="70" fg:w="3"/><text x="0.7582%" y="495.50"></text></g><g><title>miniquad::graphics::gl::load_shader (2 samples, 0.01%)</title><rect x="0.5300%" y="533" width="0.0145%" height="15" fill="rgb(230,116,27)" fg:x="73" fg:w="2"/><text x="0.7800%" y="543.50"></text></g><g><title>miniquad::native::gl::glGetShaderiv (2 samples, 0.01%)</title><rect x="0.5300%" y="517" width="0.0145%" height="15" fill="rgb(228,99,48)" fg:x="73" fg:w="2"/><text x="0.7800%" y="527.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5300%" y="501" width="0.0145%" height="15" fill="rgb(253,11,6)" fg:x="73" fg:w="2"/><text x="0.7800%" y="511.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5300%" y="485" width="0.0145%" height="15" fill="rgb(247,143,39)" fg:x="73" fg:w="2"/><text x="0.7800%" y="495.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5300%" y="469" width="0.0145%" height="15" fill="rgb(236,97,10)" fg:x="73" fg:w="2"/><text x="0.7800%" y="479.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5300%" y="453" width="0.0145%" height="15" fill="rgb(233,208,19)" fg:x="73" fg:w="2"/><text x="0.7800%" y="463.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5300%" y="437" width="0.0145%" height="15" fill="rgb(216,164,2)" fg:x="73" fg:w="2"/><text x="0.7800%" y="447.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5300%" y="421" width="0.0145%" height="15" fill="rgb(220,129,5)" fg:x="73" fg:w="2"/><text x="0.7800%" y="431.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5300%" y="405" width="0.0145%" height="15" fill="rgb(242,17,10)" fg:x="73" fg:w="2"/><text x="0.7800%" y="415.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5300%" y="389" width="0.0145%" height="15" fill="rgb(242,107,0)" fg:x="73" fg:w="2"/><text x="0.7800%" y="399.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5300%" y="373" width="0.0145%" height="15" fill="rgb(251,28,31)" fg:x="73" fg:w="2"/><text x="0.7800%" y="383.50"></text></g><g><title>&lt;miniquad::graphics::gl::GlContext as miniquad::graphics::RenderingBackend&gt;::new_shader (6 samples, 0.04%)</title><rect x="0.5082%" y="565" width="0.0436%" height="15" fill="rgb(233,223,10)" fg:x="70" fg:w="6"/><text x="0.7582%" y="575.50"></text></g><g><title>miniquad::graphics::gl::load_shader_internal (6 samples, 0.04%)</title><rect x="0.5082%" y="549" width="0.0436%" height="15" fill="rgb(215,21,27)" fg:x="70" fg:w="6"/><text x="0.7582%" y="559.50"></text></g><g><title>macroquad::quad_gl::QuadGl::new (7 samples, 0.05%)</title><rect x="0.5082%" y="597" width="0.0508%" height="15" fill="rgb(232,23,21)" fg:x="70" fg:w="7"/><text x="0.7582%" y="607.50"></text></g><g><title>macroquad::quad_gl::PipelinesStorage::new (7 samples, 0.05%)</title><rect x="0.5082%" y="581" width="0.0508%" height="15" fill="rgb(244,5,23)" fg:x="70" fg:w="7"/><text x="0.7582%" y="591.50"></text></g><g><title>macroquad::Context::new (8 samples, 0.06%)</title><rect x="0.5082%" y="613" width="0.0581%" height="15" fill="rgb(226,81,46)" fg:x="70" fg:w="8"/><text x="0.7582%" y="623.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (2 samples, 0.01%)</title><rect x="0.5663%" y="485" width="0.0145%" height="15" fill="rgb(247,70,30)" fg:x="78" fg:w="2"/><text x="0.8163%" y="495.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (2 samples, 0.01%)</title><rect x="0.5663%" y="469" width="0.0145%" height="15" fill="rgb(212,68,19)" fg:x="78" fg:w="2"/><text x="0.8163%" y="479.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (2 samples, 0.01%)</title><rect x="0.5663%" y="453" width="0.0145%" height="15" fill="rgb(240,187,13)" fg:x="78" fg:w="2"/><text x="0.8163%" y="463.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (2 samples, 0.01%)</title><rect x="0.5663%" y="437" width="0.0145%" height="15" fill="rgb(223,113,26)" fg:x="78" fg:w="2"/><text x="0.8163%" y="447.50"></text></g><g><title>XML_ParseBuffer (2 samples, 0.01%)</title><rect x="0.5663%" y="421" width="0.0145%" height="15" fill="rgb(206,192,2)" fg:x="78" fg:w="2"/><text x="0.8163%" y="431.50"></text></g><g><title>[libexpat.so.1.9.0] (2 samples, 0.01%)</title><rect x="0.5663%" y="405" width="0.0145%" height="15" fill="rgb(241,108,4)" fg:x="78" fg:w="2"/><text x="0.8163%" y="415.50"></text></g><g><title>[libexpat.so.1.9.0] (2 samples, 0.01%)</title><rect x="0.5663%" y="389" width="0.0145%" height="15" fill="rgb(247,173,49)" fg:x="78" fg:w="2"/><text x="0.8163%" y="399.50"></text></g><g><title>[libexpat.so.1.9.0] (2 samples, 0.01%)</title><rect x="0.5663%" y="373" width="0.0145%" height="15" fill="rgb(224,114,35)" fg:x="78" fg:w="2"/><text x="0.8163%" y="383.50"></text></g><g><title>[libexpat.so.1.9.0] (2 samples, 0.01%)</title><rect x="0.5663%" y="357" width="0.0145%" height="15" fill="rgb(245,159,27)" fg:x="78" fg:w="2"/><text x="0.8163%" y="367.50"></text></g><g><title>miniquad::native::linux_x11::run (4 samples, 0.03%)</title><rect x="0.5663%" y="613" width="0.0290%" height="15" fill="rgb(245,172,44)" fg:x="78" fg:w="4"/><text x="0.8163%" y="623.50"></text></g><g><title>miniquad::native::linux_x11::glx_main_loop (4 samples, 0.03%)</title><rect x="0.5663%" y="597" width="0.0290%" height="15" fill="rgb(236,23,11)" fg:x="78" fg:w="4"/><text x="0.8163%" y="607.50"></text></g><g><title>miniquad::native::linux_x11::glx::Glx::init (4 samples, 0.03%)</title><rect x="0.5663%" y="581" width="0.0290%" height="15" fill="rgb(205,117,38)" fg:x="78" fg:w="4"/><text x="0.8163%" y="591.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (4 samples, 0.03%)</title><rect x="0.5663%" y="565" width="0.0290%" height="15" fill="rgb(237,72,25)" fg:x="78" fg:w="4"/><text x="0.8163%" y="575.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (4 samples, 0.03%)</title><rect x="0.5663%" y="549" width="0.0290%" height="15" fill="rgb(244,70,9)" fg:x="78" fg:w="4"/><text x="0.8163%" y="559.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (4 samples, 0.03%)</title><rect x="0.5663%" y="533" width="0.0290%" height="15" fill="rgb(217,125,39)" fg:x="78" fg:w="4"/><text x="0.8163%" y="543.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (4 samples, 0.03%)</title><rect x="0.5663%" y="517" width="0.0290%" height="15" fill="rgb(235,36,10)" fg:x="78" fg:w="4"/><text x="0.8163%" y="527.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (4 samples, 0.03%)</title><rect x="0.5663%" y="501" width="0.0290%" height="15" fill="rgb(251,123,47)" fg:x="78" fg:w="4"/><text x="0.8163%" y="511.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5808%" y="485" width="0.0145%" height="15" fill="rgb(221,13,13)" fg:x="80" fg:w="2"/><text x="0.8308%" y="495.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5808%" y="469" width="0.0145%" height="15" fill="rgb(238,131,9)" fg:x="80" fg:w="2"/><text x="0.8308%" y="479.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5808%" y="453" width="0.0145%" height="15" fill="rgb(211,50,8)" fg:x="80" fg:w="2"/><text x="0.8308%" y="463.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="0.5808%" y="437" width="0.0145%" height="15" fill="rgb(245,182,24)" fg:x="80" fg:w="2"/><text x="0.8308%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.01%)</title><rect x="0.5953%" y="437" width="0.0145%" height="15" fill="rgb(242,14,37)" fg:x="82" fg:w="2"/><text x="0.8453%" y="447.50"></text></g><g><title>clock_gettime (2 samples, 0.01%)</title><rect x="0.5953%" y="421" width="0.0145%" height="15" fill="rgb(246,228,12)" fg:x="82" fg:w="2"/><text x="0.8453%" y="431.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.01%)</title><rect x="0.5953%" y="405" width="0.0145%" height="15" fill="rgb(213,55,15)" fg:x="82" fg:w="2"/><text x="0.8453%" y="415.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="0.6244%" y="421" width="0.0145%" height="15" fill="rgb(209,9,3)" fg:x="86" fg:w="2"/><text x="0.8744%" y="431.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (2 samples, 0.01%)</title><rect x="0.6244%" y="405" width="0.0145%" height="15" fill="rgb(230,59,30)" fg:x="86" fg:w="2"/><text x="0.8744%" y="415.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="0.6389%" y="421" width="0.0145%" height="15" fill="rgb(209,121,21)" fg:x="88" fg:w="2"/><text x="0.8889%" y="431.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as alloc::rc::RcEqIdent&lt;T,A&gt;&gt;::eq (2 samples, 0.01%)</title><rect x="0.6389%" y="405" width="0.0145%" height="15" fill="rgb(220,109,13)" fg:x="88" fg:w="2"/><text x="0.8889%" y="415.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="0.6389%" y="389" width="0.0145%" height="15" fill="rgb(232,18,1)" fg:x="88" fg:w="2"/><text x="0.8889%" y="399.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (2 samples, 0.01%)</title><rect x="0.6389%" y="373" width="0.0145%" height="15" fill="rgb(215,41,42)" fg:x="88" fg:w="2"/><text x="0.8889%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.01%)</title><rect x="0.6389%" y="357" width="0.0145%" height="15" fill="rgb(224,123,36)" fg:x="88" fg:w="2"/><text x="0.8889%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.01%)</title><rect x="0.6389%" y="341" width="0.0145%" height="15" fill="rgb(240,125,3)" fg:x="88" fg:w="2"/><text x="0.8889%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (2 samples, 0.01%)</title><rect x="0.6389%" y="325" width="0.0145%" height="15" fill="rgb(205,98,50)" fg:x="88" fg:w="2"/><text x="0.8889%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.01%)</title><rect x="0.6389%" y="309" width="0.0145%" height="15" fill="rgb(205,185,37)" fg:x="88" fg:w="2"/><text x="0.8889%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (2 samples, 0.01%)</title><rect x="0.6389%" y="293" width="0.0145%" height="15" fill="rgb(238,207,15)" fg:x="88" fg:w="2"/><text x="0.8889%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (2 samples, 0.01%)</title><rect x="0.6389%" y="277" width="0.0145%" height="15" fill="rgb(213,199,42)" fg:x="88" fg:w="2"/><text x="0.8889%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.01%)</title><rect x="0.6389%" y="261" width="0.0145%" height="15" fill="rgb(235,201,11)" fg:x="88" fg:w="2"/><text x="0.8889%" y="271.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (2 samples, 0.01%)</title><rect x="0.6389%" y="245" width="0.0145%" height="15" fill="rgb(207,46,11)" fg:x="88" fg:w="2"/><text x="0.8889%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.01%)</title><rect x="0.6389%" y="229" width="0.0145%" height="15" fill="rgb(241,35,35)" fg:x="88" fg:w="2"/><text x="0.8889%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.01%)</title><rect x="0.6389%" y="213" width="0.0145%" height="15" fill="rgb(243,32,47)" fg:x="88" fg:w="2"/><text x="0.8889%" y="223.50"></text></g><g><title>__rdl_alloc (4 samples, 0.03%)</title><rect x="0.7405%" y="181" width="0.0290%" height="15" fill="rgb(247,202,23)" fg:x="102" fg:w="4"/><text x="0.9905%" y="191.50"></text></g><g><title>__rust_alloc (2 samples, 0.01%)</title><rect x="0.7696%" y="181" width="0.0145%" height="15" fill="rgb(219,102,11)" fg:x="106" fg:w="2"/><text x="1.0196%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (161 samples, 1.17%)</title><rect x="0.7187%" y="229" width="1.1689%" height="15" fill="rgb(243,110,44)" fg:x="99" fg:w="161"/><text x="0.9687%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (161 samples, 1.17%)</title><rect x="0.7187%" y="213" width="1.1689%" height="15" fill="rgb(222,74,54)" fg:x="99" fg:w="161"/><text x="0.9687%" y="223.50"></text></g><g><title>alloc::alloc::alloc (161 samples, 1.17%)</title><rect x="0.7187%" y="197" width="1.1689%" height="15" fill="rgb(216,99,12)" fg:x="99" fg:w="161"/><text x="0.9687%" y="207.50"></text></g><g><title>malloc (152 samples, 1.10%)</title><rect x="0.7841%" y="181" width="1.1035%" height="15" fill="rgb(226,22,26)" fg:x="108" fg:w="152"/><text x="1.0341%" y="191.50"></text></g><g><title>[libc.so.6] (93 samples, 0.68%)</title><rect x="1.2124%" y="165" width="0.6752%" height="15" fill="rgb(217,163,10)" fg:x="167" fg:w="93"/><text x="1.4624%" y="175.50"></text></g><g><title>[libc.so.6] (14 samples, 0.10%)</title><rect x="1.7860%" y="149" width="0.1016%" height="15" fill="rgb(213,25,53)" fg:x="246" fg:w="14"/><text x="2.0360%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (167 samples, 1.21%)</title><rect x="0.6824%" y="277" width="1.2124%" height="15" fill="rgb(252,105,26)" fg:x="94" fg:w="167"/><text x="0.9324%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (167 samples, 1.21%)</title><rect x="0.6824%" y="261" width="1.2124%" height="15" fill="rgb(220,39,43)" fg:x="94" fg:w="167"/><text x="0.9324%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (167 samples, 1.21%)</title><rect x="0.6824%" y="245" width="1.2124%" height="15" fill="rgb(229,68,48)" fg:x="94" fg:w="167"/><text x="0.9324%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (190 samples, 1.38%)</title><rect x="0.6824%" y="341" width="1.3794%" height="15" fill="rgb(252,8,32)" fg:x="94" fg:w="190"/><text x="0.9324%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (190 samples, 1.38%)</title><rect x="0.6824%" y="325" width="1.3794%" height="15" fill="rgb(223,20,43)" fg:x="94" fg:w="190"/><text x="0.9324%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (190 samples, 1.38%)</title><rect x="0.6824%" y="309" width="1.3794%" height="15" fill="rgb(229,81,49)" fg:x="94" fg:w="190"/><text x="0.9324%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (190 samples, 1.38%)</title><rect x="0.6824%" y="293" width="1.3794%" height="15" fill="rgb(236,28,36)" fg:x="94" fg:w="190"/><text x="0.9324%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (23 samples, 0.17%)</title><rect x="1.8949%" y="277" width="0.1670%" height="15" fill="rgb(249,185,26)" fg:x="261" fg:w="23"/><text x="2.1449%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.17%)</title><rect x="1.8949%" y="261" width="0.1670%" height="15" fill="rgb(249,174,33)" fg:x="261" fg:w="23"/><text x="2.1449%" y="271.50"></text></g><g><title>[libc.so.6] (21 samples, 0.15%)</title><rect x="1.9094%" y="245" width="0.1525%" height="15" fill="rgb(233,201,37)" fg:x="263" fg:w="21"/><text x="2.1594%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.04%)</title><rect x="2.0619%" y="341" width="0.0436%" height="15" fill="rgb(221,78,26)" fg:x="284" fg:w="6"/><text x="2.3119%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="2.0909%" y="325" width="0.0145%" height="15" fill="rgb(250,127,30)" fg:x="288" fg:w="2"/><text x="2.3409%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="2.0909%" y="309" width="0.0145%" height="15" fill="rgb(230,49,44)" fg:x="288" fg:w="2"/><text x="2.3409%" y="319.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.01%)</title><rect x="2.1417%" y="245" width="0.0145%" height="15" fill="rgb(229,67,23)" fg:x="295" fg:w="2"/><text x="2.3917%" y="255.50"></text></g><g><title>[libc.so.6] (7 samples, 0.05%)</title><rect x="2.3450%" y="213" width="0.0508%" height="15" fill="rgb(249,83,47)" fg:x="323" fg:w="7"/><text x="2.5950%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.28%)</title><rect x="2.1272%" y="293" width="0.2759%" height="15" fill="rgb(215,43,3)" fg:x="293" fg:w="38"/><text x="2.3772%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.28%)</title><rect x="2.1272%" y="277" width="0.2759%" height="15" fill="rgb(238,154,13)" fg:x="293" fg:w="38"/><text x="2.3772%" y="287.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.28%)</title><rect x="2.1272%" y="261" width="0.2759%" height="15" fill="rgb(219,56,2)" fg:x="293" fg:w="38"/><text x="2.3772%" y="271.50"></text></g><g><title>malloc (34 samples, 0.25%)</title><rect x="2.1562%" y="245" width="0.2468%" height="15" fill="rgb(233,0,4)" fg:x="297" fg:w="34"/><text x="2.4062%" y="255.50"></text></g><g><title>[libc.so.6] (25 samples, 0.18%)</title><rect x="2.2216%" y="229" width="0.1815%" height="15" fill="rgb(235,30,7)" fg:x="306" fg:w="25"/><text x="2.4716%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 0.31%)</title><rect x="2.1054%" y="341" width="0.3122%" height="15" fill="rgb(250,79,13)" fg:x="290" fg:w="43"/><text x="2.3554%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42 samples, 0.30%)</title><rect x="2.1127%" y="325" width="0.3049%" height="15" fill="rgb(211,146,34)" fg:x="291" fg:w="42"/><text x="2.3627%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (42 samples, 0.30%)</title><rect x="2.1127%" y="309" width="0.3049%" height="15" fill="rgb(228,22,38)" fg:x="291" fg:w="42"/><text x="2.3627%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.01%)</title><rect x="2.4031%" y="293" width="0.0145%" height="15" fill="rgb(235,168,5)" fg:x="331" fg:w="2"/><text x="2.6531%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.01%)</title><rect x="2.4031%" y="277" width="0.0145%" height="15" fill="rgb(221,155,16)" fg:x="331" fg:w="2"/><text x="2.6531%" y="287.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (4 samples, 0.03%)</title><rect x="2.4176%" y="341" width="0.0290%" height="15" fill="rgb(215,215,53)" fg:x="333" fg:w="4"/><text x="2.6676%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,429 samples, 10.37%)</title><rect x="0.6607%" y="405" width="10.3746%" height="15" fill="rgb(223,4,10)" fg:x="91" fg:w="1429"/><text x="0.9107%" y="415.50">&lt;alloc::vec::Ve..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,428 samples, 10.37%)</title><rect x="0.6679%" y="389" width="10.3674%" height="15" fill="rgb(234,103,6)" fg:x="92" fg:w="1428"/><text x="0.9179%" y="399.50">alloc::slice::&lt;..</text></g><g><title>alloc::slice::hack::to_vec (1,428 samples, 10.37%)</title><rect x="0.6679%" y="373" width="10.3674%" height="15" fill="rgb(227,97,0)" fg:x="92" fg:w="1428"/><text x="0.9179%" y="383.50">alloc::slice::h..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,428 samples, 10.37%)</title><rect x="0.6679%" y="357" width="10.3674%" height="15" fill="rgb(234,150,53)" fg:x="92" fg:w="1428"/><text x="0.9179%" y="367.50">&lt;T as alloc::sl..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,183 samples, 8.59%)</title><rect x="2.4466%" y="341" width="8.5886%" height="15" fill="rgb(228,201,54)" fg:x="337" fg:w="1183"/><text x="2.6966%" y="351.50">core::ptr::c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,183 samples, 8.59%)</title><rect x="2.4466%" y="325" width="8.5886%" height="15" fill="rgb(222,22,37)" fg:x="337" fg:w="1183"/><text x="2.6966%" y="335.50">core::intrin..</text></g><g><title>[libc.so.6] (1,182 samples, 8.58%)</title><rect x="2.4539%" y="309" width="8.5814%" height="15" fill="rgb(237,53,32)" fg:x="338" fg:w="1182"/><text x="2.7039%" y="319.50">[libc.so.6]</text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="11.0062%" y="293" width="0.0290%" height="15" fill="rgb(233,25,53)" fg:x="1516" fg:w="4"/><text x="11.2562%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="11.0062%" y="277" width="0.0290%" height="15" fill="rgb(210,40,34)" fg:x="1516" fg:w="4"/><text x="11.2562%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="11.0062%" y="261" width="0.0290%" height="15" fill="rgb(241,220,44)" fg:x="1516" fg:w="4"/><text x="11.2562%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="11.0062%" y="245" width="0.0290%" height="15" fill="rgb(235,28,35)" fg:x="1516" fg:w="4"/><text x="11.2562%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="11.0062%" y="229" width="0.0290%" height="15" fill="rgb(210,56,17)" fg:x="1516" fg:w="4"/><text x="11.2562%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="11.0062%" y="213" width="0.0290%" height="15" fill="rgb(224,130,29)" fg:x="1516" fg:w="4"/><text x="11.2562%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="11.0135%" y="197" width="0.0218%" height="15" fill="rgb(235,212,8)" fg:x="1517" fg:w="3"/><text x="11.2635%" y="207.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::clone::Clone&gt;::clone (1,431 samples, 10.39%)</title><rect x="0.6534%" y="421" width="10.3891%" height="15" fill="rgb(223,33,50)" fg:x="90" fg:w="1431"/><text x="0.9034%" y="431.50">&lt;tetrs::logic::..</text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (66 samples, 0.48%)</title><rect x="11.0425%" y="421" width="0.4792%" height="15" fill="rgb(219,149,13)" fg:x="1521" fg:w="66"/><text x="11.2925%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (65 samples, 0.47%)</title><rect x="11.0498%" y="405" width="0.4719%" height="15" fill="rgb(250,156,29)" fg:x="1522" fg:w="65"/><text x="11.2998%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (58 samples, 0.42%)</title><rect x="11.1006%" y="389" width="0.4211%" height="15" fill="rgb(216,193,19)" fg:x="1529" fg:w="58"/><text x="11.3506%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.41%)</title><rect x="11.1151%" y="373" width="0.4066%" height="15" fill="rgb(216,135,14)" fg:x="1531" fg:w="56"/><text x="11.3651%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.41%)</title><rect x="11.1151%" y="357" width="0.4066%" height="15" fill="rgb(241,47,5)" fg:x="1531" fg:w="56"/><text x="11.3651%" y="367.50"></text></g><g><title>alloc::alloc::alloc (56 samples, 0.41%)</title><rect x="11.1151%" y="341" width="0.4066%" height="15" fill="rgb(233,42,35)" fg:x="1531" fg:w="56"/><text x="11.3651%" y="351.50"></text></g><g><title>malloc (55 samples, 0.40%)</title><rect x="11.1224%" y="325" width="0.3993%" height="15" fill="rgb(231,13,6)" fg:x="1532" fg:w="55"/><text x="11.3724%" y="335.50"></text></g><g><title>[libc.so.6] (51 samples, 0.37%)</title><rect x="11.1514%" y="309" width="0.3703%" height="15" fill="rgb(207,181,40)" fg:x="1536" fg:w="51"/><text x="11.4014%" y="319.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="11.4781%" y="293" width="0.0436%" height="15" fill="rgb(254,173,49)" fg:x="1581" fg:w="6"/><text x="11.7281%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="11.5217%" y="325" width="0.0363%" height="15" fill="rgb(221,1,38)" fg:x="1587" fg:w="5"/><text x="11.7717%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="11.5217%" y="309" width="0.0363%" height="15" fill="rgb(206,124,46)" fg:x="1587" fg:w="5"/><text x="11.7717%" y="319.50"></text></g><g><title>cfree (5 samples, 0.04%)</title><rect x="11.5217%" y="293" width="0.0363%" height="15" fill="rgb(249,21,11)" fg:x="1587" fg:w="5"/><text x="11.7717%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tetrs::logic::state::State&gt;&gt; (6 samples, 0.04%)</title><rect x="11.5217%" y="421" width="0.0436%" height="15" fill="rgb(222,201,40)" fg:x="1587" fg:w="6"/><text x="11.7717%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="11.5217%" y="405" width="0.0436%" height="15" fill="rgb(235,61,29)" fg:x="1587" fg:w="6"/><text x="11.7717%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;tetrs::logic::state::State,alloc::alloc::Global&gt;&gt; (6 samples, 0.04%)</title><rect x="11.5217%" y="389" width="0.0436%" height="15" fill="rgb(219,207,3)" fg:x="1587" fg:w="6"/><text x="11.7717%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="11.5217%" y="373" width="0.0436%" height="15" fill="rgb(222,56,46)" fg:x="1587" fg:w="6"/><text x="11.7717%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tetrs::logic::state::State&gt;&gt; (6 samples, 0.04%)</title><rect x="11.5217%" y="357" width="0.0436%" height="15" fill="rgb(239,76,54)" fg:x="1587" fg:w="6"/><text x="11.7717%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="11.5217%" y="341" width="0.0436%" height="15" fill="rgb(231,124,27)" fg:x="1587" fg:w="6"/><text x="11.7717%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.04%)</title><rect x="11.5798%" y="261" width="0.0436%" height="15" fill="rgb(249,195,6)" fg:x="1595" fg:w="6"/><text x="11.8298%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.04%)</title><rect x="11.5798%" y="245" width="0.0436%" height="15" fill="rgb(237,174,47)" fg:x="1595" fg:w="6"/><text x="11.8298%" y="255.50"></text></g><g><title>cfree (5 samples, 0.04%)</title><rect x="11.5870%" y="229" width="0.0363%" height="15" fill="rgb(206,201,31)" fg:x="1596" fg:w="5"/><text x="11.8370%" y="239.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="11.6016%" y="213" width="0.0218%" height="15" fill="rgb(231,57,52)" fg:x="1598" fg:w="3"/><text x="11.8516%" y="223.50"></text></g><g><title>[libc.so.6] (239 samples, 1.74%)</title><rect x="11.8557%" y="213" width="1.7352%" height="15" fill="rgb(248,177,22)" fg:x="1633" fg:w="239"/><text x="12.1057%" y="223.50"></text></g><g><title>[libc.so.6] (57 samples, 0.41%)</title><rect x="13.1770%" y="197" width="0.4138%" height="15" fill="rgb(215,211,37)" fg:x="1815" fg:w="57"/><text x="13.4270%" y="207.50"></text></g><g><title>cfree (270 samples, 1.96%)</title><rect x="11.6379%" y="261" width="1.9602%" height="15" fill="rgb(241,128,51)" fg:x="1603" fg:w="270"/><text x="11.8879%" y="271.50">c..</text></g><g><title>[libc.so.6] (260 samples, 1.89%)</title><rect x="11.7105%" y="245" width="1.8876%" height="15" fill="rgb(227,165,31)" fg:x="1613" fg:w="260"/><text x="11.9605%" y="255.50">[..</text></g><g><title>[libc.so.6] (259 samples, 1.88%)</title><rect x="11.7177%" y="229" width="1.8804%" height="15" fill="rgb(228,167,24)" fg:x="1614" fg:w="259"/><text x="11.9677%" y="239.50">[..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (121 samples, 0.88%)</title><rect x="13.6126%" y="149" width="0.8785%" height="15" fill="rgb(228,143,12)" fg:x="1875" fg:w="121"/><text x="13.8626%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (121 samples, 0.88%)</title><rect x="13.6126%" y="133" width="0.8785%" height="15" fill="rgb(249,149,8)" fg:x="1875" fg:w="121"/><text x="13.8626%" y="143.50"></text></g><g><title>cfree (112 samples, 0.81%)</title><rect x="13.6779%" y="117" width="0.8131%" height="15" fill="rgb(243,35,44)" fg:x="1884" fg:w="112"/><text x="13.9279%" y="127.50"></text></g><g><title>[libc.so.6] (68 samples, 0.49%)</title><rect x="13.9974%" y="101" width="0.4937%" height="15" fill="rgb(246,89,9)" fg:x="1928" fg:w="68"/><text x="14.2474%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (135 samples, 0.98%)</title><rect x="13.5981%" y="229" width="0.9801%" height="15" fill="rgb(233,213,13)" fg:x="1873" fg:w="135"/><text x="13.8481%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u16&gt;]&gt; (135 samples, 0.98%)</title><rect x="13.5981%" y="213" width="0.9801%" height="15" fill="rgb(233,141,41)" fg:x="1873" fg:w="135"/><text x="13.8481%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (133 samples, 0.97%)</title><rect x="13.6126%" y="197" width="0.9656%" height="15" fill="rgb(239,167,4)" fg:x="1875" fg:w="133"/><text x="13.8626%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (133 samples, 0.97%)</title><rect x="13.6126%" y="181" width="0.9656%" height="15" fill="rgb(209,217,16)" fg:x="1875" fg:w="133"/><text x="13.8626%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 0.97%)</title><rect x="13.6126%" y="165" width="0.9656%" height="15" fill="rgb(219,88,35)" fg:x="1875" fg:w="133"/><text x="13.8626%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (12 samples, 0.09%)</title><rect x="14.4911%" y="149" width="0.0871%" height="15" fill="rgb(220,193,23)" fg:x="1996" fg:w="12"/><text x="14.7411%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.10%)</title><rect x="14.5782%" y="197" width="0.1016%" height="15" fill="rgb(230,90,52)" fg:x="2008" fg:w="14"/><text x="14.8282%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.10%)</title><rect x="14.5782%" y="181" width="0.1016%" height="15" fill="rgb(252,106,19)" fg:x="2008" fg:w="14"/><text x="14.8282%" y="191.50"></text></g><g><title>cfree (13 samples, 0.09%)</title><rect x="14.5855%" y="165" width="0.0944%" height="15" fill="rgb(206,74,20)" fg:x="2009" fg:w="13"/><text x="14.8355%" y="175.50"></text></g><g><title>[libc.so.6] (11 samples, 0.08%)</title><rect x="14.6000%" y="149" width="0.0799%" height="15" fill="rgb(230,138,44)" fg:x="2011" fg:w="11"/><text x="14.8500%" y="159.50"></text></g><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="14.6435%" y="133" width="0.0363%" height="15" fill="rgb(235,182,43)" fg:x="2017" fg:w="5"/><text x="14.8935%" y="143.50"></text></g><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="14.6435%" y="117" width="0.0363%" height="15" fill="rgb(242,16,51)" fg:x="2017" fg:w="5"/><text x="14.8935%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (150 samples, 1.09%)</title><rect x="13.5981%" y="245" width="1.0890%" height="15" fill="rgb(248,9,4)" fg:x="1873" fg:w="150"/><text x="13.8481%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (15 samples, 0.11%)</title><rect x="14.5782%" y="229" width="0.1089%" height="15" fill="rgb(210,31,22)" fg:x="2008" fg:w="15"/><text x="14.8282%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.11%)</title><rect x="14.5782%" y="213" width="0.1089%" height="15" fill="rgb(239,54,39)" fg:x="2008" fg:w="15"/><text x="14.8282%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (2 samples, 0.01%)</title><rect x="14.6871%" y="245" width="0.0145%" height="15" fill="rgb(230,99,41)" fg:x="2023" fg:w="2"/><text x="14.9371%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (2 samples, 0.01%)</title><rect x="14.6871%" y="229" width="0.0145%" height="15" fill="rgb(253,106,12)" fg:x="2023" fg:w="2"/><text x="14.9371%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="14.6871%" y="213" width="0.0145%" height="15" fill="rgb(213,46,41)" fg:x="2023" fg:w="2"/><text x="14.9371%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (443 samples, 3.22%)</title><rect x="11.5653%" y="341" width="3.2162%" height="15" fill="rgb(215,133,35)" fg:x="1593" fg:w="443"/><text x="11.8153%" y="351.50">has..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (443 samples, 3.22%)</title><rect x="11.5653%" y="325" width="3.2162%" height="15" fill="rgb(213,28,5)" fg:x="1593" fg:w="443"/><text x="11.8153%" y="335.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,alloc::rc::Rc&lt;tetrs::logic::state::State&gt;)&gt; (443 samples, 3.22%)</title><rect x="11.5653%" y="309" width="3.2162%" height="15" fill="rgb(215,77,49)" fg:x="1593" fg:w="443"/><text x="11.8153%" y="319.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;tetrs::logic::state::State&gt;&gt; (443 samples, 3.22%)</title><rect x="11.5653%" y="293" width="3.2162%" height="15" fill="rgb(248,100,22)" fg:x="1593" fg:w="443"/><text x="11.8153%" y="303.50">cor..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (443 samples, 3.22%)</title><rect x="11.5653%" y="277" width="3.2162%" height="15" fill="rgb(208,67,9)" fg:x="1593" fg:w="443"/><text x="11.8153%" y="287.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;tetrs::logic::state::State&gt; (163 samples, 1.18%)</title><rect x="13.5981%" y="261" width="1.1834%" height="15" fill="rgb(219,133,21)" fg:x="1873" fg:w="163"/><text x="13.8481%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;char&gt;&gt; (11 samples, 0.08%)</title><rect x="14.7016%" y="245" width="0.0799%" height="15" fill="rgb(246,46,29)" fg:x="2025" fg:w="11"/><text x="14.9516%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;char&gt;&gt; (11 samples, 0.08%)</title><rect x="14.7016%" y="229" width="0.0799%" height="15" fill="rgb(246,185,52)" fg:x="2025" fg:w="11"/><text x="14.9516%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.08%)</title><rect x="14.7016%" y="213" width="0.0799%" height="15" fill="rgb(252,136,11)" fg:x="2025" fg:w="11"/><text x="14.9516%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.08%)</title><rect x="14.7016%" y="197" width="0.0799%" height="15" fill="rgb(219,138,53)" fg:x="2025" fg:w="11"/><text x="14.9516%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.08%)</title><rect x="14.7016%" y="181" width="0.0799%" height="15" fill="rgb(211,51,23)" fg:x="2025" fg:w="11"/><text x="14.9516%" y="191.50"></text></g><g><title>cfree (11 samples, 0.08%)</title><rect x="14.7016%" y="165" width="0.0799%" height="15" fill="rgb(247,221,28)" fg:x="2025" fg:w="11"/><text x="14.9516%" y="175.50"></text></g><g><title>[libc.so.6] (9 samples, 0.07%)</title><rect x="14.7161%" y="149" width="0.0653%" height="15" fill="rgb(251,222,45)" fg:x="2027" fg:w="9"/><text x="14.9661%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (444 samples, 3.22%)</title><rect x="11.5653%" y="373" width="3.2235%" height="15" fill="rgb(217,162,53)" fg:x="1593" fg:w="444"/><text x="11.8153%" y="383.50">&lt;ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (444 samples, 3.22%)</title><rect x="11.5653%" y="357" width="3.2235%" height="15" fill="rgb(229,93,14)" fg:x="1593" fg:w="444"/><text x="11.8153%" y="367.50">has..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,alloc::rc::Rc&lt;tetrs::logic::state::State&gt;&gt;&gt; (445 samples, 3.23%)</title><rect x="11.5653%" y="421" width="3.2307%" height="15" fill="rgb(209,67,49)" fg:x="1593" fg:w="445"/><text x="11.8153%" y="431.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,std::collections::hash::map::RandomState&gt;&gt; (445 samples, 3.23%)</title><rect x="11.5653%" y="405" width="3.2307%" height="15" fill="rgb(213,87,29)" fg:x="1593" fg:w="445"/><text x="11.8153%" y="415.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,alloc::rc::Rc&lt;tetrs::logic::state::State&gt;)&gt;&gt; (445 samples, 3.23%)</title><rect x="11.5653%" y="389" width="3.2307%" height="15" fill="rgb(205,151,52)" fg:x="1593" fg:w="445"/><text x="11.8153%" y="399.50">cor..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (88 samples, 0.64%)</title><rect x="14.8033%" y="309" width="0.6389%" height="15" fill="rgb(253,215,39)" fg:x="2039" fg:w="88"/><text x="15.0533%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (88 samples, 0.64%)</title><rect x="14.8033%" y="293" width="0.6389%" height="15" fill="rgb(221,220,41)" fg:x="2039" fg:w="88"/><text x="15.0533%" y="303.50"></text></g><g><title>cfree (78 samples, 0.57%)</title><rect x="14.8759%" y="277" width="0.5663%" height="15" fill="rgb(218,133,21)" fg:x="2049" fg:w="78"/><text x="15.1259%" y="287.50"></text></g><g><title>[libc.so.6] (61 samples, 0.44%)</title><rect x="14.9993%" y="261" width="0.4429%" height="15" fill="rgb(221,193,43)" fg:x="2066" fg:w="61"/><text x="15.2493%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.66%)</title><rect x="14.7960%" y="389" width="0.6607%" height="15" fill="rgb(240,128,52)" fg:x="2038" fg:w="91"/><text x="15.0460%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u16&gt;]&gt; (91 samples, 0.66%)</title><rect x="14.7960%" y="373" width="0.6607%" height="15" fill="rgb(253,114,12)" fg:x="2038" fg:w="91"/><text x="15.0460%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (90 samples, 0.65%)</title><rect x="14.8033%" y="357" width="0.6534%" height="15" fill="rgb(215,223,47)" fg:x="2039" fg:w="90"/><text x="15.0533%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (90 samples, 0.65%)</title><rect x="14.8033%" y="341" width="0.6534%" height="15" fill="rgb(248,225,23)" fg:x="2039" fg:w="90"/><text x="15.0533%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (90 samples, 0.65%)</title><rect x="14.8033%" y="325" width="0.6534%" height="15" fill="rgb(250,108,0)" fg:x="2039" fg:w="90"/><text x="15.0533%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="15.4421%" y="309" width="0.0145%" height="15" fill="rgb(228,208,7)" fg:x="2127" fg:w="2"/><text x="15.6921%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.04%)</title><rect x="15.4567%" y="357" width="0.0436%" height="15" fill="rgb(244,45,10)" fg:x="2129" fg:w="6"/><text x="15.7067%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.04%)</title><rect x="15.4567%" y="341" width="0.0436%" height="15" fill="rgb(207,125,25)" fg:x="2129" fg:w="6"/><text x="15.7067%" y="351.50"></text></g><g><title>cfree (6 samples, 0.04%)</title><rect x="15.4567%" y="325" width="0.0436%" height="15" fill="rgb(210,195,18)" fg:x="2129" fg:w="6"/><text x="15.7067%" y="335.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="15.4857%" y="309" width="0.0145%" height="15" fill="rgb(249,80,12)" fg:x="2133" fg:w="2"/><text x="15.7357%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (98 samples, 0.71%)</title><rect x="14.7960%" y="405" width="0.7115%" height="15" fill="rgb(221,65,9)" fg:x="2038" fg:w="98"/><text x="15.0460%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (7 samples, 0.05%)</title><rect x="15.4567%" y="389" width="0.0508%" height="15" fill="rgb(235,49,36)" fg:x="2129" fg:w="7"/><text x="15.7067%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.05%)</title><rect x="15.4567%" y="373" width="0.0508%" height="15" fill="rgb(225,32,20)" fg:x="2129" fg:w="7"/><text x="15.7067%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (122 samples, 0.89%)</title><rect x="15.5075%" y="405" width="0.8857%" height="15" fill="rgb(215,141,46)" fg:x="2136" fg:w="122"/><text x="15.7575%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (122 samples, 0.89%)</title><rect x="15.5075%" y="389" width="0.8857%" height="15" fill="rgb(250,160,47)" fg:x="2136" fg:w="122"/><text x="15.7575%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 0.89%)</title><rect x="15.5075%" y="373" width="0.8857%" height="15" fill="rgb(216,222,40)" fg:x="2136" fg:w="122"/><text x="15.7575%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (122 samples, 0.89%)</title><rect x="15.5075%" y="357" width="0.8857%" height="15" fill="rgb(234,217,39)" fg:x="2136" fg:w="122"/><text x="15.7575%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (122 samples, 0.89%)</title><rect x="15.5075%" y="341" width="0.8857%" height="15" fill="rgb(207,178,40)" fg:x="2136" fg:w="122"/><text x="15.7575%" y="351.50"></text></g><g><title>cfree (122 samples, 0.89%)</title><rect x="15.5075%" y="325" width="0.8857%" height="15" fill="rgb(221,136,13)" fg:x="2136" fg:w="122"/><text x="15.7575%" y="335.50"></text></g><g><title>[libc.so.6] (121 samples, 0.88%)</title><rect x="15.5147%" y="309" width="0.8785%" height="15" fill="rgb(249,199,10)" fg:x="2137" fg:w="121"/><text x="15.7647%" y="319.50"></text></g><g><title>[libc.so.6] (117 samples, 0.85%)</title><rect x="15.5438%" y="293" width="0.8494%" height="15" fill="rgb(249,222,13)" fg:x="2141" fg:w="117"/><text x="15.7938%" y="303.50"></text></g><g><title>[libc.so.6] (110 samples, 0.80%)</title><rect x="15.5946%" y="277" width="0.7986%" height="15" fill="rgb(244,185,38)" fg:x="2148" fg:w="110"/><text x="15.8446%" y="287.50"></text></g><g><title>[libc.so.6] (21 samples, 0.15%)</title><rect x="16.2407%" y="261" width="0.1525%" height="15" fill="rgb(236,202,9)" fg:x="2237" fg:w="21"/><text x="16.4907%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tetrs::logic::state::State&gt; (229 samples, 1.66%)</title><rect x="14.7960%" y="421" width="1.6626%" height="15" fill="rgb(250,229,37)" fg:x="2038" fg:w="229"/><text x="15.0460%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;char&gt;&gt; (9 samples, 0.07%)</title><rect x="16.3932%" y="405" width="0.0653%" height="15" fill="rgb(206,174,23)" fg:x="2258" fg:w="9"/><text x="16.6432%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;char&gt;&gt; (9 samples, 0.07%)</title><rect x="16.3932%" y="389" width="0.0653%" height="15" fill="rgb(211,33,43)" fg:x="2258" fg:w="9"/><text x="16.6432%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.07%)</title><rect x="16.3932%" y="373" width="0.0653%" height="15" fill="rgb(245,58,50)" fg:x="2258" fg:w="9"/><text x="16.6432%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.07%)</title><rect x="16.3932%" y="357" width="0.0653%" height="15" fill="rgb(244,68,36)" fg:x="2258" fg:w="9"/><text x="16.6432%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.07%)</title><rect x="16.3932%" y="341" width="0.0653%" height="15" fill="rgb(232,229,15)" fg:x="2258" fg:w="9"/><text x="16.6432%" y="351.50"></text></g><g><title>cfree (9 samples, 0.07%)</title><rect x="16.3932%" y="325" width="0.0653%" height="15" fill="rgb(254,30,23)" fg:x="2258" fg:w="9"/><text x="16.6432%" y="335.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="16.4150%" y="309" width="0.0436%" height="15" fill="rgb(235,160,14)" fg:x="2261" fg:w="6"/><text x="16.6650%" y="319.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (2 samples, 0.01%)</title><rect x="16.4658%" y="405" width="0.0145%" height="15" fill="rgb(212,155,44)" fg:x="2268" fg:w="2"/><text x="16.7158%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::gt (3 samples, 0.02%)</title><rect x="16.4876%" y="389" width="0.0218%" height="15" fill="rgb(226,2,50)" fg:x="2271" fg:w="3"/><text x="16.7376%" y="399.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (5 samples, 0.04%)</title><rect x="16.4803%" y="405" width="0.0363%" height="15" fill="rgb(234,177,6)" fg:x="2270" fg:w="5"/><text x="16.7303%" y="415.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::pop (11 samples, 0.08%)</title><rect x="16.4585%" y="421" width="0.0799%" height="15" fill="rgb(217,24,9)" fg:x="2267" fg:w="11"/><text x="16.7085%" y="431.50"></text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (3 samples, 0.02%)</title><rect x="16.5166%" y="405" width="0.0218%" height="15" fill="rgb(220,13,46)" fg:x="2275" fg:w="3"/><text x="16.7666%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::swap_remove (2 samples, 0.01%)</title><rect x="16.5239%" y="389" width="0.0145%" height="15" fill="rgb(239,221,27)" fg:x="2276" fg:w="2"/><text x="16.7739%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.09%)</title><rect x="16.5457%" y="405" width="0.0871%" height="15" fill="rgb(222,198,25)" fg:x="2279" fg:w="12"/><text x="16.7957%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.07%)</title><rect x="16.5602%" y="389" width="0.0726%" height="15" fill="rgb(211,99,13)" fg:x="2281" fg:w="10"/><text x="16.8102%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.07%)</title><rect x="16.5602%" y="373" width="0.0726%" height="15" fill="rgb(232,111,31)" fg:x="2281" fg:w="10"/><text x="16.8102%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.07%)</title><rect x="16.5602%" y="357" width="0.0726%" height="15" fill="rgb(245,82,37)" fg:x="2281" fg:w="10"/><text x="16.8102%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (10 samples, 0.07%)</title><rect x="16.5602%" y="341" width="0.0726%" height="15" fill="rgb(227,149,46)" fg:x="2281" fg:w="10"/><text x="16.8102%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (10 samples, 0.07%)</title><rect x="16.5602%" y="325" width="0.0726%" height="15" fill="rgb(218,36,50)" fg:x="2281" fg:w="10"/><text x="16.8102%" y="335.50"></text></g><g><title>alloc::alloc::realloc (10 samples, 0.07%)</title><rect x="16.5602%" y="309" width="0.0726%" height="15" fill="rgb(226,80,48)" fg:x="2281" fg:w="10"/><text x="16.8102%" y="319.50"></text></g><g><title>realloc (9 samples, 0.07%)</title><rect x="16.5674%" y="293" width="0.0653%" height="15" fill="rgb(238,224,15)" fg:x="2282" fg:w="9"/><text x="16.8174%" y="303.50"></text></g><g><title>[libc.so.6] (9 samples, 0.07%)</title><rect x="16.5674%" y="277" width="0.0653%" height="15" fill="rgb(241,136,10)" fg:x="2282" fg:w="9"/><text x="16.8174%" y="287.50"></text></g><g><title>[libc.so.6] (9 samples, 0.07%)</title><rect x="16.5674%" y="261" width="0.0653%" height="15" fill="rgb(208,32,45)" fg:x="2282" fg:w="9"/><text x="16.8174%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.12%)</title><rect x="16.6909%" y="341" width="0.1234%" height="15" fill="rgb(207,135,9)" fg:x="2299" fg:w="17"/><text x="16.9409%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.06%)</title><rect x="16.7562%" y="325" width="0.0581%" height="15" fill="rgb(206,86,44)" fg:x="2308" fg:w="8"/><text x="17.0062%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.04%)</title><rect x="16.8143%" y="309" width="0.0436%" height="15" fill="rgb(245,177,15)" fg:x="2316" fg:w="6"/><text x="17.0643%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="16.8288%" y="293" width="0.0290%" height="15" fill="rgb(206,64,50)" fg:x="2318" fg:w="4"/><text x="17.0788%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="16.8288%" y="277" width="0.0290%" height="15" fill="rgb(234,36,40)" fg:x="2318" fg:w="4"/><text x="17.0788%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.01%)</title><rect x="16.8433%" y="261" width="0.0145%" height="15" fill="rgb(213,64,8)" fg:x="2320" fg:w="2"/><text x="17.0933%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (8 samples, 0.06%)</title><rect x="16.8143%" y="341" width="0.0581%" height="15" fill="rgb(210,75,36)" fg:x="2316" fg:w="8"/><text x="17.0643%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u32 (8 samples, 0.06%)</title><rect x="16.8143%" y="325" width="0.0581%" height="15" fill="rgb(229,88,21)" fg:x="2316" fg:w="8"/><text x="17.0643%" y="335.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_ne_bytes (2 samples, 0.01%)</title><rect x="16.8578%" y="309" width="0.0145%" height="15" fill="rgb(252,204,47)" fg:x="2322" fg:w="2"/><text x="17.1078%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.03%)</title><rect x="17.0539%" y="245" width="0.0290%" height="15" fill="rgb(208,77,27)" fg:x="2349" fg:w="4"/><text x="17.3039%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (13 samples, 0.09%)</title><rect x="17.0321%" y="261" width="0.0944%" height="15" fill="rgb(221,76,26)" fg:x="2346" fg:w="13"/><text x="17.2821%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.04%)</title><rect x="17.0829%" y="245" width="0.0436%" height="15" fill="rgb(225,139,18)" fg:x="2353" fg:w="6"/><text x="17.3329%" y="255.50"></text></g><g><title>core::cmp::min (10 samples, 0.07%)</title><rect x="17.1265%" y="261" width="0.0726%" height="15" fill="rgb(230,137,11)" fg:x="2359" fg:w="10"/><text x="17.3765%" y="271.50"></text></g><g><title>core::cmp::Ord::min (10 samples, 0.07%)</title><rect x="17.1265%" y="245" width="0.0726%" height="15" fill="rgb(212,28,1)" fg:x="2359" fg:w="10"/><text x="17.3765%" y="255.50"></text></g><g><title>core::cmp::min_by (10 samples, 0.07%)</title><rect x="17.1265%" y="229" width="0.0726%" height="15" fill="rgb(248,164,17)" fg:x="2359" fg:w="10"/><text x="17.3765%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (60 samples, 0.44%)</title><rect x="16.8724%" y="309" width="0.4356%" height="15" fill="rgb(222,171,42)" fg:x="2324" fg:w="60"/><text x="17.1224%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (60 samples, 0.44%)</title><rect x="16.8724%" y="293" width="0.4356%" height="15" fill="rgb(243,84,45)" fg:x="2324" fg:w="60"/><text x="17.1224%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (60 samples, 0.44%)</title><rect x="16.8724%" y="277" width="0.4356%" height="15" fill="rgb(252,49,23)" fg:x="2324" fg:w="60"/><text x="17.1224%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (15 samples, 0.11%)</title><rect x="17.1991%" y="261" width="0.1089%" height="15" fill="rgb(215,19,7)" fg:x="2369" fg:w="15"/><text x="17.4491%" y="271.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::hash::Hash&gt;::hash (107 samples, 0.78%)</title><rect x="16.6400%" y="373" width="0.7768%" height="15" fill="rgb(238,81,41)" fg:x="2292" fg:w="107"/><text x="16.8900%" y="383.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::hash::Hash&gt;::hash (107 samples, 0.78%)</title><rect x="16.6400%" y="357" width="0.7768%" height="15" fill="rgb(210,199,37)" fg:x="2292" fg:w="107"/><text x="16.8900%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (75 samples, 0.54%)</title><rect x="16.8724%" y="341" width="0.5445%" height="15" fill="rgb(244,192,49)" fg:x="2324" fg:w="75"/><text x="17.1224%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u16 (75 samples, 0.54%)</title><rect x="16.8724%" y="325" width="0.5445%" height="15" fill="rgb(226,211,11)" fg:x="2324" fg:w="75"/><text x="17.1224%" y="335.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (15 samples, 0.11%)</title><rect x="17.3080%" y="309" width="0.1089%" height="15" fill="rgb(236,162,54)" fg:x="2384" fg:w="15"/><text x="17.5580%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.01%)</title><rect x="17.4387%" y="309" width="0.0145%" height="15" fill="rgb(220,229,9)" fg:x="2402" fg:w="2"/><text x="17.6887%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.05%)</title><rect x="17.4314%" y="325" width="0.0508%" height="15" fill="rgb(250,87,22)" fg:x="2401" fg:w="7"/><text x="17.6814%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.03%)</title><rect x="17.4532%" y="309" width="0.0290%" height="15" fill="rgb(239,43,17)" fg:x="2404" fg:w="4"/><text x="17.7032%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 0.08%)</title><rect x="17.4169%" y="373" width="0.0799%" height="15" fill="rgb(231,177,25)" fg:x="2399" fg:w="11"/><text x="17.6669%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 0.08%)</title><rect x="17.4169%" y="357" width="0.0799%" height="15" fill="rgb(219,179,1)" fg:x="2399" fg:w="11"/><text x="17.6669%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 0.08%)</title><rect x="17.4169%" y="341" width="0.0799%" height="15" fill="rgb(238,219,53)" fg:x="2399" fg:w="11"/><text x="17.6669%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.01%)</title><rect x="17.4822%" y="325" width="0.0145%" height="15" fill="rgb(232,167,36)" fg:x="2408" fg:w="2"/><text x="17.7322%" y="335.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (120 samples, 0.87%)</title><rect x="16.6400%" y="389" width="0.8712%" height="15" fill="rgb(244,19,51)" fg:x="2292" fg:w="120"/><text x="16.8900%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.01%)</title><rect x="17.4967%" y="373" width="0.0145%" height="15" fill="rgb(224,6,22)" fg:x="2410" fg:w="2"/><text x="17.7467%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="17.5403%" y="341" width="0.0145%" height="15" fill="rgb(224,145,5)" fg:x="2416" fg:w="2"/><text x="17.7903%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (7 samples, 0.05%)</title><rect x="17.5548%" y="341" width="0.0508%" height="15" fill="rgb(234,130,49)" fg:x="2418" fg:w="7"/><text x="17.8048%" y="351.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (7 samples, 0.05%)</title><rect x="17.5548%" y="325" width="0.0508%" height="15" fill="rgb(254,6,2)" fg:x="2418" fg:w="7"/><text x="17.8048%" y="335.50"></text></g><g><title>&lt;Q as indexmap::equivalent::Equivalent&lt;K&gt;&gt;::equivalent (6 samples, 0.04%)</title><rect x="17.5621%" y="309" width="0.0436%" height="15" fill="rgb(208,96,46)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.04%)</title><rect x="17.5621%" y="293" width="0.0436%" height="15" fill="rgb(239,3,39)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as alloc::rc::RcEqIdent&lt;T,A&gt;&gt;::eq (6 samples, 0.04%)</title><rect x="17.5621%" y="277" width="0.0436%" height="15" fill="rgb(233,210,1)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="287.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::cmp::PartialEq&gt;::eq (6 samples, 0.04%)</title><rect x="17.5621%" y="261" width="0.0436%" height="15" fill="rgb(244,137,37)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="271.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (6 samples, 0.04%)</title><rect x="17.5621%" y="245" width="0.0436%" height="15" fill="rgb(240,136,2)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (6 samples, 0.04%)</title><rect x="17.5621%" y="229" width="0.0436%" height="15" fill="rgb(239,18,37)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 0.04%)</title><rect x="17.5621%" y="213" width="0.0436%" height="15" fill="rgb(218,185,22)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (6 samples, 0.04%)</title><rect x="17.5621%" y="197" width="0.0436%" height="15" fill="rgb(225,218,4)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.04%)</title><rect x="17.5621%" y="181" width="0.0436%" height="15" fill="rgb(230,182,32)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (6 samples, 0.04%)</title><rect x="17.5621%" y="165" width="0.0436%" height="15" fill="rgb(242,56,43)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="175.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (6 samples, 0.04%)</title><rect x="17.5621%" y="149" width="0.0436%" height="15" fill="rgb(233,99,24)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.04%)</title><rect x="17.5621%" y="133" width="0.0436%" height="15" fill="rgb(234,209,42)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="143.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (6 samples, 0.04%)</title><rect x="17.5621%" y="117" width="0.0436%" height="15" fill="rgb(227,7,12)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="127.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (6 samples, 0.04%)</title><rect x="17.5621%" y="101" width="0.0436%" height="15" fill="rgb(245,203,43)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="111.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 0.04%)</title><rect x="17.5621%" y="85" width="0.0436%" height="15" fill="rgb(238,205,33)" fg:x="2419" fg:w="6"/><text x="17.8121%" y="95.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="17.5766%" y="69" width="0.0290%" height="15" fill="rgb(231,56,7)" fg:x="2421" fg:w="4"/><text x="17.8266%" y="79.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.01%)</title><rect x="17.6056%" y="341" width="0.0145%" height="15" fill="rgb(244,186,29)" fg:x="2425" fg:w="2"/><text x="17.8556%" y="351.50"></text></g><g><title>hashbrown::raw::inner::likely (2 samples, 0.01%)</title><rect x="17.6202%" y="341" width="0.0145%" height="15" fill="rgb(234,111,31)" fg:x="2427" fg:w="2"/><text x="17.8702%" y="351.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (4 samples, 0.03%)</title><rect x="17.6347%" y="341" width="0.0290%" height="15" fill="rgb(241,149,10)" fg:x="2429" fg:w="4"/><text x="17.8847%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.03%)</title><rect x="17.6347%" y="325" width="0.0290%" height="15" fill="rgb(249,206,44)" fg:x="2429" fg:w="4"/><text x="17.8847%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="17.6347%" y="309" width="0.0290%" height="15" fill="rgb(251,153,30)" fg:x="2429" fg:w="4"/><text x="17.8847%" y="319.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::entry (144 samples, 1.05%)</title><rect x="16.6328%" y="405" width="1.0454%" height="15" fill="rgb(239,152,38)" fg:x="2291" fg:w="144"/><text x="16.8828%" y="415.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (23 samples, 0.17%)</title><rect x="17.5113%" y="389" width="0.1670%" height="15" fill="rgb(249,139,47)" fg:x="2412" fg:w="23"/><text x="17.7613%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (21 samples, 0.15%)</title><rect x="17.5258%" y="373" width="0.1525%" height="15" fill="rgb(244,64,35)" fg:x="2414" fg:w="21"/><text x="17.7758%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (19 samples, 0.14%)</title><rect x="17.5403%" y="357" width="0.1379%" height="15" fill="rgb(216,46,15)" fg:x="2416" fg:w="19"/><text x="17.7903%" y="367.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.01%)</title><rect x="17.6637%" y="341" width="0.0145%" height="15" fill="rgb(250,74,19)" fg:x="2433" fg:w="2"/><text x="17.9137%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.01%)</title><rect x="17.6637%" y="325" width="0.0145%" height="15" fill="rgb(249,42,33)" fg:x="2433" fg:w="2"/><text x="17.9137%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.01%)</title><rect x="17.7073%" y="309" width="0.0145%" height="15" fill="rgb(242,149,17)" fg:x="2439" fg:w="2"/><text x="17.9573%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.01%)</title><rect x="17.7073%" y="293" width="0.0145%" height="15" fill="rgb(244,29,21)" fg:x="2439" fg:w="2"/><text x="17.9573%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_insert_slot (5 samples, 0.04%)</title><rect x="17.7436%" y="293" width="0.0363%" height="15" fill="rgb(220,130,37)" fg:x="2444" fg:w="5"/><text x="17.9936%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (5 samples, 0.04%)</title><rect x="17.7436%" y="277" width="0.0363%" height="15" fill="rgb(211,67,2)" fg:x="2444" fg:w="5"/><text x="17.9936%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (3 samples, 0.02%)</title><rect x="17.7581%" y="261" width="0.0218%" height="15" fill="rgb(235,68,52)" fg:x="2446" fg:w="3"/><text x="18.0081%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.02%)</title><rect x="17.7581%" y="245" width="0.0218%" height="15" fill="rgb(246,142,3)" fg:x="2446" fg:w="3"/><text x="18.0081%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (6 samples, 0.04%)</title><rect x="17.7799%" y="261" width="0.0436%" height="15" fill="rgb(241,25,7)" fg:x="2449" fg:w="6"/><text x="18.0299%" y="271.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (6 samples, 0.04%)</title><rect x="17.7799%" y="245" width="0.0436%" height="15" fill="rgb(242,119,39)" fg:x="2449" fg:w="6"/><text x="18.0299%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (6 samples, 0.04%)</title><rect x="17.7799%" y="229" width="0.0436%" height="15" fill="rgb(241,98,45)" fg:x="2449" fg:w="6"/><text x="18.0299%" y="239.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.04%)</title><rect x="17.7799%" y="213" width="0.0436%" height="15" fill="rgb(254,28,30)" fg:x="2449" fg:w="6"/><text x="18.0299%" y="223.50"></text></g><g><title>malloc (6 samples, 0.04%)</title><rect x="17.7799%" y="197" width="0.0436%" height="15" fill="rgb(241,142,54)" fg:x="2449" fg:w="6"/><text x="18.0299%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="17.8017%" y="181" width="0.0218%" height="15" fill="rgb(222,85,15)" fg:x="2452" fg:w="3"/><text x="18.0517%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (17 samples, 0.12%)</title><rect x="17.7073%" y="357" width="0.1234%" height="15" fill="rgb(210,85,47)" fg:x="2439" fg:w="17"/><text x="17.9573%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.12%)</title><rect x="17.7073%" y="341" width="0.1234%" height="15" fill="rgb(224,206,25)" fg:x="2439" fg:w="17"/><text x="17.9573%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (17 samples, 0.12%)</title><rect x="17.7073%" y="325" width="0.1234%" height="15" fill="rgb(243,201,19)" fg:x="2439" fg:w="17"/><text x="17.9573%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (15 samples, 0.11%)</title><rect x="17.7218%" y="309" width="0.1089%" height="15" fill="rgb(236,59,4)" fg:x="2441" fg:w="15"/><text x="17.9718%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (7 samples, 0.05%)</title><rect x="17.7799%" y="293" width="0.0508%" height="15" fill="rgb(254,179,45)" fg:x="2449" fg:w="7"/><text x="18.0299%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (7 samples, 0.05%)</title><rect x="17.7799%" y="277" width="0.0508%" height="15" fill="rgb(226,14,10)" fg:x="2449" fg:w="7"/><text x="18.0299%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (23 samples, 0.17%)</title><rect x="17.6855%" y="373" width="0.1670%" height="15" fill="rgb(244,27,41)" fg:x="2436" fg:w="23"/><text x="17.9355%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (3 samples, 0.02%)</title><rect x="17.8307%" y="357" width="0.0218%" height="15" fill="rgb(235,35,32)" fg:x="2456" fg:w="3"/><text x="18.0807%" y="367.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (28 samples, 0.20%)</title><rect x="17.6782%" y="405" width="0.2033%" height="15" fill="rgb(218,68,31)" fg:x="2435" fg:w="28"/><text x="17.9282%" y="415.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (28 samples, 0.20%)</title><rect x="17.6782%" y="389" width="0.2033%" height="15" fill="rgb(207,120,37)" fg:x="2435" fg:w="28"/><text x="17.9282%" y="399.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (4 samples, 0.03%)</title><rect x="17.8525%" y="373" width="0.0290%" height="15" fill="rgb(227,98,0)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (4 samples, 0.03%)</title><rect x="17.8525%" y="357" width="0.0290%" height="15" fill="rgb(207,7,3)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (4 samples, 0.03%)</title><rect x="17.8525%" y="341" width="0.0290%" height="15" fill="rgb(206,98,19)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (4 samples, 0.03%)</title><rect x="17.8525%" y="325" width="0.0290%" height="15" fill="rgb(217,5,26)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (4 samples, 0.03%)</title><rect x="17.8525%" y="309" width="0.0290%" height="15" fill="rgb(235,190,38)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="17.8525%" y="293" width="0.0290%" height="15" fill="rgb(247,86,24)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.03%)</title><rect x="17.8525%" y="277" width="0.0290%" height="15" fill="rgb(205,101,16)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.03%)</title><rect x="17.8525%" y="261" width="0.0290%" height="15" fill="rgb(246,168,33)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="271.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.03%)</title><rect x="17.8525%" y="245" width="0.0290%" height="15" fill="rgb(231,114,1)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="255.50"></text></g><g><title>realloc (4 samples, 0.03%)</title><rect x="17.8525%" y="229" width="0.0290%" height="15" fill="rgb(207,184,53)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="239.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="17.8525%" y="213" width="0.0290%" height="15" fill="rgb(224,95,51)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="223.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="17.8525%" y="197" width="0.0290%" height="15" fill="rgb(212,188,45)" fg:x="2459" fg:w="4"/><text x="18.1025%" y="207.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (201 samples, 1.46%)</title><rect x="16.5384%" y="421" width="1.4593%" height="15" fill="rgb(223,154,38)" fg:x="2278" fg:w="201"/><text x="16.7884%" y="431.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (16 samples, 0.12%)</title><rect x="17.8815%" y="405" width="0.1162%" height="15" fill="rgb(251,22,52)" fg:x="2463" fg:w="16"/><text x="18.1315%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (9 samples, 0.07%)</title><rect x="17.9323%" y="389" width="0.0653%" height="15" fill="rgb(229,209,22)" fg:x="2470" fg:w="9"/><text x="18.1823%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (9 samples, 0.07%)</title><rect x="17.9323%" y="373" width="0.0653%" height="15" fill="rgb(234,138,34)" fg:x="2470" fg:w="9"/><text x="18.1823%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="17.9977%" y="293" width="0.0145%" height="15" fill="rgb(212,95,11)" fg:x="2479" fg:w="2"/><text x="18.2477%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.04%)</title><rect x="18.0122%" y="261" width="0.0436%" height="15" fill="rgb(240,179,47)" fg:x="2481" fg:w="6"/><text x="18.2622%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.04%)</title><rect x="18.0122%" y="245" width="0.0436%" height="15" fill="rgb(240,163,11)" fg:x="2481" fg:w="6"/><text x="18.2622%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.04%)</title><rect x="18.0122%" y="229" width="0.0436%" height="15" fill="rgb(236,37,12)" fg:x="2481" fg:w="6"/><text x="18.2622%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.03%)</title><rect x="18.0267%" y="213" width="0.0290%" height="15" fill="rgb(232,164,16)" fg:x="2483" fg:w="4"/><text x="18.2767%" y="223.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (9 samples, 0.07%)</title><rect x="17.9977%" y="421" width="0.0653%" height="15" fill="rgb(244,205,15)" fg:x="2479" fg:w="9"/><text x="18.2477%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (9 samples, 0.07%)</title><rect x="17.9977%" y="405" width="0.0653%" height="15" fill="rgb(223,117,47)" fg:x="2479" fg:w="9"/><text x="18.2477%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (9 samples, 0.07%)</title><rect x="17.9977%" y="389" width="0.0653%" height="15" fill="rgb(244,107,35)" fg:x="2479" fg:w="9"/><text x="18.2477%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.07%)</title><rect x="17.9977%" y="373" width="0.0653%" height="15" fill="rgb(205,140,8)" fg:x="2479" fg:w="9"/><text x="18.2477%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.07%)</title><rect x="17.9977%" y="357" width="0.0653%" height="15" fill="rgb(228,84,46)" fg:x="2479" fg:w="9"/><text x="18.2477%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9 samples, 0.07%)</title><rect x="17.9977%" y="341" width="0.0653%" height="15" fill="rgb(254,188,9)" fg:x="2479" fg:w="9"/><text x="18.2477%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::hash::Hash&gt;::hash (9 samples, 0.07%)</title><rect x="17.9977%" y="325" width="0.0653%" height="15" fill="rgb(206,112,54)" fg:x="2479" fg:w="9"/><text x="18.2477%" y="335.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::hash::Hash&gt;::hash (9 samples, 0.07%)</title><rect x="17.9977%" y="309" width="0.0653%" height="15" fill="rgb(216,84,49)" fg:x="2479" fg:w="9"/><text x="18.2477%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (7 samples, 0.05%)</title><rect x="18.0122%" y="293" width="0.0508%" height="15" fill="rgb(214,194,35)" fg:x="2481" fg:w="7"/><text x="18.2622%" y="303.50"></text></g><g><title>core::hash::Hasher::write_u16 (7 samples, 0.05%)</title><rect x="18.0122%" y="277" width="0.0508%" height="15" fill="rgb(249,28,3)" fg:x="2481" fg:w="7"/><text x="18.2622%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.09%)</title><rect x="18.0703%" y="357" width="0.0871%" height="15" fill="rgb(222,56,52)" fg:x="2489" fg:w="12"/><text x="18.3203%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.09%)</title><rect x="18.0703%" y="341" width="0.0871%" height="15" fill="rgb(245,217,50)" fg:x="2489" fg:w="12"/><text x="18.3203%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.09%)</title><rect x="18.0703%" y="325" width="0.0871%" height="15" fill="rgb(213,201,24)" fg:x="2489" fg:w="12"/><text x="18.3203%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.02%)</title><rect x="18.1356%" y="309" width="0.0218%" height="15" fill="rgb(248,116,28)" fg:x="2498" fg:w="3"/><text x="18.3856%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.01%)</title><rect x="18.1429%" y="293" width="0.0145%" height="15" fill="rgb(219,72,43)" fg:x="2499" fg:w="2"/><text x="18.3929%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.01%)</title><rect x="18.1574%" y="357" width="0.0145%" height="15" fill="rgb(209,138,14)" fg:x="2501" fg:w="2"/><text x="18.4074%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.15%)</title><rect x="18.1792%" y="309" width="0.1525%" height="15" fill="rgb(222,18,33)" fg:x="2504" fg:w="21"/><text x="18.4292%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (19 samples, 0.14%)</title><rect x="18.1937%" y="293" width="0.1379%" height="15" fill="rgb(213,199,7)" fg:x="2506" fg:w="19"/><text x="18.4437%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="18.3389%" y="277" width="0.0290%" height="15" fill="rgb(250,110,10)" fg:x="2526" fg:w="4"/><text x="18.5889%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="18.3462%" y="261" width="0.0218%" height="15" fill="rgb(248,123,6)" fg:x="2527" fg:w="3"/><text x="18.5962%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="18.3462%" y="245" width="0.0218%" height="15" fill="rgb(206,91,31)" fg:x="2527" fg:w="3"/><text x="18.5962%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.01%)</title><rect x="18.3534%" y="229" width="0.0145%" height="15" fill="rgb(211,154,13)" fg:x="2528" fg:w="2"/><text x="18.6034%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (16 samples, 0.12%)</title><rect x="18.3316%" y="309" width="0.1162%" height="15" fill="rgb(225,148,7)" fg:x="2525" fg:w="16"/><text x="18.5816%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u32 (16 samples, 0.12%)</title><rect x="18.3316%" y="293" width="0.1162%" height="15" fill="rgb(220,160,43)" fg:x="2525" fg:w="16"/><text x="18.5816%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_ne_bytes (11 samples, 0.08%)</title><rect x="18.3679%" y="277" width="0.0799%" height="15" fill="rgb(213,52,39)" fg:x="2530" fg:w="11"/><text x="18.6179%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.08%)</title><rect x="18.9415%" y="213" width="0.0799%" height="15" fill="rgb(243,137,7)" fg:x="2609" fg:w="11"/><text x="19.1915%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (24 samples, 0.17%)</title><rect x="18.9197%" y="229" width="0.1742%" height="15" fill="rgb(230,79,13)" fg:x="2606" fg:w="24"/><text x="19.1697%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10 samples, 0.07%)</title><rect x="19.0213%" y="213" width="0.0726%" height="15" fill="rgb(247,105,23)" fg:x="2620" fg:w="10"/><text x="19.2713%" y="223.50"></text></g><g><title>core::cmp::min (7 samples, 0.05%)</title><rect x="19.0939%" y="229" width="0.0508%" height="15" fill="rgb(223,179,41)" fg:x="2630" fg:w="7"/><text x="19.3439%" y="239.50"></text></g><g><title>core::cmp::Ord::min (7 samples, 0.05%)</title><rect x="19.0939%" y="213" width="0.0508%" height="15" fill="rgb(218,9,34)" fg:x="2630" fg:w="7"/><text x="19.3439%" y="223.50"></text></g><g><title>core::cmp::min_by (7 samples, 0.05%)</title><rect x="19.0939%" y="197" width="0.0508%" height="15" fill="rgb(222,106,8)" fg:x="2630" fg:w="7"/><text x="19.3439%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (170 samples, 1.23%)</title><rect x="18.4768%" y="277" width="1.2342%" height="15" fill="rgb(211,220,0)" fg:x="2545" fg:w="170"/><text x="18.7268%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (166 samples, 1.21%)</title><rect x="18.5059%" y="261" width="1.2052%" height="15" fill="rgb(229,52,16)" fg:x="2549" fg:w="166"/><text x="18.7559%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (166 samples, 1.21%)</title><rect x="18.5059%" y="245" width="1.2052%" height="15" fill="rgb(212,155,18)" fg:x="2549" fg:w="166"/><text x="18.7559%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (78 samples, 0.57%)</title><rect x="19.1448%" y="229" width="0.5663%" height="15" fill="rgb(242,21,14)" fg:x="2637" fg:w="78"/><text x="19.3948%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="19.6893%" y="213" width="0.0218%" height="15" fill="rgb(222,19,48)" fg:x="2712" fg:w="3"/><text x="19.9393%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (269 samples, 1.95%)</title><rect x="18.0703%" y="389" width="1.9530%" height="15" fill="rgb(232,45,27)" fg:x="2489" fg:w="269"/><text x="18.3203%" y="399.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (269 samples, 1.95%)</title><rect x="18.0703%" y="373" width="1.9530%" height="15" fill="rgb(249,103,42)" fg:x="2489" fg:w="269"/><text x="18.3203%" y="383.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (255 samples, 1.85%)</title><rect x="18.1719%" y="357" width="1.8513%" height="15" fill="rgb(246,81,33)" fg:x="2503" fg:w="255"/><text x="18.4219%" y="367.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::hash::Hash&gt;::hash (255 samples, 1.85%)</title><rect x="18.1719%" y="341" width="1.8513%" height="15" fill="rgb(252,33,42)" fg:x="2503" fg:w="255"/><text x="18.4219%" y="351.50">&lt;..</text></g><g><title>&lt;tetrs::logic::state::State as core::hash::Hash&gt;::hash (255 samples, 1.85%)</title><rect x="18.1719%" y="325" width="1.8513%" height="15" fill="rgb(209,212,41)" fg:x="2503" fg:w="255"/><text x="18.4219%" y="335.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (217 samples, 1.58%)</title><rect x="18.4478%" y="309" width="1.5754%" height="15" fill="rgb(207,154,6)" fg:x="2541" fg:w="217"/><text x="18.6978%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u16 (217 samples, 1.58%)</title><rect x="18.4478%" y="293" width="1.5754%" height="15" fill="rgb(223,64,47)" fg:x="2541" fg:w="217"/><text x="18.6978%" y="303.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (43 samples, 0.31%)</title><rect x="19.7110%" y="277" width="0.3122%" height="15" fill="rgb(211,161,38)" fg:x="2715" fg:w="43"/><text x="19.9610%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (3 samples, 0.02%)</title><rect x="20.0741%" y="309" width="0.0218%" height="15" fill="rgb(219,138,40)" fg:x="2765" fg:w="3"/><text x="20.3241%" y="319.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="20.0741%" y="293" width="0.0218%" height="15" fill="rgb(241,228,46)" fg:x="2765" fg:w="3"/><text x="20.3241%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::_{{closure}} (3 samples, 0.02%)</title><rect x="20.0741%" y="277" width="0.0218%" height="15" fill="rgb(223,209,38)" fg:x="2765" fg:w="3"/><text x="20.3241%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (3 samples, 0.02%)</title><rect x="20.0741%" y="261" width="0.0218%" height="15" fill="rgb(236,164,45)" fg:x="2765" fg:w="3"/><text x="20.3241%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="20.0741%" y="245" width="0.0218%" height="15" fill="rgb(231,15,5)" fg:x="2765" fg:w="3"/><text x="20.3241%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="20.0741%" y="229" width="0.0218%" height="15" fill="rgb(252,35,15)" fg:x="2765" fg:w="3"/><text x="20.3241%" y="239.50"></text></g><g><title>cfree (3 samples, 0.02%)</title><rect x="20.0741%" y="213" width="0.0218%" height="15" fill="rgb(248,181,18)" fg:x="2765" fg:w="3"/><text x="20.3241%" y="223.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="20.0813%" y="197" width="0.0145%" height="15" fill="rgb(233,39,42)" fg:x="2766" fg:w="2"/><text x="20.3313%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.04%)</title><rect x="20.1467%" y="181" width="0.0436%" height="15" fill="rgb(238,110,33)" fg:x="2775" fg:w="6"/><text x="20.3967%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 0.11%)</title><rect x="20.1031%" y="245" width="0.1089%" height="15" fill="rgb(233,195,10)" fg:x="2769" fg:w="15"/><text x="20.3531%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 0.11%)</title><rect x="20.1031%" y="229" width="0.1089%" height="15" fill="rgb(254,105,3)" fg:x="2769" fg:w="15"/><text x="20.3531%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 0.11%)</title><rect x="20.1031%" y="213" width="0.1089%" height="15" fill="rgb(221,225,9)" fg:x="2769" fg:w="15"/><text x="20.3531%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.07%)</title><rect x="20.1467%" y="197" width="0.0653%" height="15" fill="rgb(224,227,45)" fg:x="2775" fg:w="9"/><text x="20.3967%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.02%)</title><rect x="20.1902%" y="181" width="0.0218%" height="15" fill="rgb(229,198,43)" fg:x="2781" fg:w="3"/><text x="20.4402%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.25%)</title><rect x="20.2193%" y="197" width="0.2468%" height="15" fill="rgb(206,209,35)" fg:x="2785" fg:w="34"/><text x="20.4693%" y="207.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (27 samples, 0.20%)</title><rect x="20.2701%" y="181" width="0.1960%" height="15" fill="rgb(245,195,53)" fg:x="2792" fg:w="27"/><text x="20.5201%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.01%)</title><rect x="20.4661%" y="117" width="0.0145%" height="15" fill="rgb(240,92,26)" fg:x="2819" fg:w="2"/><text x="20.7161%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.01%)</title><rect x="20.4661%" y="101" width="0.0145%" height="15" fill="rgb(207,40,23)" fg:x="2819" fg:w="2"/><text x="20.7161%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="20.4661%" y="165" width="0.0218%" height="15" fill="rgb(223,111,35)" fg:x="2819" fg:w="3"/><text x="20.7161%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="20.4661%" y="149" width="0.0218%" height="15" fill="rgb(229,147,28)" fg:x="2819" fg:w="3"/><text x="20.7161%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="20.4661%" y="133" width="0.0218%" height="15" fill="rgb(211,29,28)" fg:x="2819" fg:w="3"/><text x="20.7161%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (5 samples, 0.04%)</title><rect x="20.4661%" y="197" width="0.0363%" height="15" fill="rgb(228,72,33)" fg:x="2819" fg:w="5"/><text x="20.7161%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u32 (5 samples, 0.04%)</title><rect x="20.4661%" y="181" width="0.0363%" height="15" fill="rgb(205,214,31)" fg:x="2819" fg:w="5"/><text x="20.7161%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_ne_bytes (2 samples, 0.01%)</title><rect x="20.4879%" y="165" width="0.0145%" height="15" fill="rgb(224,111,15)" fg:x="2822" fg:w="2"/><text x="20.7379%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.08%)</title><rect x="21.1122%" y="101" width="0.0799%" height="15" fill="rgb(253,21,26)" fg:x="2908" fg:w="11"/><text x="21.3622%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (33 samples, 0.24%)</title><rect x="21.0542%" y="117" width="0.2396%" height="15" fill="rgb(245,139,43)" fg:x="2900" fg:w="33"/><text x="21.3042%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14 samples, 0.10%)</title><rect x="21.1921%" y="101" width="0.1016%" height="15" fill="rgb(252,170,7)" fg:x="2919" fg:w="14"/><text x="21.4421%" y="111.50"></text></g><g><title>core::cmp::min (10 samples, 0.07%)</title><rect x="21.2937%" y="117" width="0.0726%" height="15" fill="rgb(231,118,14)" fg:x="2933" fg:w="10"/><text x="21.5437%" y="127.50"></text></g><g><title>core::cmp::Ord::min (10 samples, 0.07%)</title><rect x="21.2937%" y="101" width="0.0726%" height="15" fill="rgb(238,83,0)" fg:x="2933" fg:w="10"/><text x="21.5437%" y="111.50"></text></g><g><title>core::cmp::min_by (10 samples, 0.07%)</title><rect x="21.2937%" y="85" width="0.0726%" height="15" fill="rgb(221,39,39)" fg:x="2933" fg:w="10"/><text x="21.5437%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (213 samples, 1.55%)</title><rect x="20.5169%" y="165" width="1.5464%" height="15" fill="rgb(222,119,46)" fg:x="2826" fg:w="213"/><text x="20.7669%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (207 samples, 1.50%)</title><rect x="20.5605%" y="149" width="1.5028%" height="15" fill="rgb(222,165,49)" fg:x="2832" fg:w="207"/><text x="20.8105%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (207 samples, 1.50%)</title><rect x="20.5605%" y="133" width="1.5028%" height="15" fill="rgb(219,113,52)" fg:x="2832" fg:w="207"/><text x="20.8105%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (96 samples, 0.70%)</title><rect x="21.3663%" y="117" width="0.6970%" height="15" fill="rgb(214,7,15)" fg:x="2943" fg:w="96"/><text x="21.6163%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (315 samples, 2.29%)</title><rect x="20.0958%" y="309" width="2.2869%" height="15" fill="rgb(235,32,4)" fg:x="2768" fg:w="315"/><text x="20.3458%" y="319.50">h..</text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (315 samples, 2.29%)</title><rect x="20.0958%" y="293" width="2.2869%" height="15" fill="rgb(238,90,54)" fg:x="2768" fg:w="315"/><text x="20.3458%" y="303.50">h..</text></g><g><title>hashbrown::map::make_hash (315 samples, 2.29%)</title><rect x="20.0958%" y="277" width="2.2869%" height="15" fill="rgb(213,208,19)" fg:x="2768" fg:w="315"/><text x="20.3458%" y="287.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (315 samples, 2.29%)</title><rect x="20.0958%" y="261" width="2.2869%" height="15" fill="rgb(233,156,4)" fg:x="2768" fg:w="315"/><text x="20.3458%" y="271.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (299 samples, 2.17%)</title><rect x="20.2120%" y="245" width="2.1708%" height="15" fill="rgb(207,194,5)" fg:x="2784" fg:w="299"/><text x="20.4620%" y="255.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::hash::Hash&gt;::hash (299 samples, 2.17%)</title><rect x="20.2120%" y="229" width="2.1708%" height="15" fill="rgb(206,111,30)" fg:x="2784" fg:w="299"/><text x="20.4620%" y="239.50">&lt;..</text></g><g><title>&lt;tetrs::logic::state::State as core::hash::Hash&gt;::hash (299 samples, 2.17%)</title><rect x="20.2120%" y="213" width="2.1708%" height="15" fill="rgb(243,70,54)" fg:x="2784" fg:w="299"/><text x="20.4620%" y="223.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (259 samples, 1.88%)</title><rect x="20.5024%" y="197" width="1.8804%" height="15" fill="rgb(242,28,8)" fg:x="2824" fg:w="259"/><text x="20.7524%" y="207.50">c..</text></g><g><title>core::hash::Hasher::write_u16 (259 samples, 1.88%)</title><rect x="20.5024%" y="181" width="1.8804%" height="15" fill="rgb(219,106,18)" fg:x="2824" fg:w="259"/><text x="20.7524%" y="191.50">c..</text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (44 samples, 0.32%)</title><rect x="22.0633%" y="165" width="0.3194%" height="15" fill="rgb(244,222,10)" fg:x="3039" fg:w="44"/><text x="22.3133%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (3 samples, 0.02%)</title><rect x="22.3828%" y="277" width="0.0218%" height="15" fill="rgb(236,179,52)" fg:x="3083" fg:w="3"/><text x="22.6328%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.01%)</title><rect x="22.3900%" y="261" width="0.0145%" height="15" fill="rgb(213,23,39)" fg:x="3084" fg:w="2"/><text x="22.6400%" y="271.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (2 samples, 0.01%)</title><rect x="22.3900%" y="245" width="0.0145%" height="15" fill="rgb(238,48,10)" fg:x="3084" fg:w="2"/><text x="22.6400%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (7 samples, 0.05%)</title><rect x="22.3828%" y="309" width="0.0508%" height="15" fill="rgb(251,196,23)" fg:x="3083" fg:w="7"/><text x="22.6328%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (7 samples, 0.05%)</title><rect x="22.3828%" y="293" width="0.0508%" height="15" fill="rgb(250,152,24)" fg:x="3083" fg:w="7"/><text x="22.6328%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (4 samples, 0.03%)</title><rect x="22.4045%" y="277" width="0.0290%" height="15" fill="rgb(209,150,17)" fg:x="3086" fg:w="4"/><text x="22.6545%" y="287.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.03%)</title><rect x="22.4408%" y="261" width="0.0290%" height="15" fill="rgb(234,202,34)" fg:x="3091" fg:w="4"/><text x="22.6908%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.03%)</title><rect x="22.4408%" y="245" width="0.0290%" height="15" fill="rgb(253,148,53)" fg:x="3091" fg:w="4"/><text x="22.6908%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.03%)</title><rect x="22.4408%" y="229" width="0.0290%" height="15" fill="rgb(218,129,16)" fg:x="3091" fg:w="4"/><text x="22.6908%" y="239.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.03%)</title><rect x="22.4408%" y="213" width="0.0290%" height="15" fill="rgb(216,85,19)" fg:x="3091" fg:w="4"/><text x="22.6908%" y="223.50"></text></g><g><title>malloc (4 samples, 0.03%)</title><rect x="22.4408%" y="197" width="0.0290%" height="15" fill="rgb(235,228,7)" fg:x="3091" fg:w="4"/><text x="22.6908%" y="207.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="22.4408%" y="181" width="0.0290%" height="15" fill="rgb(245,175,0)" fg:x="3091" fg:w="4"/><text x="22.6908%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (337 samples, 2.45%)</title><rect x="20.0305%" y="373" width="2.4466%" height="15" fill="rgb(208,168,36)" fg:x="2759" fg:w="337"/><text x="20.2805%" y="383.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (335 samples, 2.43%)</title><rect x="20.0450%" y="357" width="2.4321%" height="15" fill="rgb(246,171,24)" fg:x="2761" fg:w="335"/><text x="20.2950%" y="367.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (335 samples, 2.43%)</title><rect x="20.0450%" y="341" width="2.4321%" height="15" fill="rgb(215,142,24)" fg:x="2761" fg:w="335"/><text x="20.2950%" y="351.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (334 samples, 2.42%)</title><rect x="20.0523%" y="325" width="2.4249%" height="15" fill="rgb(250,187,7)" fg:x="2762" fg:w="334"/><text x="20.3023%" y="335.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (6 samples, 0.04%)</title><rect x="22.4336%" y="309" width="0.0436%" height="15" fill="rgb(228,66,33)" fg:x="3090" fg:w="6"/><text x="22.6836%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (6 samples, 0.04%)</title><rect x="22.4336%" y="293" width="0.0436%" height="15" fill="rgb(234,215,21)" fg:x="3090" fg:w="6"/><text x="22.6836%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (5 samples, 0.04%)</title><rect x="22.4408%" y="277" width="0.0363%" height="15" fill="rgb(222,191,20)" fg:x="3091" fg:w="5"/><text x="22.6908%" y="287.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::cmp::PartialEq&gt;::eq (3 samples, 0.02%)</title><rect x="22.4771%" y="261" width="0.0218%" height="15" fill="rgb(245,79,54)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="271.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (3 samples, 0.02%)</title><rect x="22.4771%" y="245" width="0.0218%" height="15" fill="rgb(240,10,37)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.02%)</title><rect x="22.4771%" y="229" width="0.0218%" height="15" fill="rgb(214,192,32)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.02%)</title><rect x="22.4771%" y="213" width="0.0218%" height="15" fill="rgb(209,36,54)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (3 samples, 0.02%)</title><rect x="22.4771%" y="197" width="0.0218%" height="15" fill="rgb(220,10,11)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.02%)</title><rect x="22.4771%" y="181" width="0.0218%" height="15" fill="rgb(221,106,17)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (3 samples, 0.02%)</title><rect x="22.4771%" y="165" width="0.0218%" height="15" fill="rgb(251,142,44)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="175.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (3 samples, 0.02%)</title><rect x="22.4771%" y="149" width="0.0218%" height="15" fill="rgb(238,13,15)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.02%)</title><rect x="22.4771%" y="133" width="0.0218%" height="15" fill="rgb(208,107,27)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="143.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (3 samples, 0.02%)</title><rect x="22.4771%" y="117" width="0.0218%" height="15" fill="rgb(205,136,37)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="127.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.02%)</title><rect x="22.4771%" y="101" width="0.0218%" height="15" fill="rgb(250,205,27)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="111.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.02%)</title><rect x="22.4771%" y="85" width="0.0218%" height="15" fill="rgb(210,80,43)" fg:x="3096" fg:w="3"/><text x="22.7271%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (4 samples, 0.03%)</title><rect x="22.4771%" y="357" width="0.0290%" height="15" fill="rgb(247,160,36)" fg:x="3096" fg:w="4"/><text x="22.7271%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (4 samples, 0.03%)</title><rect x="22.4771%" y="341" width="0.0290%" height="15" fill="rgb(234,13,49)" fg:x="3096" fg:w="4"/><text x="22.7271%" y="351.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.03%)</title><rect x="22.4771%" y="325" width="0.0290%" height="15" fill="rgb(234,122,0)" fg:x="3096" fg:w="4"/><text x="22.7271%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.03%)</title><rect x="22.4771%" y="309" width="0.0290%" height="15" fill="rgb(207,146,38)" fg:x="3096" fg:w="4"/><text x="22.7271%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="22.4771%" y="293" width="0.0290%" height="15" fill="rgb(207,177,25)" fg:x="3096" fg:w="4"/><text x="22.7271%" y="303.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as alloc::rc::RcEqIdent&lt;T,A&gt;&gt;::eq (4 samples, 0.03%)</title><rect x="22.4771%" y="277" width="0.0290%" height="15" fill="rgb(211,178,42)" fg:x="3096" fg:w="4"/><text x="22.7271%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (350 samples, 2.54%)</title><rect x="20.0232%" y="389" width="2.5410%" height="15" fill="rgb(230,69,54)" fg:x="2758" fg:w="350"/><text x="20.2732%" y="399.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (12 samples, 0.09%)</title><rect x="22.4771%" y="373" width="0.0871%" height="15" fill="rgb(214,135,41)" fg:x="3096" fg:w="12"/><text x="22.7271%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (6 samples, 0.04%)</title><rect x="22.5207%" y="357" width="0.0436%" height="15" fill="rgb(237,67,25)" fg:x="3102" fg:w="6"/><text x="22.7707%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6 samples, 0.04%)</title><rect x="22.5207%" y="341" width="0.0436%" height="15" fill="rgb(222,189,50)" fg:x="3102" fg:w="6"/><text x="22.7707%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.04%)</title><rect x="22.5207%" y="325" width="0.0436%" height="15" fill="rgb(245,148,34)" fg:x="3102" fg:w="6"/><text x="22.7707%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (623 samples, 4.52%)</title><rect x="18.0630%" y="421" width="4.5230%" height="15" fill="rgb(222,29,6)" fg:x="2488" fg:w="623"/><text x="18.3130%" y="431.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (623 samples, 4.52%)</title><rect x="18.0630%" y="405" width="4.5230%" height="15" fill="rgb(221,189,43)" fg:x="2488" fg:w="623"/><text x="18.3130%" y="415.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (3 samples, 0.02%)</title><rect x="22.5643%" y="389" width="0.0218%" height="15" fill="rgb(207,36,27)" fg:x="3108" fg:w="3"/><text x="22.8143%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.02%)</title><rect x="22.5643%" y="373" width="0.0218%" height="15" fill="rgb(217,90,24)" fg:x="3108" fg:w="3"/><text x="22.8143%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.02%)</title><rect x="22.5643%" y="357" width="0.0218%" height="15" fill="rgb(224,66,35)" fg:x="3108" fg:w="3"/><text x="22.8143%" y="367.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="22.5643%" y="341" width="0.0218%" height="15" fill="rgb(221,13,50)" fg:x="3108" fg:w="3"/><text x="22.8143%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="22.7022%" y="389" width="0.0436%" height="15" fill="rgb(236,68,49)" fg:x="3127" fg:w="6"/><text x="22.9522%" y="399.50"></text></g><g><title>__rdl_alloc (39 samples, 0.28%)</title><rect x="23.7259%" y="181" width="0.2831%" height="15" fill="rgb(229,146,28)" fg:x="3268" fg:w="39"/><text x="23.9759%" y="191.50"></text></g><g><title>__rust_alloc (74 samples, 0.54%)</title><rect x="24.0090%" y="181" width="0.5372%" height="15" fill="rgb(225,31,38)" fg:x="3307" fg:w="74"/><text x="24.2590%" y="191.50"></text></g><g><title>core::ptr::read_volatile (5 samples, 0.04%)</title><rect x="24.5462%" y="181" width="0.0363%" height="15" fill="rgb(250,208,3)" fg:x="3381" fg:w="5"/><text x="24.7962%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,219 samples, 8.85%)</title><rect x="23.4282%" y="229" width="8.8500%" height="15" fill="rgb(246,54,23)" fg:x="3227" fg:w="1219"/><text x="23.6782%" y="239.50">&lt;alloc::alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,219 samples, 8.85%)</title><rect x="23.4282%" y="213" width="8.8500%" height="15" fill="rgb(243,76,11)" fg:x="3227" fg:w="1219"/><text x="23.6782%" y="223.50">alloc::alloc:..</text></g><g><title>alloc::alloc::alloc (1,214 samples, 8.81%)</title><rect x="23.4645%" y="197" width="8.8137%" height="15" fill="rgb(245,21,50)" fg:x="3232" fg:w="1214"/><text x="23.7145%" y="207.50">alloc::alloc..</text></g><g><title>malloc (1,060 samples, 7.70%)</title><rect x="24.5825%" y="181" width="7.6957%" height="15" fill="rgb(228,9,43)" fg:x="3386" fg:w="1060"/><text x="24.8325%" y="191.50">malloc</text></g><g><title>[libc.so.6] (457 samples, 3.32%)</title><rect x="28.9604%" y="165" width="3.3178%" height="15" fill="rgb(208,100,47)" fg:x="3989" fg:w="457"/><text x="29.2104%" y="175.50">[li..</text></g><g><title>[libc.so.6] (20 samples, 0.15%)</title><rect x="32.1330%" y="149" width="0.1452%" height="15" fill="rgb(232,26,8)" fg:x="4426" fg:w="20"/><text x="32.3830%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,300 samples, 9.44%)</title><rect x="22.8764%" y="277" width="9.4381%" height="15" fill="rgb(216,166,38)" fg:x="3151" fg:w="1300"/><text x="23.1264%" y="287.50">alloc::vec::V..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,300 samples, 9.44%)</title><rect x="22.8764%" y="261" width="9.4381%" height="15" fill="rgb(251,202,51)" fg:x="3151" fg:w="1300"/><text x="23.1264%" y="271.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,300 samples, 9.44%)</title><rect x="22.8764%" y="245" width="9.4381%" height="15" fill="rgb(254,216,34)" fg:x="3151" fg:w="1300"/><text x="23.1264%" y="255.50">alloc::raw_ve..</text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.04%)</title><rect x="32.2782%" y="229" width="0.0363%" height="15" fill="rgb(251,32,27)" fg:x="4446" fg:w="5"/><text x="32.5282%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (5 samples, 0.04%)</title><rect x="32.2782%" y="213" width="0.0363%" height="15" fill="rgb(208,127,28)" fg:x="4446" fg:w="5"/><text x="32.5282%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,561 samples, 11.33%)</title><rect x="22.8764%" y="341" width="11.3329%" height="15" fill="rgb(224,137,22)" fg:x="3151" fg:w="1561"/><text x="23.1264%" y="351.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,561 samples, 11.33%)</title><rect x="22.8764%" y="325" width="11.3329%" height="15" fill="rgb(254,70,32)" fg:x="3151" fg:w="1561"/><text x="23.1264%" y="335.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (1,561 samples, 11.33%)</title><rect x="22.8764%" y="309" width="11.3329%" height="15" fill="rgb(229,75,37)" fg:x="3151" fg:w="1561"/><text x="23.1264%" y="319.50">alloc::slice::hac..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,561 samples, 11.33%)</title><rect x="22.8764%" y="293" width="11.3329%" height="15" fill="rgb(252,64,23)" fg:x="3151" fg:w="1561"/><text x="23.1264%" y="303.50">&lt;T as alloc::slic..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (261 samples, 1.89%)</title><rect x="32.3145%" y="277" width="1.8949%" height="15" fill="rgb(232,162,48)" fg:x="4451" fg:w="261"/><text x="32.5645%" y="287.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (261 samples, 1.89%)</title><rect x="32.3145%" y="261" width="1.8949%" height="15" fill="rgb(246,160,12)" fg:x="4451" fg:w="261"/><text x="32.5645%" y="271.50">c..</text></g><g><title>[libc.so.6] (216 samples, 1.57%)</title><rect x="32.6412%" y="245" width="1.5682%" height="15" fill="rgb(247,166,0)" fg:x="4496" fg:w="216"/><text x="32.8912%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.30%)</title><rect x="34.2094%" y="341" width="0.3049%" height="15" fill="rgb(249,219,21)" fg:x="4712" fg:w="42"/><text x="34.4594%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.06%)</title><rect x="34.4562%" y="325" width="0.0581%" height="15" fill="rgb(205,209,3)" fg:x="4746" fg:w="8"/><text x="34.7062%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (4 samples, 0.03%)</title><rect x="34.5143%" y="341" width="0.0290%" height="15" fill="rgb(243,44,1)" fg:x="4754" fg:w="4"/><text x="34.7643%" y="351.50"></text></g><g><title>[libc.so.6] (7 samples, 0.05%)</title><rect x="34.6595%" y="245" width="0.0508%" height="15" fill="rgb(206,159,16)" fg:x="4774" fg:w="7"/><text x="34.9095%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.05%)</title><rect x="34.6595%" y="229" width="0.0508%" height="15" fill="rgb(244,77,30)" fg:x="4774" fg:w="7"/><text x="34.9095%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="34.6958%" y="213" width="0.0145%" height="15" fill="rgb(218,69,12)" fg:x="4779" fg:w="2"/><text x="34.9458%" y="223.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="34.7103%" y="245" width="0.0145%" height="15" fill="rgb(212,87,7)" fg:x="4781" fg:w="2"/><text x="34.9603%" y="255.50"></text></g><g><title>__rust_alloc (10 samples, 0.07%)</title><rect x="34.7248%" y="245" width="0.0726%" height="15" fill="rgb(245,114,25)" fg:x="4783" fg:w="10"/><text x="34.9748%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="35.9881%" y="197" width="0.0363%" height="15" fill="rgb(210,61,42)" fg:x="4957" fg:w="5"/><text x="36.2381%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="35.9881%" y="181" width="0.0363%" height="15" fill="rgb(211,52,33)" fg:x="4957" fg:w="5"/><text x="36.2381%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="35.9881%" y="165" width="0.0363%" height="15" fill="rgb(234,58,33)" fg:x="4957" fg:w="5"/><text x="36.2381%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="35.9881%" y="149" width="0.0363%" height="15" fill="rgb(220,115,36)" fg:x="4957" fg:w="5"/><text x="36.2381%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="35.9881%" y="133" width="0.0363%" height="15" fill="rgb(243,153,54)" fg:x="4957" fg:w="5"/><text x="36.2381%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="35.9881%" y="117" width="0.0363%" height="15" fill="rgb(251,47,18)" fg:x="4957" fg:w="5"/><text x="36.2381%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="35.9881%" y="101" width="0.0363%" height="15" fill="rgb(242,102,42)" fg:x="4957" fg:w="5"/><text x="36.2381%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="35.9954%" y="85" width="0.0290%" height="15" fill="rgb(234,31,38)" fg:x="4958" fg:w="4"/><text x="36.2454%" y="95.50"></text></g><g><title>[libc.so.6] (69 samples, 0.50%)</title><rect x="35.6977%" y="213" width="0.5009%" height="15" fill="rgb(221,117,51)" fg:x="4917" fg:w="69"/><text x="35.9477%" y="223.50"></text></g><g><title>__default_morecore (24 samples, 0.17%)</title><rect x="36.0244%" y="197" width="0.1742%" height="15" fill="rgb(212,20,18)" fg:x="4962" fg:w="24"/><text x="36.2744%" y="207.50"></text></g><g><title>__sbrk (24 samples, 0.17%)</title><rect x="36.0244%" y="181" width="0.1742%" height="15" fill="rgb(245,133,36)" fg:x="4962" fg:w="24"/><text x="36.2744%" y="191.50"></text></g><g><title>brk (24 samples, 0.17%)</title><rect x="36.0244%" y="165" width="0.1742%" height="15" fill="rgb(212,6,19)" fg:x="4962" fg:w="24"/><text x="36.2744%" y="175.50"></text></g><g><title>[unknown] (24 samples, 0.17%)</title><rect x="36.0244%" y="149" width="0.1742%" height="15" fill="rgb(218,1,36)" fg:x="4962" fg:w="24"/><text x="36.2744%" y="159.50"></text></g><g><title>[unknown] (24 samples, 0.17%)</title><rect x="36.0244%" y="133" width="0.1742%" height="15" fill="rgb(246,84,54)" fg:x="4962" fg:w="24"/><text x="36.2744%" y="143.50"></text></g><g><title>[unknown] (23 samples, 0.17%)</title><rect x="36.0317%" y="117" width="0.1670%" height="15" fill="rgb(242,110,6)" fg:x="4963" fg:w="23"/><text x="36.2817%" y="127.50"></text></g><g><title>[unknown] (18 samples, 0.13%)</title><rect x="36.0680%" y="101" width="0.1307%" height="15" fill="rgb(214,47,5)" fg:x="4968" fg:w="18"/><text x="36.3180%" y="111.50"></text></g><g><title>[unknown] (14 samples, 0.10%)</title><rect x="36.0970%" y="85" width="0.1016%" height="15" fill="rgb(218,159,25)" fg:x="4972" fg:w="14"/><text x="36.3470%" y="95.50"></text></g><g><title>[unknown] (9 samples, 0.07%)</title><rect x="36.1333%" y="69" width="0.0653%" height="15" fill="rgb(215,211,28)" fg:x="4977" fg:w="9"/><text x="36.3833%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="36.1769%" y="53" width="0.0218%" height="15" fill="rgb(238,59,32)" fg:x="4983" fg:w="3"/><text x="36.4269%" y="63.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (260 samples, 1.89%)</title><rect x="34.6377%" y="293" width="1.8876%" height="15" fill="rgb(226,82,3)" fg:x="4771" fg:w="260"/><text x="34.8877%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (260 samples, 1.89%)</title><rect x="34.6377%" y="277" width="1.8876%" height="15" fill="rgb(240,164,32)" fg:x="4771" fg:w="260"/><text x="34.8877%" y="287.50">a..</text></g><g><title>alloc::alloc::alloc (259 samples, 1.88%)</title><rect x="34.6450%" y="261" width="1.8804%" height="15" fill="rgb(232,46,7)" fg:x="4772" fg:w="259"/><text x="34.8950%" y="271.50">a..</text></g><g><title>malloc (237 samples, 1.72%)</title><rect x="34.8047%" y="245" width="1.7206%" height="15" fill="rgb(229,129,53)" fg:x="4794" fg:w="237"/><text x="35.0547%" y="255.50"></text></g><g><title>[libc.so.6] (184 samples, 1.34%)</title><rect x="35.1895%" y="229" width="1.3359%" height="15" fill="rgb(234,188,29)" fg:x="4847" fg:w="184"/><text x="35.4395%" y="239.50"></text></g><g><title>[unknown] (45 samples, 0.33%)</title><rect x="36.1986%" y="213" width="0.3267%" height="15" fill="rgb(246,141,4)" fg:x="4986" fg:w="45"/><text x="36.4486%" y="223.50"></text></g><g><title>[unknown] (45 samples, 0.33%)</title><rect x="36.1986%" y="197" width="0.3267%" height="15" fill="rgb(229,23,39)" fg:x="4986" fg:w="45"/><text x="36.4486%" y="207.50"></text></g><g><title>[unknown] (45 samples, 0.33%)</title><rect x="36.1986%" y="181" width="0.3267%" height="15" fill="rgb(206,12,3)" fg:x="4986" fg:w="45"/><text x="36.4486%" y="191.50"></text></g><g><title>[unknown] (45 samples, 0.33%)</title><rect x="36.1986%" y="165" width="0.3267%" height="15" fill="rgb(252,226,20)" fg:x="4986" fg:w="45"/><text x="36.4486%" y="175.50"></text></g><g><title>[unknown] (41 samples, 0.30%)</title><rect x="36.2277%" y="149" width="0.2977%" height="15" fill="rgb(216,123,35)" fg:x="4990" fg:w="41"/><text x="36.4777%" y="159.50"></text></g><g><title>[unknown] (38 samples, 0.28%)</title><rect x="36.2495%" y="133" width="0.2759%" height="15" fill="rgb(212,68,40)" fg:x="4993" fg:w="38"/><text x="36.4995%" y="143.50"></text></g><g><title>[unknown] (31 samples, 0.23%)</title><rect x="36.3003%" y="117" width="0.2251%" height="15" fill="rgb(254,125,32)" fg:x="5000" fg:w="31"/><text x="36.5503%" y="127.50"></text></g><g><title>[unknown] (22 samples, 0.16%)</title><rect x="36.3656%" y="101" width="0.1597%" height="15" fill="rgb(253,97,22)" fg:x="5009" fg:w="22"/><text x="36.6156%" y="111.50"></text></g><g><title>[unknown] (14 samples, 0.10%)</title><rect x="36.4237%" y="85" width="0.1016%" height="15" fill="rgb(241,101,14)" fg:x="5017" fg:w="14"/><text x="36.6737%" y="95.50"></text></g><g><title>[unknown] (12 samples, 0.09%)</title><rect x="36.4382%" y="69" width="0.0871%" height="15" fill="rgb(238,103,29)" fg:x="5019" fg:w="12"/><text x="36.6882%" y="79.50"></text></g><g><title>[unknown] (11 samples, 0.08%)</title><rect x="36.4455%" y="53" width="0.0799%" height="15" fill="rgb(233,195,47)" fg:x="5020" fg:w="11"/><text x="36.6955%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (274 samples, 1.99%)</title><rect x="34.5433%" y="341" width="1.9893%" height="15" fill="rgb(246,218,30)" fg:x="4758" fg:w="274"/><text x="34.7933%" y="351.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (270 samples, 1.96%)</title><rect x="34.5724%" y="325" width="1.9602%" height="15" fill="rgb(219,145,47)" fg:x="4762" fg:w="270"/><text x="34.8224%" y="335.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (270 samples, 1.96%)</title><rect x="34.5724%" y="309" width="1.9602%" height="15" fill="rgb(243,12,26)" fg:x="4762" fg:w="270"/><text x="34.8224%" y="319.50">a..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (53 samples, 0.38%)</title><rect x="36.5326%" y="341" width="0.3848%" height="15" fill="rgb(214,87,16)" fg:x="5032" fg:w="53"/><text x="36.7826%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,009 samples, 29.11%)</title><rect x="22.6804%" y="405" width="29.1056%" height="15" fill="rgb(208,99,42)" fg:x="3124" fg:w="4009"/><text x="22.9304%" y="415.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::c..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4,000 samples, 29.04%)</title><rect x="22.7458%" y="389" width="29.0402%" height="15" fill="rgb(253,99,2)" fg:x="3133" fg:w="4000"/><text x="22.9958%" y="399.50">alloc::slice::&lt;impl [T]&gt;::to_vec_in</text></g><g><title>alloc::slice::hack::to_vec (4,000 samples, 29.04%)</title><rect x="22.7458%" y="373" width="29.0402%" height="15" fill="rgb(220,168,23)" fg:x="3133" fg:w="4000"/><text x="22.9958%" y="383.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4,000 samples, 29.04%)</title><rect x="22.7458%" y="357" width="29.0402%" height="15" fill="rgb(242,38,24)" fg:x="3133" fg:w="4000"/><text x="22.9958%" y="367.50">&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,048 samples, 14.87%)</title><rect x="36.9174%" y="341" width="14.8686%" height="15" fill="rgb(225,182,9)" fg:x="5085" fg:w="2048"/><text x="37.1674%" y="351.50">core::ptr::const_ptr::&lt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,048 samples, 14.87%)</title><rect x="36.9174%" y="325" width="14.8686%" height="15" fill="rgb(243,178,37)" fg:x="5085" fg:w="2048"/><text x="37.1674%" y="335.50">core::intrinsics::copy_..</text></g><g><title>[libc.so.6] (2,047 samples, 14.86%)</title><rect x="36.9246%" y="309" width="14.8613%" height="15" fill="rgb(232,139,19)" fg:x="5086" fg:w="2047"/><text x="37.1746%" y="319.50">[libc.so.6]</text></g><g><title>[unknown] (494 samples, 3.59%)</title><rect x="48.1995%" y="293" width="3.5865%" height="15" fill="rgb(225,201,24)" fg:x="6639" fg:w="494"/><text x="48.4495%" y="303.50">[unk..</text></g><g><title>[unknown] (493 samples, 3.58%)</title><rect x="48.2068%" y="277" width="3.5792%" height="15" fill="rgb(221,47,46)" fg:x="6640" fg:w="493"/><text x="48.4568%" y="287.50">[unk..</text></g><g><title>[unknown] (492 samples, 3.57%)</title><rect x="48.2140%" y="261" width="3.5719%" height="15" fill="rgb(249,23,13)" fg:x="6641" fg:w="492"/><text x="48.4640%" y="271.50">[unk..</text></g><g><title>[unknown] (489 samples, 3.55%)</title><rect x="48.2358%" y="245" width="3.5502%" height="15" fill="rgb(219,9,5)" fg:x="6644" fg:w="489"/><text x="48.4858%" y="255.50">[unk..</text></g><g><title>[unknown] (467 samples, 3.39%)</title><rect x="48.3955%" y="229" width="3.3904%" height="15" fill="rgb(254,171,16)" fg:x="6666" fg:w="467"/><text x="48.6455%" y="239.50">[un..</text></g><g><title>[unknown] (437 samples, 3.17%)</title><rect x="48.6133%" y="213" width="3.1726%" height="15" fill="rgb(230,171,20)" fg:x="6696" fg:w="437"/><text x="48.8633%" y="223.50">[un..</text></g><g><title>[unknown] (338 samples, 2.45%)</title><rect x="49.3321%" y="197" width="2.4539%" height="15" fill="rgb(210,71,41)" fg:x="6795" fg:w="338"/><text x="49.5821%" y="207.50">[u..</text></g><g><title>[unknown] (216 samples, 1.57%)</title><rect x="50.2178%" y="181" width="1.5682%" height="15" fill="rgb(206,173,20)" fg:x="6917" fg:w="216"/><text x="50.4678%" y="191.50"></text></g><g><title>[unknown] (90 samples, 0.65%)</title><rect x="51.1326%" y="165" width="0.6534%" height="15" fill="rgb(233,88,34)" fg:x="7043" fg:w="90"/><text x="51.3826%" y="175.50"></text></g><g><title>[unknown] (55 samples, 0.40%)</title><rect x="51.3867%" y="149" width="0.3993%" height="15" fill="rgb(223,209,46)" fg:x="7078" fg:w="55"/><text x="51.6367%" y="159.50"></text></g><g><title>[unknown] (47 samples, 0.34%)</title><rect x="51.4448%" y="133" width="0.3412%" height="15" fill="rgb(250,43,18)" fg:x="7086" fg:w="47"/><text x="51.6948%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.04%)</title><rect x="51.7860%" y="405" width="0.0363%" height="15" fill="rgb(208,13,10)" fg:x="7133" fg:w="5"/><text x="52.0360%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.04%)</title><rect x="51.7860%" y="389" width="0.0363%" height="15" fill="rgb(212,200,36)" fg:x="7133" fg:w="5"/><text x="52.0360%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.04%)</title><rect x="51.7860%" y="373" width="0.0363%" height="15" fill="rgb(225,90,30)" fg:x="7133" fg:w="5"/><text x="52.0360%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.13%)</title><rect x="51.8223%" y="405" width="0.1307%" height="15" fill="rgb(236,182,39)" fg:x="7138" fg:w="18"/><text x="52.0723%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next_back (18 samples, 0.13%)</title><rect x="51.8223%" y="389" width="0.1307%" height="15" fill="rgb(212,144,35)" fg:x="7138" fg:w="18"/><text x="52.0723%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next_back (18 samples, 0.13%)</title><rect x="51.8223%" y="373" width="0.1307%" height="15" fill="rgb(228,63,44)" fg:x="7138" fg:w="18"/><text x="52.0723%" y="383.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (13 samples, 0.09%)</title><rect x="51.8586%" y="357" width="0.0944%" height="15" fill="rgb(228,109,6)" fg:x="7143" fg:w="13"/><text x="52.1086%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="51.9530%" y="405" width="0.0145%" height="15" fill="rgb(238,117,24)" fg:x="7156" fg:w="2"/><text x="52.2030%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="51.9530%" y="389" width="0.0145%" height="15" fill="rgb(242,26,26)" fg:x="7156" fg:w="2"/><text x="52.2030%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (18 samples, 0.13%)</title><rect x="51.9893%" y="341" width="0.1307%" height="15" fill="rgb(221,92,48)" fg:x="7161" fg:w="18"/><text x="52.2393%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (18 samples, 0.13%)</title><rect x="51.9893%" y="325" width="0.1307%" height="15" fill="rgb(209,209,32)" fg:x="7161" fg:w="18"/><text x="52.2393%" y="335.50"></text></g><g><title>alloc::alloc::realloc (18 samples, 0.13%)</title><rect x="51.9893%" y="309" width="0.1307%" height="15" fill="rgb(221,70,22)" fg:x="7161" fg:w="18"/><text x="52.2393%" y="319.50"></text></g><g><title>realloc (16 samples, 0.12%)</title><rect x="52.0038%" y="293" width="0.1162%" height="15" fill="rgb(248,145,5)" fg:x="7163" fg:w="16"/><text x="52.2538%" y="303.50"></text></g><g><title>[libc.so.6] (12 samples, 0.09%)</title><rect x="52.0328%" y="277" width="0.0871%" height="15" fill="rgb(226,116,26)" fg:x="7167" fg:w="12"/><text x="52.2828%" y="287.50"></text></g><g><title>[libc.so.6] (10 samples, 0.07%)</title><rect x="52.0473%" y="261" width="0.0726%" height="15" fill="rgb(244,5,17)" fg:x="7169" fg:w="10"/><text x="52.2973%" y="271.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="52.1054%" y="245" width="0.0145%" height="15" fill="rgb(252,159,33)" fg:x="7177" fg:w="2"/><text x="52.3554%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.17%)</title><rect x="51.9675%" y="389" width="0.1670%" height="15" fill="rgb(206,71,0)" fg:x="7158" fg:w="23"/><text x="52.2175%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (23 samples, 0.17%)</title><rect x="51.9675%" y="373" width="0.1670%" height="15" fill="rgb(233,118,54)" fg:x="7158" fg:w="23"/><text x="52.2175%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.16%)</title><rect x="51.9747%" y="357" width="0.1597%" height="15" fill="rgb(234,83,48)" fg:x="7159" fg:w="22"/><text x="52.2247%" y="367.50"></text></g><g><title>malloc (2 samples, 0.01%)</title><rect x="52.1199%" y="341" width="0.0145%" height="15" fill="rgb(228,3,54)" fg:x="7179" fg:w="2"/><text x="52.3699%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (26 samples, 0.19%)</title><rect x="51.9675%" y="405" width="0.1888%" height="15" fill="rgb(226,155,13)" fg:x="7158" fg:w="26"/><text x="52.2175%" y="415.50"></text></g><g><title>core::ptr::write (2 samples, 0.01%)</title><rect x="52.1417%" y="389" width="0.0145%" height="15" fill="rgb(241,28,37)" fg:x="7182" fg:w="2"/><text x="52.3917%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.01%)</title><rect x="52.1708%" y="373" width="0.0145%" height="15" fill="rgb(233,93,10)" fg:x="7186" fg:w="2"/><text x="52.4208%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (5 samples, 0.04%)</title><rect x="52.1635%" y="405" width="0.0363%" height="15" fill="rgb(225,113,19)" fg:x="7185" fg:w="5"/><text x="52.4135%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next (5 samples, 0.04%)</title><rect x="52.1635%" y="389" width="0.0363%" height="15" fill="rgb(241,2,18)" fg:x="7185" fg:w="5"/><text x="52.4135%" y="399.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (2 samples, 0.01%)</title><rect x="52.1853%" y="373" width="0.0145%" height="15" fill="rgb(228,207,21)" fg:x="7188" fg:w="2"/><text x="52.4353%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,116 samples, 8.10%)</title><rect x="52.2579%" y="309" width="8.1022%" height="15" fill="rgb(213,211,35)" fg:x="7198" fg:w="1116"/><text x="52.5079%" y="319.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (1,116 samples, 8.10%)</title><rect x="52.2579%" y="293" width="8.1022%" height="15" fill="rgb(209,83,10)" fg:x="7198" fg:w="1116"/><text x="52.5079%" y="303.50">alloc::allo..</text></g><g><title>cfree (1,078 samples, 7.83%)</title><rect x="52.5338%" y="277" width="7.8263%" height="15" fill="rgb(209,164,1)" fg:x="7236" fg:w="1078"/><text x="52.7838%" y="287.50">cfree</text></g><g><title>[libc.so.6] (739 samples, 5.37%)</title><rect x="54.9949%" y="261" width="5.3652%" height="15" fill="rgb(213,184,43)" fg:x="7575" fg:w="739"/><text x="55.2449%" y="271.50">[libc.s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,167 samples, 8.47%)</title><rect x="52.1998%" y="389" width="8.4725%" height="15" fill="rgb(231,61,34)" fg:x="7190" fg:w="1167"/><text x="52.4498%" y="399.50">&lt;alloc::vec:..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u16&gt;]&gt; (1,167 samples, 8.47%)</title><rect x="52.1998%" y="373" width="8.4725%" height="15" fill="rgb(235,75,3)" fg:x="7190" fg:w="1167"/><text x="52.4498%" y="383.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (1,161 samples, 8.43%)</title><rect x="52.2434%" y="357" width="8.4289%" height="15" fill="rgb(220,106,47)" fg:x="7196" fg:w="1161"/><text x="52.4934%" y="367.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (1,161 samples, 8.43%)</title><rect x="52.2434%" y="341" width="8.4289%" height="15" fill="rgb(210,196,33)" fg:x="7196" fg:w="1161"/><text x="52.4934%" y="351.50">core::ptr::d..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,161 samples, 8.43%)</title><rect x="52.2434%" y="325" width="8.4289%" height="15" fill="rgb(229,154,42)" fg:x="7196" fg:w="1161"/><text x="52.4934%" y="335.50">&lt;alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (43 samples, 0.31%)</title><rect x="60.3601%" y="309" width="0.3122%" height="15" fill="rgb(228,114,26)" fg:x="8314" fg:w="43"/><text x="60.6101%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (14 samples, 0.10%)</title><rect x="60.5706%" y="293" width="0.1016%" height="15" fill="rgb(208,144,1)" fg:x="8343" fg:w="14"/><text x="60.8206%" y="303.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="60.6868%" y="325" width="0.0145%" height="15" fill="rgb(239,112,37)" fg:x="8359" fg:w="2"/><text x="60.9368%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (89 samples, 0.65%)</title><rect x="60.6723%" y="357" width="0.6461%" height="15" fill="rgb(210,96,50)" fg:x="8357" fg:w="89"/><text x="60.9223%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (89 samples, 0.65%)</title><rect x="60.6723%" y="341" width="0.6461%" height="15" fill="rgb(222,178,2)" fg:x="8357" fg:w="89"/><text x="60.9223%" y="351.50"></text></g><g><title>cfree (85 samples, 0.62%)</title><rect x="60.7013%" y="325" width="0.6171%" height="15" fill="rgb(226,74,18)" fg:x="8361" fg:w="85"/><text x="60.9513%" y="335.50"></text></g><g><title>[libc.so.6] (46 samples, 0.33%)</title><rect x="60.9845%" y="309" width="0.3340%" height="15" fill="rgb(225,67,54)" fg:x="8400" fg:w="46"/><text x="61.2345%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (1,261 samples, 9.15%)</title><rect x="52.1998%" y="405" width="9.1549%" height="15" fill="rgb(251,92,32)" fg:x="7190" fg:w="1261"/><text x="52.4498%" y="415.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (94 samples, 0.68%)</title><rect x="60.6723%" y="389" width="0.6824%" height="15" fill="rgb(228,149,22)" fg:x="8357" fg:w="94"/><text x="60.9223%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.68%)</title><rect x="60.6723%" y="373" width="0.6824%" height="15" fill="rgb(243,54,13)" fg:x="8357" fg:w="94"/><text x="60.9223%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.04%)</title><rect x="61.3184%" y="357" width="0.0363%" height="15" fill="rgb(243,180,28)" fg:x="8446" fg:w="5"/><text x="61.5684%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (3 samples, 0.02%)</title><rect x="61.3329%" y="341" width="0.0218%" height="15" fill="rgb(208,167,24)" fg:x="8448" fg:w="3"/><text x="61.5829%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (19 samples, 0.14%)</title><rect x="61.3547%" y="405" width="0.1379%" height="15" fill="rgb(245,73,45)" fg:x="8451" fg:w="19"/><text x="61.6047%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (19 samples, 0.14%)</title><rect x="61.3547%" y="389" width="0.1379%" height="15" fill="rgb(237,203,48)" fg:x="8451" fg:w="19"/><text x="61.6047%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.14%)</title><rect x="61.3547%" y="373" width="0.1379%" height="15" fill="rgb(211,197,16)" fg:x="8451" fg:w="19"/><text x="61.6047%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.14%)</title><rect x="61.3547%" y="357" width="0.1379%" height="15" fill="rgb(243,99,51)" fg:x="8451" fg:w="19"/><text x="61.6047%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.14%)</title><rect x="61.3547%" y="341" width="0.1379%" height="15" fill="rgb(215,123,29)" fg:x="8451" fg:w="19"/><text x="61.6047%" y="351.50"></text></g><g><title>cfree (19 samples, 0.14%)</title><rect x="61.3547%" y="325" width="0.1379%" height="15" fill="rgb(239,186,37)" fg:x="8451" fg:w="19"/><text x="61.6047%" y="335.50"></text></g><g><title>[libc.so.6] (19 samples, 0.14%)</title><rect x="61.3547%" y="309" width="0.1379%" height="15" fill="rgb(252,136,39)" fg:x="8451" fg:w="19"/><text x="61.6047%" y="319.50"></text></g><g><title>[libc.so.6] (15 samples, 0.11%)</title><rect x="61.3838%" y="293" width="0.1089%" height="15" fill="rgb(223,213,32)" fg:x="8455" fg:w="15"/><text x="61.6338%" y="303.50"></text></g><g><title>[libc.so.6] (14 samples, 0.10%)</title><rect x="61.3910%" y="277" width="0.1016%" height="15" fill="rgb(233,115,5)" fg:x="8456" fg:w="14"/><text x="61.6410%" y="287.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="61.4636%" y="261" width="0.0290%" height="15" fill="rgb(207,226,44)" fg:x="8466" fg:w="4"/><text x="61.7136%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.15%)</title><rect x="62.6107%" y="389" width="0.1525%" height="15" fill="rgb(208,126,0)" fg:x="8624" fg:w="21"/><text x="62.8607%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21 samples, 0.15%)</title><rect x="62.6107%" y="373" width="0.1525%" height="15" fill="rgb(244,66,21)" fg:x="8624" fg:w="21"/><text x="62.8607%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 0.15%)</title><rect x="62.6107%" y="357" width="0.1525%" height="15" fill="rgb(222,97,12)" fg:x="8624" fg:w="21"/><text x="62.8607%" y="367.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::backward_unchecked (2 samples, 0.01%)</title><rect x="62.7777%" y="341" width="0.0145%" height="15" fill="rgb(219,213,19)" fg:x="8647" fg:w="2"/><text x="63.0277%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_sub (2 samples, 0.01%)</title><rect x="62.7777%" y="325" width="0.0145%" height="15" fill="rgb(252,169,30)" fg:x="8647" fg:w="2"/><text x="63.0277%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.08%)</title><rect x="62.7632%" y="389" width="0.0799%" height="15" fill="rgb(206,32,51)" fg:x="8645" fg:w="11"/><text x="63.0132%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (11 samples, 0.08%)</title><rect x="62.7632%" y="373" width="0.0799%" height="15" fill="rgb(250,172,42)" fg:x="8645" fg:w="11"/><text x="63.0132%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (11 samples, 0.08%)</title><rect x="62.7632%" y="357" width="0.0799%" height="15" fill="rgb(209,34,43)" fg:x="8645" fg:w="11"/><text x="63.0132%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (7 samples, 0.05%)</title><rect x="62.7922%" y="341" width="0.0508%" height="15" fill="rgb(223,11,35)" fg:x="8649" fg:w="7"/><text x="63.0422%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (10 samples, 0.07%)</title><rect x="62.8430%" y="389" width="0.0726%" height="15" fill="rgb(251,219,26)" fg:x="8656" fg:w="10"/><text x="63.0930%" y="399.50"></text></g><g><title>tetrs::logic::bot::try_place (202 samples, 1.47%)</title><rect x="61.4927%" y="405" width="1.4665%" height="15" fill="rgb(231,119,3)" fg:x="8470" fg:w="202"/><text x="61.7427%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.04%)</title><rect x="62.9156%" y="389" width="0.0436%" height="15" fill="rgb(216,97,11)" fg:x="8666" fg:w="6"/><text x="63.1656%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.04%)</title><rect x="62.9156%" y="373" width="0.0436%" height="15" fill="rgb(223,59,9)" fg:x="8666" fg:w="6"/><text x="63.1656%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.01%)</title><rect x="62.9447%" y="357" width="0.0145%" height="15" fill="rgb(233,93,31)" fg:x="8670" fg:w="2"/><text x="63.1947%" y="367.50"></text></g><g><title>tetrs::logic::bot::generate_states (5,564 samples, 40.39%)</title><rect x="22.5860%" y="421" width="40.3949%" height="15" fill="rgb(239,81,33)" fg:x="3111" fg:w="5564"/><text x="22.8360%" y="431.50">tetrs::logic::bot::generate_states</text></g><g><title>tetrs::logic::id_manager::next_unique_id (3 samples, 0.02%)</title><rect x="62.9592%" y="405" width="0.0218%" height="15" fill="rgb(213,120,34)" fg:x="8672" fg:w="3"/><text x="63.2092%" y="415.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (44 samples, 0.32%)</title><rect x="63.3222%" y="373" width="0.3194%" height="15" fill="rgb(243,49,53)" fg:x="8722" fg:w="44"/><text x="63.5722%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (44 samples, 0.32%)</title><rect x="63.3222%" y="357" width="0.3194%" height="15" fill="rgb(247,216,33)" fg:x="8722" fg:w="44"/><text x="63.5722%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (59 samples, 0.43%)</title><rect x="63.3222%" y="405" width="0.4283%" height="15" fill="rgb(226,26,14)" fg:x="8722" fg:w="59"/><text x="63.5722%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (59 samples, 0.43%)</title><rect x="63.3222%" y="389" width="0.4283%" height="15" fill="rgb(215,49,53)" fg:x="8722" fg:w="59"/><text x="63.5722%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (15 samples, 0.11%)</title><rect x="63.6416%" y="373" width="0.1089%" height="15" fill="rgb(245,162,40)" fg:x="8766" fg:w="15"/><text x="63.8916%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.07%)</title><rect x="64.1426%" y="389" width="0.0653%" height="15" fill="rgb(229,68,17)" fg:x="8835" fg:w="9"/><text x="64.3926%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.07%)</title><rect x="64.2079%" y="389" width="0.0653%" height="15" fill="rgb(213,182,10)" fg:x="8844" fg:w="9"/><text x="64.4579%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.07%)</title><rect x="64.2079%" y="373" width="0.0653%" height="15" fill="rgb(245,125,30)" fg:x="8844" fg:w="9"/><text x="64.4579%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.07%)</title><rect x="64.2079%" y="357" width="0.0653%" height="15" fill="rgb(232,202,2)" fg:x="8844" fg:w="9"/><text x="64.4579%" y="367.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::backward_unchecked (2 samples, 0.01%)</title><rect x="64.2878%" y="341" width="0.0145%" height="15" fill="rgb(237,140,51)" fg:x="8855" fg:w="2"/><text x="64.5378%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_sub (2 samples, 0.01%)</title><rect x="64.2878%" y="325" width="0.0145%" height="15" fill="rgb(236,157,25)" fg:x="8855" fg:w="2"/><text x="64.5378%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.05%)</title><rect x="64.2805%" y="389" width="0.0508%" height="15" fill="rgb(219,209,0)" fg:x="8854" fg:w="7"/><text x="64.5305%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (7 samples, 0.05%)</title><rect x="64.2805%" y="373" width="0.0508%" height="15" fill="rgb(240,116,54)" fg:x="8854" fg:w="7"/><text x="64.5305%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (7 samples, 0.05%)</title><rect x="64.2805%" y="357" width="0.0508%" height="15" fill="rgb(216,10,36)" fg:x="8854" fg:w="7"/><text x="64.5305%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.03%)</title><rect x="64.3023%" y="341" width="0.0290%" height="15" fill="rgb(222,72,44)" fg:x="8857" fg:w="4"/><text x="64.5523%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (21 samples, 0.15%)</title><rect x="64.3313%" y="389" width="0.1525%" height="15" fill="rgb(232,159,9)" fg:x="8861" fg:w="21"/><text x="64.5813%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.05%)</title><rect x="64.4330%" y="373" width="0.0508%" height="15" fill="rgb(210,39,32)" fg:x="8875" fg:w="7"/><text x="64.6830%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="64.4548%" y="357" width="0.0290%" height="15" fill="rgb(216,194,45)" fg:x="8878" fg:w="4"/><text x="64.7048%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.04%)</title><rect x="64.4838%" y="389" width="0.0363%" height="15" fill="rgb(218,18,35)" fg:x="8882" fg:w="5"/><text x="64.7338%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.04%)</title><rect x="64.4838%" y="373" width="0.0363%" height="15" fill="rgb(207,83,51)" fg:x="8882" fg:w="5"/><text x="64.7338%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.03%)</title><rect x="64.4911%" y="357" width="0.0290%" height="15" fill="rgb(225,63,43)" fg:x="8883" fg:w="4"/><text x="64.7411%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (31 samples, 0.23%)</title><rect x="65.4857%" y="373" width="0.2251%" height="15" fill="rgb(207,57,36)" fg:x="9020" fg:w="31"/><text x="65.7357%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (31 samples, 0.23%)</title><rect x="65.4857%" y="357" width="0.2251%" height="15" fill="rgb(216,99,33)" fg:x="9020" fg:w="31"/><text x="65.7357%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.23%)</title><rect x="65.4857%" y="341" width="0.2251%" height="15" fill="rgb(225,42,16)" fg:x="9020" fg:w="31"/><text x="65.7357%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10 samples, 0.07%)</title><rect x="65.7108%" y="373" width="0.0726%" height="15" fill="rgb(220,201,45)" fg:x="9051" fg:w="10"/><text x="65.9608%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (10 samples, 0.07%)</title><rect x="65.7108%" y="357" width="0.0726%" height="15" fill="rgb(225,33,4)" fg:x="9051" fg:w="10"/><text x="65.9608%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (10 samples, 0.07%)</title><rect x="65.7108%" y="341" width="0.0726%" height="15" fill="rgb(224,33,50)" fg:x="9051" fg:w="10"/><text x="65.9608%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.04%)</title><rect x="65.7834%" y="373" width="0.0436%" height="15" fill="rgb(246,198,51)" fg:x="9061" fg:w="6"/><text x="66.0334%" y="383.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::backward_unchecked (7 samples, 0.05%)</title><rect x="65.8705%" y="325" width="0.0508%" height="15" fill="rgb(205,22,4)" fg:x="9073" fg:w="7"/><text x="66.1205%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_sub (7 samples, 0.05%)</title><rect x="65.8705%" y="309" width="0.0508%" height="15" fill="rgb(206,3,8)" fg:x="9073" fg:w="7"/><text x="66.1205%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.10%)</title><rect x="65.8269%" y="373" width="0.1016%" height="15" fill="rgb(251,23,15)" fg:x="9067" fg:w="14"/><text x="66.0769%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (14 samples, 0.10%)</title><rect x="65.8269%" y="357" width="0.1016%" height="15" fill="rgb(252,88,28)" fg:x="9067" fg:w="14"/><text x="66.0769%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (14 samples, 0.10%)</title><rect x="65.8269%" y="341" width="0.1016%" height="15" fill="rgb(212,127,14)" fg:x="9067" fg:w="14"/><text x="66.0769%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.07%)</title><rect x="66.0520%" y="325" width="0.0653%" height="15" fill="rgb(247,145,37)" fg:x="9098" fg:w="9"/><text x="66.3020%" y="335.50"></text></g><g><title>__rdl_realloc (4 samples, 0.03%)</title><rect x="66.1681%" y="261" width="0.0290%" height="15" fill="rgb(209,117,53)" fg:x="9114" fg:w="4"/><text x="66.4181%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.02%)</title><rect x="66.1754%" y="245" width="0.0218%" height="15" fill="rgb(212,90,42)" fg:x="9115" fg:w="3"/><text x="66.4254%" y="255.50"></text></g><g><title>__rust_realloc (3 samples, 0.02%)</title><rect x="66.1972%" y="261" width="0.0218%" height="15" fill="rgb(218,164,37)" fg:x="9118" fg:w="3"/><text x="66.4472%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (150 samples, 1.09%)</title><rect x="66.1609%" y="309" width="1.0890%" height="15" fill="rgb(246,65,34)" fg:x="9113" fg:w="150"/><text x="66.4109%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (150 samples, 1.09%)</title><rect x="66.1609%" y="293" width="1.0890%" height="15" fill="rgb(231,100,33)" fg:x="9113" fg:w="150"/><text x="66.4109%" y="303.50"></text></g><g><title>alloc::alloc::realloc (149 samples, 1.08%)</title><rect x="66.1681%" y="277" width="1.0817%" height="15" fill="rgb(228,126,14)" fg:x="9114" fg:w="149"/><text x="66.4181%" y="287.50"></text></g><g><title>realloc (142 samples, 1.03%)</title><rect x="66.2190%" y="261" width="1.0309%" height="15" fill="rgb(215,173,21)" fg:x="9121" fg:w="142"/><text x="66.4690%" y="271.50"></text></g><g><title>[libc.so.6] (114 samples, 0.83%)</title><rect x="66.4222%" y="245" width="0.8276%" height="15" fill="rgb(210,6,40)" fg:x="9149" fg:w="114"/><text x="66.6722%" y="255.50"></text></g><g><title>[libc.so.6] (97 samples, 0.70%)</title><rect x="66.5457%" y="229" width="0.7042%" height="15" fill="rgb(212,48,18)" fg:x="9166" fg:w="97"/><text x="66.7957%" y="239.50"></text></g><g><title>[libc.so.6] (15 samples, 0.11%)</title><rect x="67.1410%" y="213" width="0.1089%" height="15" fill="rgb(230,214,11)" fg:x="9248" fg:w="15"/><text x="67.3910%" y="223.50"></text></g><g><title>__rust_alloc (2 samples, 0.01%)</title><rect x="67.2499%" y="309" width="0.0145%" height="15" fill="rgb(254,105,39)" fg:x="9263" fg:w="2"/><text x="67.4999%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="67.2644%" y="309" width="0.0145%" height="15" fill="rgb(245,158,5)" fg:x="9265" fg:w="2"/><text x="67.5144%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (171 samples, 1.24%)</title><rect x="66.1246%" y="325" width="1.2415%" height="15" fill="rgb(249,208,11)" fg:x="9108" fg:w="171"/><text x="66.3746%" y="335.50"></text></g><g><title>malloc (12 samples, 0.09%)</title><rect x="67.2789%" y="309" width="0.0871%" height="15" fill="rgb(210,39,28)" fg:x="9267" fg:w="12"/><text x="67.5289%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.01%)</title><rect x="67.3661%" y="325" width="0.0145%" height="15" fill="rgb(211,56,53)" fg:x="9279" fg:w="2"/><text x="67.6161%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.01%)</title><rect x="67.3661%" y="309" width="0.0145%" height="15" fill="rgb(226,201,30)" fg:x="9279" fg:w="2"/><text x="67.6161%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (189 samples, 1.37%)</title><rect x="66.0229%" y="357" width="1.3722%" height="15" fill="rgb(239,101,34)" fg:x="9094" fg:w="189"/><text x="66.2729%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (189 samples, 1.37%)</title><rect x="66.0229%" y="341" width="1.3722%" height="15" fill="rgb(226,209,5)" fg:x="9094" fg:w="189"/><text x="66.2729%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11 samples, 0.08%)</title><rect x="67.3951%" y="357" width="0.0799%" height="15" fill="rgb(250,105,47)" fg:x="9283" fg:w="11"/><text x="67.6451%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (218 samples, 1.58%)</title><rect x="65.9358%" y="373" width="1.5827%" height="15" fill="rgb(230,72,3)" fg:x="9082" fg:w="218"/><text x="66.1858%" y="383.50"></text></g><g><title>core::ptr::write (6 samples, 0.04%)</title><rect x="67.4750%" y="357" width="0.0436%" height="15" fill="rgb(232,218,39)" fg:x="9294" fg:w="6"/><text x="67.7250%" y="367.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="67.5258%" y="245" width="0.0145%" height="15" fill="rgb(248,166,6)" fg:x="9301" fg:w="2"/><text x="67.7758%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39 samples, 0.28%)</title><rect x="67.5258%" y="277" width="0.2831%" height="15" fill="rgb(247,89,20)" fg:x="9301" fg:w="39"/><text x="67.7758%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (39 samples, 0.28%)</title><rect x="67.5258%" y="261" width="0.2831%" height="15" fill="rgb(248,130,54)" fg:x="9301" fg:w="39"/><text x="67.7758%" y="271.50"></text></g><g><title>cfree (37 samples, 0.27%)</title><rect x="67.5403%" y="245" width="0.2686%" height="15" fill="rgb(234,196,4)" fg:x="9303" fg:w="37"/><text x="67.7903%" y="255.50"></text></g><g><title>[libc.so.6] (33 samples, 0.24%)</title><rect x="67.5693%" y="229" width="0.2396%" height="15" fill="rgb(250,143,31)" fg:x="9307" fg:w="33"/><text x="67.8193%" y="239.50"></text></g><g><title>[libc.so.6] (18 samples, 0.13%)</title><rect x="67.6782%" y="213" width="0.1307%" height="15" fill="rgb(211,110,34)" fg:x="9322" fg:w="18"/><text x="67.9282%" y="223.50"></text></g><g><title>[libc.so.6] (12 samples, 0.09%)</title><rect x="67.7218%" y="197" width="0.0871%" height="15" fill="rgb(215,124,48)" fg:x="9328" fg:w="12"/><text x="67.9718%" y="207.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="67.7799%" y="181" width="0.0290%" height="15" fill="rgb(216,46,13)" fg:x="9336" fg:w="4"/><text x="68.0299%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(usize,usize)&gt;&gt; (41 samples, 0.30%)</title><rect x="67.5258%" y="373" width="0.2977%" height="15" fill="rgb(205,184,25)" fg:x="9301" fg:w="41"/><text x="67.7758%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.30%)</title><rect x="67.5258%" y="357" width="0.2977%" height="15" fill="rgb(228,1,10)" fg:x="9301" fg:w="41"/><text x="67.7758%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(usize,usize),alloc::alloc::Global&gt;&gt; (41 samples, 0.30%)</title><rect x="67.5258%" y="341" width="0.2977%" height="15" fill="rgb(213,116,27)" fg:x="9301" fg:w="41"/><text x="67.7758%" y="351.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.30%)</title><rect x="67.5258%" y="325" width="0.2977%" height="15" fill="rgb(241,95,50)" fg:x="9301" fg:w="41"/><text x="67.7758%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (41 samples, 0.30%)</title><rect x="67.5258%" y="309" width="0.2977%" height="15" fill="rgb(238,48,32)" fg:x="9301" fg:w="41"/><text x="67.7758%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.30%)</title><rect x="67.5258%" y="293" width="0.2977%" height="15" fill="rgb(235,113,49)" fg:x="9301" fg:w="41"/><text x="67.7758%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="67.8089%" y="277" width="0.0145%" height="15" fill="rgb(205,127,43)" fg:x="9340" fg:w="2"/><text x="68.0589%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16&gt;&gt; (17 samples, 0.12%)</title><rect x="67.8234%" y="373" width="0.1234%" height="15" fill="rgb(250,162,2)" fg:x="9342" fg:w="17"/><text x="68.0734%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,std::collections::hash::map::RandomState&gt;&gt; (17 samples, 0.12%)</title><rect x="67.8234%" y="357" width="0.1234%" height="15" fill="rgb(220,13,41)" fg:x="9342" fg:w="17"/><text x="68.0734%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),std::collections::hash::map::RandomState&gt;&gt; (17 samples, 0.12%)</title><rect x="67.8234%" y="341" width="0.1234%" height="15" fill="rgb(249,221,25)" fg:x="9342" fg:w="17"/><text x="68.0734%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (17 samples, 0.12%)</title><rect x="67.8234%" y="325" width="0.1234%" height="15" fill="rgb(215,208,19)" fg:x="9342" fg:w="17"/><text x="68.0734%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.12%)</title><rect x="67.8234%" y="309" width="0.1234%" height="15" fill="rgb(236,175,2)" fg:x="9342" fg:w="17"/><text x="68.0734%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (16 samples, 0.12%)</title><rect x="67.8307%" y="293" width="0.1162%" height="15" fill="rgb(241,52,2)" fg:x="9343" fg:w="16"/><text x="68.0807%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (16 samples, 0.12%)</title><rect x="67.8307%" y="277" width="0.1162%" height="15" fill="rgb(248,140,14)" fg:x="9343" fg:w="16"/><text x="68.0807%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.12%)</title><rect x="67.8307%" y="261" width="0.1162%" height="15" fill="rgb(253,22,42)" fg:x="9343" fg:w="16"/><text x="68.0807%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.11%)</title><rect x="67.8380%" y="245" width="0.1089%" height="15" fill="rgb(234,61,47)" fg:x="9344" fg:w="15"/><text x="68.0880%" y="255.50"></text></g><g><title>cfree (13 samples, 0.09%)</title><rect x="67.8525%" y="229" width="0.0944%" height="15" fill="rgb(208,226,15)" fg:x="9346" fg:w="13"/><text x="68.1025%" y="239.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="67.9033%" y="213" width="0.0436%" height="15" fill="rgb(217,221,4)" fg:x="9353" fg:w="6"/><text x="68.1533%" y="223.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::clear (3 samples, 0.02%)</title><rect x="67.9469%" y="373" width="0.0218%" height="15" fill="rgb(212,174,34)" fg:x="9359" fg:w="3"/><text x="68.1969%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::clear (3 samples, 0.02%)</title><rect x="67.9469%" y="357" width="0.0218%" height="15" fill="rgb(253,83,4)" fg:x="9359" fg:w="3"/><text x="68.1969%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::clear (3 samples, 0.02%)</title><rect x="67.9469%" y="341" width="0.0218%" height="15" fill="rgb(250,195,49)" fg:x="9359" fg:w="3"/><text x="68.1969%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear (3 samples, 0.02%)</title><rect x="67.9469%" y="325" width="0.0218%" height="15" fill="rgb(241,192,25)" fg:x="9359" fg:w="3"/><text x="68.1969%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (43 samples, 0.31%)</title><rect x="70.0015%" y="213" width="0.3122%" height="15" fill="rgb(208,124,10)" fg:x="9642" fg:w="43"/><text x="70.2515%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (94 samples, 0.68%)</title><rect x="69.7837%" y="229" width="0.6824%" height="15" fill="rgb(222,33,0)" fg:x="9612" fg:w="94"/><text x="70.0337%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (21 samples, 0.15%)</title><rect x="70.3136%" y="213" width="0.1525%" height="15" fill="rgb(234,209,28)" fg:x="9685" fg:w="21"/><text x="70.5636%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (186 samples, 1.35%)</title><rect x="70.8436%" y="213" width="1.3504%" height="15" fill="rgb(224,11,23)" fg:x="9758" fg:w="186"/><text x="71.0936%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (523 samples, 3.80%)</title><rect x="68.6656%" y="277" width="3.7970%" height="15" fill="rgb(232,99,1)" fg:x="9458" fg:w="523"/><text x="68.9156%" y="287.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (523 samples, 3.80%)</title><rect x="68.6656%" y="261" width="3.7970%" height="15" fill="rgb(237,95,45)" fg:x="9458" fg:w="523"/><text x="68.9156%" y="271.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (523 samples, 3.80%)</title><rect x="68.6656%" y="245" width="3.7970%" height="15" fill="rgb(208,109,11)" fg:x="9458" fg:w="523"/><text x="68.9156%" y="255.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (275 samples, 2.00%)</title><rect x="70.4661%" y="229" width="1.9965%" height="15" fill="rgb(216,190,48)" fg:x="9706" fg:w="275"/><text x="70.7161%" y="239.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (37 samples, 0.27%)</title><rect x="72.1940%" y="213" width="0.2686%" height="15" fill="rgb(251,171,36)" fg:x="9944" fg:w="37"/><text x="72.4440%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (33 samples, 0.24%)</title><rect x="72.4626%" y="277" width="0.2396%" height="15" fill="rgb(230,62,22)" fg:x="9981" fg:w="33"/><text x="72.7126%" y="287.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (21 samples, 0.15%)</title><rect x="72.5497%" y="261" width="0.1525%" height="15" fill="rgb(225,114,35)" fg:x="9993" fg:w="21"/><text x="72.7997%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (21 samples, 0.15%)</title><rect x="72.5497%" y="245" width="0.1525%" height="15" fill="rgb(215,118,42)" fg:x="9993" fg:w="21"/><text x="72.7997%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (21 samples, 0.15%)</title><rect x="72.5497%" y="229" width="0.1525%" height="15" fill="rgb(243,119,21)" fg:x="9993" fg:w="21"/><text x="72.7997%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (107 samples, 0.78%)</title><rect x="72.7675%" y="229" width="0.7768%" height="15" fill="rgb(252,177,53)" fg:x="10023" fg:w="107"/><text x="73.0175%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (103 samples, 0.75%)</title><rect x="72.7966%" y="213" width="0.7478%" height="15" fill="rgb(237,209,29)" fg:x="10027" fg:w="103"/><text x="73.0466%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (103 samples, 0.75%)</title><rect x="72.7966%" y="197" width="0.7478%" height="15" fill="rgb(212,65,23)" fg:x="10027" fg:w="103"/><text x="73.0466%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (57 samples, 0.41%)</title><rect x="73.1305%" y="181" width="0.4138%" height="15" fill="rgb(230,222,46)" fg:x="10073" fg:w="57"/><text x="73.3805%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.04%)</title><rect x="73.5008%" y="165" width="0.0436%" height="15" fill="rgb(215,135,32)" fg:x="10124" fg:w="6"/><text x="73.7508%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (738 samples, 5.36%)</title><rect x="68.2881%" y="309" width="5.3579%" height="15" fill="rgb(246,101,22)" fg:x="9406" fg:w="738"/><text x="68.5381%" y="319.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (724 samples, 5.26%)</title><rect x="68.3897%" y="293" width="5.2563%" height="15" fill="rgb(206,107,13)" fg:x="9420" fg:w="724"/><text x="68.6397%" y="303.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (130 samples, 0.94%)</title><rect x="72.7022%" y="277" width="0.9438%" height="15" fill="rgb(250,100,44)" fg:x="10014" fg:w="130"/><text x="72.9522%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (127 samples, 0.92%)</title><rect x="72.7240%" y="261" width="0.9220%" height="15" fill="rgb(231,147,38)" fg:x="10017" fg:w="127"/><text x="72.9740%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u16 (127 samples, 0.92%)</title><rect x="72.7240%" y="245" width="0.9220%" height="15" fill="rgb(229,8,40)" fg:x="10017" fg:w="127"/><text x="72.9740%" y="255.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (14 samples, 0.10%)</title><rect x="73.5444%" y="229" width="0.1016%" height="15" fill="rgb(221,135,30)" fg:x="10130" fg:w="14"/><text x="73.7944%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.01%)</title><rect x="74.9746%" y="245" width="0.0145%" height="15" fill="rgb(249,193,18)" fg:x="10327" fg:w="2"/><text x="75.2246%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 0.84%)</title><rect x="74.2849%" y="261" width="0.8422%" height="15" fill="rgb(209,133,39)" fg:x="10232" fg:w="116"/><text x="74.5349%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (19 samples, 0.14%)</title><rect x="74.9891%" y="245" width="0.1379%" height="15" fill="rgb(232,100,14)" fg:x="10329" fg:w="19"/><text x="75.2391%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (21 samples, 0.15%)</title><rect x="75.1271%" y="261" width="0.1525%" height="15" fill="rgb(224,185,1)" fg:x="10348" fg:w="21"/><text x="75.3771%" y="271.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (21 samples, 0.15%)</title><rect x="75.1271%" y="245" width="0.1525%" height="15" fill="rgb(223,139,8)" fg:x="10348" fg:w="21"/><text x="75.3771%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (21 samples, 0.15%)</title><rect x="75.1271%" y="229" width="0.1525%" height="15" fill="rgb(232,213,38)" fg:x="10348" fg:w="21"/><text x="75.3771%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (21 samples, 0.15%)</title><rect x="75.1271%" y="213" width="0.1525%" height="15" fill="rgb(207,94,22)" fg:x="10348" fg:w="21"/><text x="75.3771%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (145 samples, 1.05%)</title><rect x="75.2795%" y="261" width="1.0527%" height="15" fill="rgb(219,183,54)" fg:x="10369" fg:w="145"/><text x="75.5295%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (49 samples, 0.36%)</title><rect x="76.3322%" y="261" width="0.3557%" height="15" fill="rgb(216,185,54)" fg:x="10514" fg:w="49"/><text x="76.5822%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (49 samples, 0.36%)</title><rect x="76.3322%" y="245" width="0.3557%" height="15" fill="rgb(254,217,39)" fg:x="10514" fg:w="49"/><text x="76.5822%" y="255.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1,221 samples, 8.86%)</title><rect x="67.9686%" y="373" width="8.8645%" height="15" fill="rgb(240,178,23)" fg:x="9362" fg:w="1221"/><text x="68.2186%" y="383.50">std::collecti..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1,221 samples, 8.86%)</title><rect x="67.9686%" y="357" width="8.8645%" height="15" fill="rgb(218,11,47)" fg:x="9362" fg:w="1221"/><text x="68.2186%" y="367.50">hashbrown::se..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,221 samples, 8.86%)</title><rect x="67.9686%" y="341" width="8.8645%" height="15" fill="rgb(218,51,51)" fg:x="9362" fg:w="1221"/><text x="68.2186%" y="351.50">hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,221 samples, 8.86%)</title><rect x="67.9686%" y="325" width="8.8645%" height="15" fill="rgb(238,126,27)" fg:x="9362" fg:w="1221"/><text x="68.2186%" y="335.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (439 samples, 3.19%)</title><rect x="73.6460%" y="309" width="3.1872%" height="15" fill="rgb(249,202,22)" fg:x="10144" fg:w="439"/><text x="73.8960%" y="319.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (439 samples, 3.19%)</title><rect x="73.6460%" y="293" width="3.1872%" height="15" fill="rgb(254,195,49)" fg:x="10144" fg:w="439"/><text x="73.8960%" y="303.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (439 samples, 3.19%)</title><rect x="73.6460%" y="277" width="3.1872%" height="15" fill="rgb(208,123,14)" fg:x="10144" fg:w="439"/><text x="73.8960%" y="287.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (20 samples, 0.15%)</title><rect x="76.6880%" y="261" width="0.1452%" height="15" fill="rgb(224,200,8)" fg:x="10563" fg:w="20"/><text x="76.9380%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (20 samples, 0.15%)</title><rect x="76.6880%" y="245" width="0.1452%" height="15" fill="rgb(217,61,36)" fg:x="10563" fg:w="20"/><text x="76.9380%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.15%)</title><rect x="76.6880%" y="229" width="0.1452%" height="15" fill="rgb(206,35,45)" fg:x="10563" fg:w="20"/><text x="76.9380%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.09%)</title><rect x="77.3341%" y="229" width="0.0871%" height="15" fill="rgb(217,65,33)" fg:x="10652" fg:w="12"/><text x="77.5841%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (26 samples, 0.19%)</title><rect x="77.2833%" y="245" width="0.1888%" height="15" fill="rgb(222,158,48)" fg:x="10645" fg:w="26"/><text x="77.5333%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.05%)</title><rect x="77.4212%" y="229" width="0.0508%" height="15" fill="rgb(254,2,54)" fg:x="10664" fg:w="7"/><text x="77.6712%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (61 samples, 0.44%)</title><rect x="77.5882%" y="229" width="0.4429%" height="15" fill="rgb(250,143,38)" fg:x="10687" fg:w="61"/><text x="77.8382%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (147 samples, 1.07%)</title><rect x="77.0292%" y="293" width="1.0672%" height="15" fill="rgb(248,25,0)" fg:x="10610" fg:w="147"/><text x="77.2792%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (147 samples, 1.07%)</title><rect x="77.0292%" y="277" width="1.0672%" height="15" fill="rgb(206,152,27)" fg:x="10610" fg:w="147"/><text x="77.2792%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (147 samples, 1.07%)</title><rect x="77.0292%" y="261" width="1.0672%" height="15" fill="rgb(240,77,30)" fg:x="10610" fg:w="147"/><text x="77.2792%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (86 samples, 0.62%)</title><rect x="77.4720%" y="245" width="0.6244%" height="15" fill="rgb(231,5,3)" fg:x="10671" fg:w="86"/><text x="77.7220%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (9 samples, 0.07%)</title><rect x="78.0311%" y="229" width="0.0653%" height="15" fill="rgb(207,226,32)" fg:x="10748" fg:w="9"/><text x="78.2811%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (11 samples, 0.08%)</title><rect x="78.0964%" y="293" width="0.0799%" height="15" fill="rgb(222,207,47)" fg:x="10757" fg:w="11"/><text x="78.3464%" y="303.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (9 samples, 0.07%)</title><rect x="78.1109%" y="277" width="0.0653%" height="15" fill="rgb(229,115,45)" fg:x="10759" fg:w="9"/><text x="78.3609%" y="287.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (9 samples, 0.07%)</title><rect x="78.1109%" y="261" width="0.0653%" height="15" fill="rgb(224,191,6)" fg:x="10759" fg:w="9"/><text x="78.3609%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9 samples, 0.07%)</title><rect x="78.1109%" y="245" width="0.0653%" height="15" fill="rgb(230,227,24)" fg:x="10759" fg:w="9"/><text x="78.3609%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.17%)</title><rect x="78.2053%" y="245" width="0.1670%" height="15" fill="rgb(228,80,19)" fg:x="10772" fg:w="23"/><text x="78.4553%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20 samples, 0.15%)</title><rect x="78.2271%" y="229" width="0.1452%" height="15" fill="rgb(247,229,0)" fg:x="10775" fg:w="20"/><text x="78.4771%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.15%)</title><rect x="78.2271%" y="213" width="0.1452%" height="15" fill="rgb(237,194,15)" fg:x="10775" fg:w="20"/><text x="78.4771%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (8 samples, 0.06%)</title><rect x="78.3142%" y="197" width="0.0581%" height="15" fill="rgb(219,203,20)" fg:x="10787" fg:w="8"/><text x="78.5642%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (203 samples, 1.47%)</title><rect x="76.9421%" y="325" width="1.4738%" height="15" fill="rgb(234,128,8)" fg:x="10598" fg:w="203"/><text x="77.1921%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (200 samples, 1.45%)</title><rect x="76.9638%" y="309" width="1.4520%" height="15" fill="rgb(248,202,8)" fg:x="10601" fg:w="200"/><text x="77.2138%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (33 samples, 0.24%)</title><rect x="78.1763%" y="293" width="0.2396%" height="15" fill="rgb(206,104,37)" fg:x="10768" fg:w="33"/><text x="78.4263%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (33 samples, 0.24%)</title><rect x="78.1763%" y="277" width="0.2396%" height="15" fill="rgb(223,8,27)" fg:x="10768" fg:w="33"/><text x="78.4263%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u16 (33 samples, 0.24%)</title><rect x="78.1763%" y="261" width="0.2396%" height="15" fill="rgb(216,217,28)" fg:x="10768" fg:w="33"/><text x="78.4263%" y="271.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (6 samples, 0.04%)</title><rect x="78.3723%" y="245" width="0.0436%" height="15" fill="rgb(249,199,1)" fg:x="10795" fg:w="6"/><text x="78.6223%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="78.5683%" y="245" width="0.0145%" height="15" fill="rgb(240,85,17)" fg:x="10822" fg:w="2"/><text x="78.8183%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.03%)</title><rect x="78.5828%" y="245" width="0.0290%" height="15" fill="rgb(206,108,45)" fg:x="10824" fg:w="4"/><text x="78.8328%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.03%)</title><rect x="78.5828%" y="229" width="0.0290%" height="15" fill="rgb(245,210,41)" fg:x="10824" fg:w="4"/><text x="78.8328%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.01%)</title><rect x="78.5974%" y="213" width="0.0145%" height="15" fill="rgb(206,13,37)" fg:x="10826" fg:w="2"/><text x="78.8474%" y="223.50"></text></g><g><title>core::mem::swap (3 samples, 0.02%)</title><rect x="78.6119%" y="245" width="0.0218%" height="15" fill="rgb(250,61,18)" fg:x="10828" fg:w="3"/><text x="78.8619%" y="255.50"></text></g><g><title>core::mem::swap_simple (3 samples, 0.02%)</title><rect x="78.6119%" y="229" width="0.0218%" height="15" fill="rgb(235,172,48)" fg:x="10828" fg:w="3"/><text x="78.8619%" y="239.50"></text></g><g><title>core::ptr::read (3 samples, 0.02%)</title><rect x="78.6119%" y="213" width="0.0218%" height="15" fill="rgb(249,201,17)" fg:x="10828" fg:w="3"/><text x="78.8619%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.07%)</title><rect x="78.6409%" y="181" width="0.0653%" height="15" fill="rgb(219,208,6)" fg:x="10832" fg:w="9"/><text x="78.8909%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.07%)</title><rect x="78.6409%" y="165" width="0.0653%" height="15" fill="rgb(248,31,23)" fg:x="10832" fg:w="9"/><text x="78.8909%" y="175.50"></text></g><g><title>cfree (7 samples, 0.05%)</title><rect x="78.6554%" y="149" width="0.0508%" height="15" fill="rgb(245,15,42)" fg:x="10834" fg:w="7"/><text x="78.9054%" y="159.50"></text></g><g><title>[libc.so.6] (6 samples, 0.04%)</title><rect x="78.6627%" y="133" width="0.0436%" height="15" fill="rgb(222,217,39)" fg:x="10835" fg:w="6"/><text x="78.9127%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (11 samples, 0.08%)</title><rect x="78.6337%" y="245" width="0.0799%" height="15" fill="rgb(210,219,27)" fg:x="10831" fg:w="11"/><text x="78.8837%" y="255.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.08%)</title><rect x="78.6337%" y="229" width="0.0799%" height="15" fill="rgb(252,166,36)" fg:x="10831" fg:w="11"/><text x="78.8837%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::_{{closure}} (11 samples, 0.08%)</title><rect x="78.6337%" y="213" width="0.0799%" height="15" fill="rgb(245,132,34)" fg:x="10831" fg:w="11"/><text x="78.8837%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (10 samples, 0.07%)</title><rect x="78.6409%" y="197" width="0.0726%" height="15" fill="rgb(236,54,3)" fg:x="10832" fg:w="10"/><text x="78.8909%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.03%)</title><rect x="79.0112%" y="117" width="0.0290%" height="15" fill="rgb(241,173,43)" fg:x="10883" fg:w="4"/><text x="79.2612%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.09%)</title><rect x="78.9894%" y="133" width="0.0871%" height="15" fill="rgb(215,190,9)" fg:x="10880" fg:w="12"/><text x="79.2394%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.04%)</title><rect x="79.0402%" y="117" width="0.0363%" height="15" fill="rgb(242,101,16)" fg:x="10887" fg:w="5"/><text x="79.2902%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (29 samples, 0.21%)</title><rect x="79.0983%" y="117" width="0.2105%" height="15" fill="rgb(223,190,21)" fg:x="10895" fg:w="29"/><text x="79.3483%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (74 samples, 0.54%)</title><rect x="78.7934%" y="181" width="0.5372%" height="15" fill="rgb(215,228,25)" fg:x="10853" fg:w="74"/><text x="79.0434%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (74 samples, 0.54%)</title><rect x="78.7934%" y="165" width="0.5372%" height="15" fill="rgb(225,36,22)" fg:x="10853" fg:w="74"/><text x="79.0434%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (74 samples, 0.54%)</title><rect x="78.7934%" y="149" width="0.5372%" height="15" fill="rgb(251,106,46)" fg:x="10853" fg:w="74"/><text x="79.0434%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (35 samples, 0.25%)</title><rect x="79.0765%" y="133" width="0.2541%" height="15" fill="rgb(208,90,1)" fg:x="10892" fg:w="35"/><text x="79.3265%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.02%)</title><rect x="79.3088%" y="117" width="0.0218%" height="15" fill="rgb(243,10,4)" fg:x="10924" fg:w="3"/><text x="79.5588%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.04%)</title><rect x="79.3306%" y="181" width="0.0363%" height="15" fill="rgb(212,137,27)" fg:x="10927" fg:w="5"/><text x="79.5806%" y="191.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.02%)</title><rect x="79.3451%" y="165" width="0.0218%" height="15" fill="rgb(231,220,49)" fg:x="10929" fg:w="3"/><text x="79.5951%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.02%)</title><rect x="79.3451%" y="149" width="0.0218%" height="15" fill="rgb(237,96,20)" fg:x="10929" fg:w="3"/><text x="79.5951%" y="159.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.02%)</title><rect x="79.3451%" y="133" width="0.0218%" height="15" fill="rgb(239,229,30)" fg:x="10929" fg:w="3"/><text x="79.5951%" y="143.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (106 samples, 0.77%)</title><rect x="78.7135%" y="229" width="0.7696%" height="15" fill="rgb(219,65,33)" fg:x="10842" fg:w="106"/><text x="78.9635%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (106 samples, 0.77%)</title><rect x="78.7135%" y="213" width="0.7696%" height="15" fill="rgb(243,134,7)" fg:x="10842" fg:w="106"/><text x="78.9635%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (105 samples, 0.76%)</title><rect x="78.7208%" y="197" width="0.7623%" height="15" fill="rgb(216,177,54)" fg:x="10843" fg:w="105"/><text x="78.9708%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (16 samples, 0.12%)</title><rect x="79.3669%" y="181" width="0.1162%" height="15" fill="rgb(211,160,20)" fg:x="10932" fg:w="16"/><text x="79.6169%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (16 samples, 0.12%)</title><rect x="79.3669%" y="165" width="0.1162%" height="15" fill="rgb(239,85,39)" fg:x="10932" fg:w="16"/><text x="79.6169%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u16 (16 samples, 0.12%)</title><rect x="79.3669%" y="149" width="0.1162%" height="15" fill="rgb(232,125,22)" fg:x="10932" fg:w="16"/><text x="79.6169%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.10%)</title><rect x="79.3814%" y="133" width="0.1016%" height="15" fill="rgb(244,57,34)" fg:x="10934" fg:w="14"/><text x="79.6314%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.09%)</title><rect x="79.3887%" y="117" width="0.0944%" height="15" fill="rgb(214,203,32)" fg:x="10935" fg:w="13"/><text x="79.6387%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.09%)</title><rect x="79.3887%" y="101" width="0.0944%" height="15" fill="rgb(207,58,43)" fg:x="10935" fg:w="13"/><text x="79.6387%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (10 samples, 0.07%)</title><rect x="79.4105%" y="85" width="0.0726%" height="15" fill="rgb(215,193,15)" fg:x="10938" fg:w="10"/><text x="79.6605%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (108 samples, 0.78%)</title><rect x="78.7135%" y="245" width="0.7841%" height="15" fill="rgb(232,15,44)" fg:x="10842" fg:w="108"/><text x="78.9635%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="79.4831%" y="229" width="0.0145%" height="15" fill="rgb(212,3,48)" fg:x="10948" fg:w="2"/><text x="79.7331%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.01%)</title><rect x="79.4831%" y="213" width="0.0145%" height="15" fill="rgb(218,128,7)" fg:x="10948" fg:w="2"/><text x="79.7331%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="79.4831%" y="197" width="0.0145%" height="15" fill="rgb(226,216,39)" fg:x="10948" fg:w="2"/><text x="79.7331%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.01%)</title><rect x="79.4831%" y="181" width="0.0145%" height="15" fill="rgb(243,47,51)" fg:x="10948" fg:w="2"/><text x="79.7331%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (22 samples, 0.16%)</title><rect x="79.5484%" y="197" width="0.1597%" height="15" fill="rgb(241,183,40)" fg:x="10957" fg:w="22"/><text x="79.7984%" y="207.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (22 samples, 0.16%)</title><rect x="79.5484%" y="181" width="0.1597%" height="15" fill="rgb(231,217,32)" fg:x="10957" fg:w="22"/><text x="79.7984%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (51 samples, 0.37%)</title><rect x="79.4976%" y="213" width="0.3703%" height="15" fill="rgb(229,61,38)" fg:x="10950" fg:w="51"/><text x="79.7476%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (22 samples, 0.16%)</title><rect x="79.7081%" y="197" width="0.1597%" height="15" fill="rgb(225,210,5)" fg:x="10979" fg:w="22"/><text x="79.9581%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.16%)</title><rect x="79.7081%" y="181" width="0.1597%" height="15" fill="rgb(231,79,45)" fg:x="10979" fg:w="22"/><text x="79.9581%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (25 samples, 0.18%)</title><rect x="79.8679%" y="213" width="0.1815%" height="15" fill="rgb(224,100,7)" fg:x="11001" fg:w="25"/><text x="80.1179%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (3 samples, 0.02%)</title><rect x="80.0276%" y="197" width="0.0218%" height="15" fill="rgb(241,198,18)" fg:x="11023" fg:w="3"/><text x="80.2776%" y="207.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.02%)</title><rect x="80.0276%" y="181" width="0.0218%" height="15" fill="rgb(252,97,53)" fg:x="11023" fg:w="3"/><text x="80.2776%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (80 samples, 0.58%)</title><rect x="79.4976%" y="229" width="0.5808%" height="15" fill="rgb(220,88,7)" fg:x="10950" fg:w="80"/><text x="79.7476%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.03%)</title><rect x="80.0494%" y="213" width="0.0290%" height="15" fill="rgb(213,176,14)" fg:x="11026" fg:w="4"/><text x="80.2994%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.03%)</title><rect x="80.0494%" y="197" width="0.0290%" height="15" fill="rgb(246,73,7)" fg:x="11026" fg:w="4"/><text x="80.2994%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="80.0494%" y="181" width="0.0290%" height="15" fill="rgb(245,64,36)" fg:x="11026" fg:w="4"/><text x="80.2994%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (82 samples, 0.60%)</title><rect x="79.4976%" y="245" width="0.5953%" height="15" fill="rgb(245,80,10)" fg:x="10950" fg:w="82"/><text x="79.7476%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (2 samples, 0.01%)</title><rect x="80.0784%" y="229" width="0.0145%" height="15" fill="rgb(232,107,50)" fg:x="11030" fg:w="2"/><text x="80.3284%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.01%)</title><rect x="80.0784%" y="213" width="0.0145%" height="15" fill="rgb(253,3,0)" fg:x="11030" fg:w="2"/><text x="80.3284%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (8 samples, 0.06%)</title><rect x="80.0929%" y="213" width="0.0581%" height="15" fill="rgb(212,99,53)" fg:x="11032" fg:w="8"/><text x="80.3429%" y="223.50"></text></g><g><title>core::intrinsics::write_bytes (8 samples, 0.06%)</title><rect x="80.0929%" y="197" width="0.0581%" height="15" fill="rgb(249,111,54)" fg:x="11032" fg:w="8"/><text x="80.3429%" y="207.50"></text></g><g><title>[libc.so.6] (8 samples, 0.06%)</title><rect x="80.0929%" y="181" width="0.0581%" height="15" fill="rgb(249,55,30)" fg:x="11032" fg:w="8"/><text x="80.3429%" y="191.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (5 samples, 0.04%)</title><rect x="80.1583%" y="197" width="0.0363%" height="15" fill="rgb(237,47,42)" fg:x="11041" fg:w="5"/><text x="80.4083%" y="207.50"></text></g><g><title>__rust_alloc (5 samples, 0.04%)</title><rect x="80.2236%" y="133" width="0.0363%" height="15" fill="rgb(211,20,18)" fg:x="11050" fg:w="5"/><text x="80.4736%" y="143.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (46 samples, 0.33%)</title><rect x="80.1946%" y="197" width="0.3340%" height="15" fill="rgb(231,203,46)" fg:x="11046" fg:w="46"/><text x="80.4446%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.33%)</title><rect x="80.1946%" y="181" width="0.3340%" height="15" fill="rgb(237,142,3)" fg:x="11046" fg:w="46"/><text x="80.4446%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.33%)</title><rect x="80.1946%" y="165" width="0.3340%" height="15" fill="rgb(241,107,1)" fg:x="11046" fg:w="46"/><text x="80.4446%" y="175.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.31%)</title><rect x="80.2163%" y="149" width="0.3122%" height="15" fill="rgb(229,83,13)" fg:x="11049" fg:w="43"/><text x="80.4663%" y="159.50"></text></g><g><title>malloc (37 samples, 0.27%)</title><rect x="80.2599%" y="133" width="0.2686%" height="15" fill="rgb(241,91,40)" fg:x="11055" fg:w="37"/><text x="80.5099%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (53 samples, 0.38%)</title><rect x="80.1510%" y="213" width="0.3848%" height="15" fill="rgb(225,3,45)" fg:x="11040" fg:w="53"/><text x="80.4010%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (283 samples, 2.05%)</title><rect x="78.5320%" y="261" width="2.0546%" height="15" fill="rgb(244,223,14)" fg:x="10817" fg:w="283"/><text x="78.7820%" y="271.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (68 samples, 0.49%)</title><rect x="80.0929%" y="245" width="0.4937%" height="15" fill="rgb(224,124,37)" fg:x="11032" fg:w="68"/><text x="80.3429%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (68 samples, 0.49%)</title><rect x="80.0929%" y="229" width="0.4937%" height="15" fill="rgb(251,171,30)" fg:x="11032" fg:w="68"/><text x="80.3429%" y="239.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (7 samples, 0.05%)</title><rect x="80.5358%" y="213" width="0.0508%" height="15" fill="rgb(236,46,54)" fg:x="11093" fg:w="7"/><text x="80.7858%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (5 samples, 0.04%)</title><rect x="80.5503%" y="197" width="0.0363%" height="15" fill="rgb(245,213,5)" fg:x="11095" fg:w="5"/><text x="80.8003%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (3 samples, 0.02%)</title><rect x="80.5648%" y="181" width="0.0218%" height="15" fill="rgb(230,144,27)" fg:x="11097" fg:w="3"/><text x="80.8148%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (295 samples, 2.14%)</title><rect x="78.4594%" y="309" width="2.1417%" height="15" fill="rgb(220,86,6)" fg:x="10807" fg:w="295"/><text x="78.7094%" y="319.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (292 samples, 2.12%)</title><rect x="78.4812%" y="293" width="2.1199%" height="15" fill="rgb(240,20,13)" fg:x="10810" fg:w="292"/><text x="78.7312%" y="303.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (289 samples, 2.10%)</title><rect x="78.5030%" y="277" width="2.0982%" height="15" fill="rgb(217,89,34)" fg:x="10813" fg:w="289"/><text x="78.7530%" y="287.50">h..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (2 samples, 0.01%)</title><rect x="80.5866%" y="261" width="0.0145%" height="15" fill="rgb(229,13,5)" fg:x="11100" fg:w="2"/><text x="80.8366%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.23%)</title><rect x="80.6157%" y="293" width="0.2251%" height="15" fill="rgb(244,67,35)" fg:x="11104" fg:w="31"/><text x="80.8657%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.06%)</title><rect x="80.7826%" y="277" width="0.0581%" height="15" fill="rgb(221,40,2)" fg:x="11127" fg:w="8"/><text x="81.0326%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (5 samples, 0.04%)</title><rect x="80.8480%" y="293" width="0.0363%" height="15" fill="rgb(237,157,21)" fg:x="11136" fg:w="5"/><text x="81.0980%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (22 samples, 0.16%)</title><rect x="80.9206%" y="277" width="0.1597%" height="15" fill="rgb(222,94,11)" fg:x="11146" fg:w="22"/><text x="81.1706%" y="287.50"></text></g><g><title>hashbrown::raw::is_full (22 samples, 0.16%)</title><rect x="80.9206%" y="261" width="0.1597%" height="15" fill="rgb(249,113,6)" fg:x="11146" fg:w="22"/><text x="81.1706%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (32 samples, 0.23%)</title><rect x="80.8843%" y="293" width="0.2323%" height="15" fill="rgb(238,137,36)" fg:x="11141" fg:w="32"/><text x="81.1343%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (5 samples, 0.04%)</title><rect x="81.0803%" y="277" width="0.0363%" height="15" fill="rgb(210,102,26)" fg:x="11168" fg:w="5"/><text x="81.3303%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.04%)</title><rect x="81.0803%" y="261" width="0.0363%" height="15" fill="rgb(218,30,30)" fg:x="11168" fg:w="5"/><text x="81.3303%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (35 samples, 0.25%)</title><rect x="81.1166%" y="293" width="0.2541%" height="15" fill="rgb(214,67,26)" fg:x="11173" fg:w="35"/><text x="81.3666%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (36 samples, 0.26%)</title><rect x="81.3707%" y="293" width="0.2614%" height="15" fill="rgb(251,9,53)" fg:x="11208" fg:w="36"/><text x="81.6207%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (36 samples, 0.26%)</title><rect x="81.3707%" y="277" width="0.2614%" height="15" fill="rgb(228,204,25)" fg:x="11208" fg:w="36"/><text x="81.6207%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (448 samples, 3.25%)</title><rect x="78.4159%" y="325" width="3.2525%" height="15" fill="rgb(207,153,8)" fg:x="10801" fg:w="448"/><text x="78.6659%" y="335.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (147 samples, 1.07%)</title><rect x="80.6011%" y="309" width="1.0672%" height="15" fill="rgb(242,9,16)" fg:x="11102" fg:w="147"/><text x="80.8511%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (5 samples, 0.04%)</title><rect x="81.6321%" y="293" width="0.0363%" height="15" fill="rgb(217,211,10)" fg:x="11244" fg:w="5"/><text x="81.8821%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.04%)</title><rect x="81.6321%" y="277" width="0.0363%" height="15" fill="rgb(219,228,52)" fg:x="11244" fg:w="5"/><text x="81.8821%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.04%)</title><rect x="81.6321%" y="261" width="0.0363%" height="15" fill="rgb(231,92,29)" fg:x="11244" fg:w="5"/><text x="81.8821%" y="271.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (683 samples, 4.96%)</title><rect x="76.8332%" y="373" width="4.9586%" height="15" fill="rgb(232,8,23)" fg:x="10583" fg:w="683"/><text x="77.0832%" y="383.50">std::c..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (683 samples, 4.96%)</title><rect x="76.8332%" y="357" width="4.9586%" height="15" fill="rgb(216,211,34)" fg:x="10583" fg:w="683"/><text x="77.0832%" y="367.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (681 samples, 4.94%)</title><rect x="76.8477%" y="341" width="4.9441%" height="15" fill="rgb(236,151,0)" fg:x="10585" fg:w="681"/><text x="77.0977%" y="351.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (17 samples, 0.12%)</title><rect x="81.6684%" y="325" width="0.1234%" height="15" fill="rgb(209,168,3)" fg:x="11249" fg:w="17"/><text x="81.9184%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (13 samples, 0.09%)</title><rect x="81.6974%" y="309" width="0.0944%" height="15" fill="rgb(208,129,28)" fg:x="11253" fg:w="13"/><text x="81.9474%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (7 samples, 0.05%)</title><rect x="81.7410%" y="293" width="0.0508%" height="15" fill="rgb(229,78,22)" fg:x="11259" fg:w="7"/><text x="81.9910%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (7 samples, 0.05%)</title><rect x="81.7410%" y="277" width="0.0508%" height="15" fill="rgb(228,187,13)" fg:x="11259" fg:w="7"/><text x="81.9910%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (6 samples, 0.04%)</title><rect x="81.7482%" y="261" width="0.0436%" height="15" fill="rgb(240,119,24)" fg:x="11260" fg:w="6"/><text x="81.9982%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (2 samples, 0.01%)</title><rect x="81.7990%" y="309" width="0.0145%" height="15" fill="rgb(209,194,42)" fg:x="11267" fg:w="2"/><text x="82.0490%" y="319.50"></text></g><g><title>std::collections::hash::map::RandomState::new (2 samples, 0.01%)</title><rect x="81.7990%" y="293" width="0.0145%" height="15" fill="rgb(247,200,46)" fg:x="11267" fg:w="2"/><text x="82.0490%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.01%)</title><rect x="81.7990%" y="277" width="0.0145%" height="15" fill="rgb(218,76,16)" fg:x="11267" fg:w="2"/><text x="82.0490%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.01%)</title><rect x="81.7990%" y="261" width="0.0145%" height="15" fill="rgb(225,21,48)" fg:x="11267" fg:w="2"/><text x="82.0490%" y="271.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (2 samples, 0.01%)</title><rect x="81.7990%" y="245" width="0.0145%" height="15" fill="rgb(239,223,50)" fg:x="11267" fg:w="2"/><text x="82.0490%" y="255.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="81.7990%" y="229" width="0.0145%" height="15" fill="rgb(244,45,21)" fg:x="11267" fg:w="2"/><text x="82.0490%" y="239.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (4 samples, 0.03%)</title><rect x="81.7990%" y="341" width="0.0290%" height="15" fill="rgb(232,33,43)" fg:x="11267" fg:w="4"/><text x="82.0490%" y="351.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (4 samples, 0.03%)</title><rect x="81.7990%" y="325" width="0.0290%" height="15" fill="rgb(209,8,3)" fg:x="11267" fg:w="4"/><text x="82.0490%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::with_hasher_in (2 samples, 0.01%)</title><rect x="81.8136%" y="309" width="0.0145%" height="15" fill="rgb(214,25,53)" fg:x="11269" fg:w="2"/><text x="82.0636%" y="319.50"></text></g><g><title>tetrs::logic::game::gravity (2,385 samples, 17.32%)</title><rect x="64.5201%" y="389" width="17.3152%" height="15" fill="rgb(254,186,54)" fg:x="8887" fg:w="2385"/><text x="64.7701%" y="399.50">tetrs::logic::game::gravity</text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::new (6 samples, 0.04%)</title><rect x="81.7918%" y="373" width="0.0436%" height="15" fill="rgb(208,174,49)" fg:x="11266" fg:w="6"/><text x="82.0418%" y="383.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (6 samples, 0.04%)</title><rect x="81.7918%" y="357" width="0.0436%" height="15" fill="rgb(233,191,51)" fg:x="11266" fg:w="6"/><text x="82.0418%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.06%)</title><rect x="82.3871%" y="373" width="0.0581%" height="15" fill="rgb(222,134,10)" fg:x="11348" fg:w="8"/><text x="82.6371%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.06%)</title><rect x="82.3871%" y="357" width="0.0581%" height="15" fill="rgb(230,226,20)" fg:x="11348" fg:w="8"/><text x="82.6371%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.06%)</title><rect x="82.3871%" y="341" width="0.0581%" height="15" fill="rgb(251,111,25)" fg:x="11348" fg:w="8"/><text x="82.6371%" y="351.50"></text></g><g><title>__rdl_alloc (4 samples, 0.03%)</title><rect x="82.4960%" y="309" width="0.0290%" height="15" fill="rgb(224,40,46)" fg:x="11363" fg:w="4"/><text x="82.7460%" y="319.50"></text></g><g><title>__rust_alloc (3 samples, 0.02%)</title><rect x="82.5250%" y="309" width="0.0218%" height="15" fill="rgb(236,108,47)" fg:x="11367" fg:w="3"/><text x="82.7750%" y="319.50"></text></g><g><title>core::ptr::read_volatile (4 samples, 0.03%)</title><rect x="82.5468%" y="309" width="0.0290%" height="15" fill="rgb(234,93,0)" fg:x="11370" fg:w="4"/><text x="82.7968%" y="319.50"></text></g><g><title>alloc::alloc::exchange_malloc (130 samples, 0.94%)</title><rect x="82.4452%" y="373" width="0.9438%" height="15" fill="rgb(224,213,32)" fg:x="11356" fg:w="130"/><text x="82.6952%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (123 samples, 0.89%)</title><rect x="82.4960%" y="357" width="0.8930%" height="15" fill="rgb(251,11,48)" fg:x="11363" fg:w="123"/><text x="82.7460%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (123 samples, 0.89%)</title><rect x="82.4960%" y="341" width="0.8930%" height="15" fill="rgb(236,173,5)" fg:x="11363" fg:w="123"/><text x="82.7460%" y="351.50"></text></g><g><title>alloc::alloc::alloc (123 samples, 0.89%)</title><rect x="82.4960%" y="325" width="0.8930%" height="15" fill="rgb(230,95,12)" fg:x="11363" fg:w="123"/><text x="82.7460%" y="335.50"></text></g><g><title>malloc (112 samples, 0.81%)</title><rect x="82.5759%" y="309" width="0.8131%" height="15" fill="rgb(232,209,1)" fg:x="11374" fg:w="112"/><text x="82.8259%" y="319.50"></text></g><g><title>[libc.so.6] (33 samples, 0.24%)</title><rect x="83.1494%" y="293" width="0.2396%" height="15" fill="rgb(232,6,1)" fg:x="11453" fg:w="33"/><text x="83.3994%" y="303.50"></text></g><g><title>[libc.so.6] (7 samples, 0.05%)</title><rect x="83.3382%" y="277" width="0.0508%" height="15" fill="rgb(210,224,50)" fg:x="11479" fg:w="7"/><text x="83.5882%" y="287.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.03%)</title><rect x="83.4035%" y="245" width="0.0290%" height="15" fill="rgb(228,127,35)" fg:x="11488" fg:w="4"/><text x="83.6535%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.03%)</title><rect x="83.4035%" y="229" width="0.0290%" height="15" fill="rgb(245,102,45)" fg:x="11488" fg:w="4"/><text x="83.6535%" y="239.50"></text></g><g><title>__rust_dealloc (12 samples, 0.09%)</title><rect x="83.4326%" y="245" width="0.0871%" height="15" fill="rgb(214,1,49)" fg:x="11492" fg:w="12"/><text x="83.6826%" y="255.50"></text></g><g><title>tetrs::logic::game::is_connected (324 samples, 2.35%)</title><rect x="81.8353%" y="389" width="2.3523%" height="15" fill="rgb(226,163,40)" fg:x="11272" fg:w="324"/><text x="82.0853%" y="399.50">t..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(i8,i8)&gt;&gt; (110 samples, 0.80%)</title><rect x="83.3890%" y="373" width="0.7986%" height="15" fill="rgb(239,212,28)" fg:x="11486" fg:w="110"/><text x="83.6390%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (110 samples, 0.80%)</title><rect x="83.3890%" y="357" width="0.7986%" height="15" fill="rgb(220,20,13)" fg:x="11486" fg:w="110"/><text x="83.6390%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(i8,i8),alloc::alloc::Global&gt;&gt; (110 samples, 0.80%)</title><rect x="83.3890%" y="341" width="0.7986%" height="15" fill="rgb(210,164,35)" fg:x="11486" fg:w="110"/><text x="83.6390%" y="351.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (110 samples, 0.80%)</title><rect x="83.3890%" y="325" width="0.7986%" height="15" fill="rgb(248,109,41)" fg:x="11486" fg:w="110"/><text x="83.6390%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(i8,i8)&gt;&gt; (110 samples, 0.80%)</title><rect x="83.3890%" y="309" width="0.7986%" height="15" fill="rgb(238,23,50)" fg:x="11486" fg:w="110"/><text x="83.6390%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (110 samples, 0.80%)</title><rect x="83.3890%" y="293" width="0.7986%" height="15" fill="rgb(211,48,49)" fg:x="11486" fg:w="110"/><text x="83.6390%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (110 samples, 0.80%)</title><rect x="83.3890%" y="277" width="0.7986%" height="15" fill="rgb(223,36,21)" fg:x="11486" fg:w="110"/><text x="83.6390%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (110 samples, 0.80%)</title><rect x="83.3890%" y="261" width="0.7986%" height="15" fill="rgb(207,123,46)" fg:x="11486" fg:w="110"/><text x="83.6390%" y="271.50"></text></g><g><title>cfree (92 samples, 0.67%)</title><rect x="83.5197%" y="245" width="0.6679%" height="15" fill="rgb(240,218,32)" fg:x="11504" fg:w="92"/><text x="83.7697%" y="255.50"></text></g><g><title>[libc.so.6] (64 samples, 0.46%)</title><rect x="83.7230%" y="229" width="0.4646%" height="15" fill="rgb(252,5,43)" fg:x="11532" fg:w="64"/><text x="83.9730%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="84.5070%" y="373" width="0.0436%" height="15" fill="rgb(252,84,19)" fg:x="11640" fg:w="6"/><text x="84.7570%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.08%)</title><rect x="84.5506%" y="373" width="0.0799%" height="15" fill="rgb(243,152,39)" fg:x="11646" fg:w="11"/><text x="84.8006%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.08%)</title><rect x="84.5506%" y="357" width="0.0799%" height="15" fill="rgb(234,160,15)" fg:x="11646" fg:w="11"/><text x="84.8006%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.08%)</title><rect x="84.5506%" y="341" width="0.0799%" height="15" fill="rgb(237,34,20)" fg:x="11646" fg:w="11"/><text x="84.8006%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="84.6305%" y="373" width="0.0290%" height="15" fill="rgb(229,97,13)" fg:x="11657" fg:w="4"/><text x="84.8805%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (4 samples, 0.03%)</title><rect x="84.6305%" y="357" width="0.0290%" height="15" fill="rgb(234,71,50)" fg:x="11657" fg:w="4"/><text x="84.8805%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (4 samples, 0.03%)</title><rect x="84.6305%" y="341" width="0.0290%" height="15" fill="rgb(253,155,4)" fg:x="11657" fg:w="4"/><text x="84.8805%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3 samples, 0.02%)</title><rect x="84.6377%" y="325" width="0.0218%" height="15" fill="rgb(222,185,37)" fg:x="11658" fg:w="3"/><text x="84.8877%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (15 samples, 0.11%)</title><rect x="84.6595%" y="373" width="0.1089%" height="15" fill="rgb(251,177,13)" fg:x="11661" fg:w="15"/><text x="84.9095%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.04%)</title><rect x="84.7248%" y="357" width="0.0436%" height="15" fill="rgb(250,179,40)" fg:x="11670" fg:w="6"/><text x="84.9748%" y="367.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="84.7539%" y="341" width="0.0145%" height="15" fill="rgb(242,44,2)" fg:x="11674" fg:w="2"/><text x="85.0039%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.04%)</title><rect x="84.7684%" y="373" width="0.0436%" height="15" fill="rgb(216,177,13)" fg:x="11676" fg:w="6"/><text x="85.0184%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.04%)</title><rect x="84.7684%" y="357" width="0.0436%" height="15" fill="rgb(216,106,43)" fg:x="11676" fg:w="6"/><text x="85.0184%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4 samples, 0.03%)</title><rect x="84.7829%" y="341" width="0.0290%" height="15" fill="rgb(216,183,2)" fg:x="11678" fg:w="4"/><text x="85.0329%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17 samples, 0.12%)</title><rect x="85.4291%" y="357" width="0.1234%" height="15" fill="rgb(249,75,3)" fg:x="11767" fg:w="17"/><text x="85.6791%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17 samples, 0.12%)</title><rect x="85.4291%" y="341" width="0.1234%" height="15" fill="rgb(219,67,39)" fg:x="11767" fg:w="17"/><text x="85.6791%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 0.12%)</title><rect x="85.4291%" y="325" width="0.1234%" height="15" fill="rgb(253,228,2)" fg:x="11767" fg:w="17"/><text x="85.6791%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.02%)</title><rect x="85.5525%" y="357" width="0.0218%" height="15" fill="rgb(235,138,27)" fg:x="11784" fg:w="3"/><text x="85.8025%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.02%)</title><rect x="85.5525%" y="341" width="0.0218%" height="15" fill="rgb(236,97,51)" fg:x="11784" fg:w="3"/><text x="85.8025%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.02%)</title><rect x="85.5525%" y="325" width="0.0218%" height="15" fill="rgb(240,80,30)" fg:x="11784" fg:w="3"/><text x="85.8025%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.03%)</title><rect x="85.5743%" y="357" width="0.0290%" height="15" fill="rgb(230,178,19)" fg:x="11787" fg:w="4"/><text x="85.8243%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="85.6033%" y="357" width="0.0218%" height="15" fill="rgb(210,190,27)" fg:x="11791" fg:w="3"/><text x="85.8533%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (3 samples, 0.02%)</title><rect x="85.6033%" y="341" width="0.0218%" height="15" fill="rgb(222,107,31)" fg:x="11791" fg:w="3"/><text x="85.8533%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (3 samples, 0.02%)</title><rect x="85.6033%" y="325" width="0.0218%" height="15" fill="rgb(216,127,34)" fg:x="11791" fg:w="3"/><text x="85.8533%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::backward_unchecked (2 samples, 0.01%)</title><rect x="85.6106%" y="309" width="0.0145%" height="15" fill="rgb(234,116,52)" fg:x="11792" fg:w="2"/><text x="85.8606%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_sub (2 samples, 0.01%)</title><rect x="85.6106%" y="293" width="0.0145%" height="15" fill="rgb(222,124,15)" fg:x="11792" fg:w="2"/><text x="85.8606%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="85.6832%" y="309" width="0.0145%" height="15" fill="rgb(231,179,28)" fg:x="11802" fg:w="2"/><text x="85.9332%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="85.6977%" y="309" width="0.0145%" height="15" fill="rgb(226,93,45)" fg:x="11804" fg:w="2"/><text x="85.9477%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (51 samples, 0.37%)</title><rect x="85.7340%" y="293" width="0.3703%" height="15" fill="rgb(215,8,51)" fg:x="11809" fg:w="51"/><text x="85.9840%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (51 samples, 0.37%)</title><rect x="85.7340%" y="277" width="0.3703%" height="15" fill="rgb(223,106,5)" fg:x="11809" fg:w="51"/><text x="85.9840%" y="287.50"></text></g><g><title>alloc::alloc::realloc (51 samples, 0.37%)</title><rect x="85.7340%" y="261" width="0.3703%" height="15" fill="rgb(250,191,5)" fg:x="11809" fg:w="51"/><text x="85.9840%" y="271.50"></text></g><g><title>realloc (50 samples, 0.36%)</title><rect x="85.7413%" y="245" width="0.3630%" height="15" fill="rgb(242,132,44)" fg:x="11810" fg:w="50"/><text x="85.9913%" y="255.50"></text></g><g><title>[libc.so.6] (45 samples, 0.33%)</title><rect x="85.7776%" y="229" width="0.3267%" height="15" fill="rgb(251,152,29)" fg:x="11815" fg:w="45"/><text x="86.0276%" y="239.50"></text></g><g><title>[libc.so.6] (37 samples, 0.27%)</title><rect x="85.8356%" y="213" width="0.2686%" height="15" fill="rgb(218,179,5)" fg:x="11823" fg:w="37"/><text x="86.0856%" y="223.50"></text></g><g><title>[libc.so.6] (9 samples, 0.07%)</title><rect x="86.0389%" y="197" width="0.0653%" height="15" fill="rgb(227,67,19)" fg:x="11851" fg:w="9"/><text x="86.2889%" y="207.50"></text></g><g><title>__rust_alloc (2 samples, 0.01%)</title><rect x="86.1115%" y="293" width="0.0145%" height="15" fill="rgb(233,119,31)" fg:x="11861" fg:w="2"/><text x="86.3615%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (66 samples, 0.48%)</title><rect x="85.7122%" y="309" width="0.4792%" height="15" fill="rgb(241,120,22)" fg:x="11806" fg:w="66"/><text x="85.9622%" y="319.50"></text></g><g><title>malloc (8 samples, 0.06%)</title><rect x="86.1333%" y="293" width="0.0581%" height="15" fill="rgb(224,102,30)" fg:x="11864" fg:w="8"/><text x="86.3833%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (72 samples, 0.52%)</title><rect x="85.6759%" y="341" width="0.5227%" height="15" fill="rgb(210,164,37)" fg:x="11801" fg:w="72"/><text x="85.9259%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (71 samples, 0.52%)</title><rect x="85.6832%" y="325" width="0.5155%" height="15" fill="rgb(226,191,16)" fg:x="11802" fg:w="71"/><text x="85.9332%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.02%)</title><rect x="86.1986%" y="341" width="0.0218%" height="15" fill="rgb(214,40,45)" fg:x="11873" fg:w="3"/><text x="86.4486%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (86 samples, 0.62%)</title><rect x="85.6251%" y="357" width="0.6244%" height="15" fill="rgb(244,29,26)" fg:x="11794" fg:w="86"/><text x="85.8751%" y="367.50"></text></g><g><title>core::ptr::write (4 samples, 0.03%)</title><rect x="86.2204%" y="341" width="0.0290%" height="15" fill="rgb(216,16,5)" fg:x="11876" fg:w="4"/><text x="86.4704%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.12%)</title><rect x="86.2495%" y="261" width="0.1234%" height="15" fill="rgb(249,76,35)" fg:x="11880" fg:w="17"/><text x="86.4995%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.12%)</title><rect x="86.2495%" y="245" width="0.1234%" height="15" fill="rgb(207,11,44)" fg:x="11880" fg:w="17"/><text x="86.4995%" y="255.50"></text></g><g><title>cfree (17 samples, 0.12%)</title><rect x="86.2495%" y="229" width="0.1234%" height="15" fill="rgb(228,190,49)" fg:x="11880" fg:w="17"/><text x="86.4995%" y="239.50"></text></g><g><title>[libc.so.6] (15 samples, 0.11%)</title><rect x="86.2640%" y="213" width="0.1089%" height="15" fill="rgb(214,173,12)" fg:x="11882" fg:w="15"/><text x="86.5140%" y="223.50"></text></g><g><title>[libc.so.6] (9 samples, 0.07%)</title><rect x="86.3075%" y="197" width="0.0653%" height="15" fill="rgb(218,26,35)" fg:x="11888" fg:w="9"/><text x="86.5575%" y="207.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="86.3438%" y="181" width="0.0290%" height="15" fill="rgb(220,200,19)" fg:x="11893" fg:w="4"/><text x="86.5938%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(usize,usize)&gt;&gt; (19 samples, 0.14%)</title><rect x="86.2495%" y="357" width="0.1379%" height="15" fill="rgb(239,95,49)" fg:x="11880" fg:w="19"/><text x="86.4995%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.14%)</title><rect x="86.2495%" y="341" width="0.1379%" height="15" fill="rgb(235,85,53)" fg:x="11880" fg:w="19"/><text x="86.4995%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(usize,usize),alloc::alloc::Global&gt;&gt; (19 samples, 0.14%)</title><rect x="86.2495%" y="325" width="0.1379%" height="15" fill="rgb(233,133,31)" fg:x="11880" fg:w="19"/><text x="86.4995%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.14%)</title><rect x="86.2495%" y="309" width="0.1379%" height="15" fill="rgb(218,25,20)" fg:x="11880" fg:w="19"/><text x="86.4995%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (19 samples, 0.14%)</title><rect x="86.2495%" y="293" width="0.1379%" height="15" fill="rgb(252,210,38)" fg:x="11880" fg:w="19"/><text x="86.4995%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.14%)</title><rect x="86.2495%" y="277" width="0.1379%" height="15" fill="rgb(242,134,21)" fg:x="11880" fg:w="19"/><text x="86.4995%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="86.3729%" y="261" width="0.0145%" height="15" fill="rgb(213,28,48)" fg:x="11897" fg:w="2"/><text x="86.6229%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16&gt;&gt; (8 samples, 0.06%)</title><rect x="86.3874%" y="357" width="0.0581%" height="15" fill="rgb(250,196,2)" fg:x="11899" fg:w="8"/><text x="86.6374%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,std::collections::hash::map::RandomState&gt;&gt; (8 samples, 0.06%)</title><rect x="86.3874%" y="341" width="0.0581%" height="15" fill="rgb(227,5,17)" fg:x="11899" fg:w="8"/><text x="86.6374%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),std::collections::hash::map::RandomState&gt;&gt; (8 samples, 0.06%)</title><rect x="86.3874%" y="325" width="0.0581%" height="15" fill="rgb(221,226,24)" fg:x="11899" fg:w="8"/><text x="86.6374%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (8 samples, 0.06%)</title><rect x="86.3874%" y="309" width="0.0581%" height="15" fill="rgb(211,5,48)" fg:x="11899" fg:w="8"/><text x="86.6374%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.06%)</title><rect x="86.3874%" y="293" width="0.0581%" height="15" fill="rgb(219,150,6)" fg:x="11899" fg:w="8"/><text x="86.6374%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (8 samples, 0.06%)</title><rect x="86.3874%" y="277" width="0.0581%" height="15" fill="rgb(251,46,16)" fg:x="11899" fg:w="8"/><text x="86.6374%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (8 samples, 0.06%)</title><rect x="86.3874%" y="261" width="0.0581%" height="15" fill="rgb(220,204,40)" fg:x="11899" fg:w="8"/><text x="86.6374%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.06%)</title><rect x="86.3874%" y="245" width="0.0581%" height="15" fill="rgb(211,85,2)" fg:x="11899" fg:w="8"/><text x="86.6374%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.06%)</title><rect x="86.3874%" y="229" width="0.0581%" height="15" fill="rgb(229,17,7)" fg:x="11899" fg:w="8"/><text x="86.6374%" y="239.50"></text></g><g><title>cfree (6 samples, 0.04%)</title><rect x="86.4019%" y="213" width="0.0436%" height="15" fill="rgb(239,72,28)" fg:x="11901" fg:w="6"/><text x="86.6519%" y="223.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="86.4164%" y="197" width="0.0290%" height="15" fill="rgb(230,47,54)" fg:x="11903" fg:w="4"/><text x="86.6664%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21 samples, 0.15%)</title><rect x="87.2223%" y="197" width="0.1525%" height="15" fill="rgb(214,50,8)" fg:x="12014" fg:w="21"/><text x="87.4723%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (42 samples, 0.30%)</title><rect x="87.1352%" y="213" width="0.3049%" height="15" fill="rgb(216,198,43)" fg:x="12002" fg:w="42"/><text x="87.3852%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (9 samples, 0.07%)</title><rect x="87.3748%" y="197" width="0.0653%" height="15" fill="rgb(234,20,35)" fg:x="12035" fg:w="9"/><text x="87.6248%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (79 samples, 0.57%)</title><rect x="87.5926%" y="197" width="0.5735%" height="15" fill="rgb(254,45,19)" fg:x="12065" fg:w="79"/><text x="87.8426%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (213 samples, 1.55%)</title><rect x="86.7431%" y="261" width="1.5464%" height="15" fill="rgb(219,14,44)" fg:x="11948" fg:w="213"/><text x="86.9931%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (213 samples, 1.55%)</title><rect x="86.7431%" y="245" width="1.5464%" height="15" fill="rgb(217,220,26)" fg:x="11948" fg:w="213"/><text x="86.9931%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (213 samples, 1.55%)</title><rect x="86.7431%" y="229" width="1.5464%" height="15" fill="rgb(213,158,28)" fg:x="11948" fg:w="213"/><text x="86.9931%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (117 samples, 0.85%)</title><rect x="87.4401%" y="213" width="0.8494%" height="15" fill="rgb(252,51,52)" fg:x="12044" fg:w="117"/><text x="87.6901%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (17 samples, 0.12%)</title><rect x="88.1661%" y="197" width="0.1234%" height="15" fill="rgb(246,89,16)" fg:x="12144" fg:w="17"/><text x="88.4161%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (14 samples, 0.10%)</title><rect x="88.2895%" y="261" width="0.1016%" height="15" fill="rgb(216,158,49)" fg:x="12161" fg:w="14"/><text x="88.5395%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (8 samples, 0.06%)</title><rect x="88.3331%" y="245" width="0.0581%" height="15" fill="rgb(236,107,19)" fg:x="12167" fg:w="8"/><text x="88.5831%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (8 samples, 0.06%)</title><rect x="88.3331%" y="229" width="0.0581%" height="15" fill="rgb(228,185,30)" fg:x="12167" fg:w="8"/><text x="88.5831%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (8 samples, 0.06%)</title><rect x="88.3331%" y="213" width="0.0581%" height="15" fill="rgb(246,134,8)" fg:x="12167" fg:w="8"/><text x="88.5831%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (50 samples, 0.36%)</title><rect x="88.4057%" y="213" width="0.3630%" height="15" fill="rgb(214,143,50)" fg:x="12177" fg:w="50"/><text x="88.6557%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (47 samples, 0.34%)</title><rect x="88.4275%" y="197" width="0.3412%" height="15" fill="rgb(228,75,8)" fg:x="12180" fg:w="47"/><text x="88.6775%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (47 samples, 0.34%)</title><rect x="88.4275%" y="181" width="0.3412%" height="15" fill="rgb(207,175,4)" fg:x="12180" fg:w="47"/><text x="88.6775%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (27 samples, 0.20%)</title><rect x="88.5727%" y="165" width="0.1960%" height="15" fill="rgb(205,108,24)" fg:x="12200" fg:w="27"/><text x="88.8227%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="88.7469%" y="149" width="0.0218%" height="15" fill="rgb(244,120,49)" fg:x="12224" fg:w="3"/><text x="88.9969%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (316 samples, 2.29%)</title><rect x="86.5471%" y="293" width="2.2942%" height="15" fill="rgb(223,47,38)" fg:x="11921" fg:w="316"/><text x="86.7971%" y="303.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (310 samples, 2.25%)</title><rect x="86.5907%" y="277" width="2.2506%" height="15" fill="rgb(229,179,11)" fg:x="11927" fg:w="310"/><text x="86.8407%" y="287.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (62 samples, 0.45%)</title><rect x="88.3912%" y="261" width="0.4501%" height="15" fill="rgb(231,122,1)" fg:x="12175" fg:w="62"/><text x="88.6412%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (60 samples, 0.44%)</title><rect x="88.4057%" y="245" width="0.4356%" height="15" fill="rgb(245,119,9)" fg:x="12177" fg:w="60"/><text x="88.6557%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u16 (60 samples, 0.44%)</title><rect x="88.4057%" y="229" width="0.4356%" height="15" fill="rgb(241,163,25)" fg:x="12177" fg:w="60"/><text x="88.6557%" y="239.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (10 samples, 0.07%)</title><rect x="88.7687%" y="213" width="0.0726%" height="15" fill="rgb(217,214,3)" fg:x="12227" fg:w="10"/><text x="89.0187%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.05%)</title><rect x="89.4003%" y="229" width="0.0508%" height="15" fill="rgb(240,86,28)" fg:x="12314" fg:w="7"/><text x="89.6503%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.41%)</title><rect x="89.0954%" y="245" width="0.4138%" height="15" fill="rgb(215,47,9)" fg:x="12272" fg:w="57"/><text x="89.3454%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (8 samples, 0.06%)</title><rect x="89.4511%" y="229" width="0.0581%" height="15" fill="rgb(252,25,45)" fg:x="12321" fg:w="8"/><text x="89.7011%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (16 samples, 0.12%)</title><rect x="89.5092%" y="245" width="0.1162%" height="15" fill="rgb(251,164,9)" fg:x="12329" fg:w="16"/><text x="89.7592%" y="255.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (16 samples, 0.12%)</title><rect x="89.5092%" y="229" width="0.1162%" height="15" fill="rgb(233,194,0)" fg:x="12329" fg:w="16"/><text x="89.7592%" y="239.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (16 samples, 0.12%)</title><rect x="89.5092%" y="213" width="0.1162%" height="15" fill="rgb(249,111,24)" fg:x="12329" fg:w="16"/><text x="89.7592%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.12%)</title><rect x="89.5092%" y="197" width="0.1162%" height="15" fill="rgb(250,223,3)" fg:x="12329" fg:w="16"/><text x="89.7592%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (66 samples, 0.48%)</title><rect x="89.6254%" y="245" width="0.4792%" height="15" fill="rgb(236,178,37)" fg:x="12345" fg:w="66"/><text x="89.8754%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (23 samples, 0.17%)</title><rect x="90.1045%" y="245" width="0.1670%" height="15" fill="rgb(241,158,50)" fg:x="12411" fg:w="23"/><text x="90.3545%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (23 samples, 0.17%)</title><rect x="90.1045%" y="229" width="0.1670%" height="15" fill="rgb(213,121,41)" fg:x="12411" fg:w="23"/><text x="90.3545%" y="239.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (534 samples, 3.88%)</title><rect x="86.4527%" y="357" width="3.8769%" height="15" fill="rgb(240,92,3)" fg:x="11908" fg:w="534"/><text x="86.7027%" y="367.50">std:..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (534 samples, 3.88%)</title><rect x="86.4527%" y="341" width="3.8769%" height="15" fill="rgb(205,123,3)" fg:x="11908" fg:w="534"/><text x="86.7027%" y="351.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (534 samples, 3.88%)</title><rect x="86.4527%" y="325" width="3.8769%" height="15" fill="rgb(205,97,47)" fg:x="11908" fg:w="534"/><text x="86.7027%" y="335.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (534 samples, 3.88%)</title><rect x="86.4527%" y="309" width="3.8769%" height="15" fill="rgb(247,152,14)" fg:x="11908" fg:w="534"/><text x="86.7027%" y="319.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (205 samples, 1.49%)</title><rect x="88.8413%" y="293" width="1.4883%" height="15" fill="rgb(248,195,53)" fg:x="12237" fg:w="205"/><text x="89.0913%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (205 samples, 1.49%)</title><rect x="88.8413%" y="277" width="1.4883%" height="15" fill="rgb(226,201,16)" fg:x="12237" fg:w="205"/><text x="89.0913%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (205 samples, 1.49%)</title><rect x="88.8413%" y="261" width="1.4883%" height="15" fill="rgb(205,98,0)" fg:x="12237" fg:w="205"/><text x="89.0913%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (8 samples, 0.06%)</title><rect x="90.2715%" y="245" width="0.0581%" height="15" fill="rgb(214,191,48)" fg:x="12434" fg:w="8"/><text x="90.5215%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.06%)</title><rect x="90.2715%" y="229" width="0.0581%" height="15" fill="rgb(237,112,39)" fg:x="12434" fg:w="8"/><text x="90.5215%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.06%)</title><rect x="90.2715%" y="213" width="0.0581%" height="15" fill="rgb(247,203,27)" fg:x="12434" fg:w="8"/><text x="90.5215%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.06%)</title><rect x="90.6490%" y="229" width="0.0581%" height="15" fill="rgb(235,124,28)" fg:x="12486" fg:w="8"/><text x="90.8990%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.01%)</title><rect x="90.6926%" y="213" width="0.0145%" height="15" fill="rgb(208,207,46)" fg:x="12492" fg:w="2"/><text x="90.9426%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (26 samples, 0.19%)</title><rect x="90.7507%" y="213" width="0.1888%" height="15" fill="rgb(234,176,4)" fg:x="12500" fg:w="26"/><text x="91.0007%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (69 samples, 0.50%)</title><rect x="90.4748%" y="277" width="0.5009%" height="15" fill="rgb(230,133,28)" fg:x="12462" fg:w="69"/><text x="90.7248%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (69 samples, 0.50%)</title><rect x="90.4748%" y="261" width="0.5009%" height="15" fill="rgb(211,137,40)" fg:x="12462" fg:w="69"/><text x="90.7248%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (69 samples, 0.50%)</title><rect x="90.4748%" y="245" width="0.5009%" height="15" fill="rgb(254,35,13)" fg:x="12462" fg:w="69"/><text x="90.7248%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (37 samples, 0.27%)</title><rect x="90.7071%" y="229" width="0.2686%" height="15" fill="rgb(225,49,51)" fg:x="12494" fg:w="37"/><text x="90.9571%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.04%)</title><rect x="90.9395%" y="213" width="0.0363%" height="15" fill="rgb(251,10,15)" fg:x="12526" fg:w="5"/><text x="91.1895%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.03%)</title><rect x="90.9758%" y="277" width="0.0290%" height="15" fill="rgb(228,207,15)" fg:x="12531" fg:w="4"/><text x="91.2258%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.08%)</title><rect x="91.0048%" y="229" width="0.0799%" height="15" fill="rgb(241,99,19)" fg:x="12535" fg:w="11"/><text x="91.2548%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.07%)</title><rect x="91.0193%" y="213" width="0.0653%" height="15" fill="rgb(207,104,49)" fg:x="12537" fg:w="9"/><text x="91.2693%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.07%)</title><rect x="91.0193%" y="197" width="0.0653%" height="15" fill="rgb(234,99,18)" fg:x="12537" fg:w="9"/><text x="91.2693%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.03%)</title><rect x="91.0556%" y="181" width="0.0290%" height="15" fill="rgb(213,191,49)" fg:x="12542" fg:w="4"/><text x="91.3056%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (96 samples, 0.70%)</title><rect x="90.4022%" y="309" width="0.6970%" height="15" fill="rgb(210,226,19)" fg:x="12452" fg:w="96"/><text x="90.6522%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (96 samples, 0.70%)</title><rect x="90.4022%" y="293" width="0.6970%" height="15" fill="rgb(229,97,18)" fg:x="12452" fg:w="96"/><text x="90.6522%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (13 samples, 0.09%)</title><rect x="91.0048%" y="277" width="0.0944%" height="15" fill="rgb(211,167,15)" fg:x="12535" fg:w="13"/><text x="91.2548%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (13 samples, 0.09%)</title><rect x="91.0048%" y="261" width="0.0944%" height="15" fill="rgb(210,169,34)" fg:x="12535" fg:w="13"/><text x="91.2548%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u16 (13 samples, 0.09%)</title><rect x="91.0048%" y="245" width="0.0944%" height="15" fill="rgb(241,121,31)" fg:x="12535" fg:w="13"/><text x="91.2548%" y="255.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (2 samples, 0.01%)</title><rect x="91.0847%" y="229" width="0.0145%" height="15" fill="rgb(232,40,11)" fg:x="12546" fg:w="2"/><text x="91.3347%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="91.1645%" y="229" width="0.0290%" height="15" fill="rgb(205,86,26)" fg:x="12557" fg:w="4"/><text x="91.4145%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (5 samples, 0.04%)</title><rect x="91.1936%" y="229" width="0.0363%" height="15" fill="rgb(231,126,28)" fg:x="12561" fg:w="5"/><text x="91.4436%" y="239.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="91.1936%" y="213" width="0.0363%" height="15" fill="rgb(219,221,18)" fg:x="12561" fg:w="5"/><text x="91.4436%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::_{{closure}} (5 samples, 0.04%)</title><rect x="91.1936%" y="197" width="0.0363%" height="15" fill="rgb(211,40,0)" fg:x="12561" fg:w="5"/><text x="91.4436%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (5 samples, 0.04%)</title><rect x="91.1936%" y="181" width="0.0363%" height="15" fill="rgb(239,85,43)" fg:x="12561" fg:w="5"/><text x="91.4436%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="91.1936%" y="165" width="0.0363%" height="15" fill="rgb(231,55,21)" fg:x="12561" fg:w="5"/><text x="91.4436%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="91.1936%" y="149" width="0.0363%" height="15" fill="rgb(225,184,43)" fg:x="12561" fg:w="5"/><text x="91.4436%" y="159.50"></text></g><g><title>cfree (4 samples, 0.03%)</title><rect x="91.2008%" y="133" width="0.0290%" height="15" fill="rgb(251,158,41)" fg:x="12562" fg:w="4"/><text x="91.4508%" y="143.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="91.2008%" y="117" width="0.0290%" height="15" fill="rgb(234,159,37)" fg:x="12562" fg:w="4"/><text x="91.4508%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.04%)</title><rect x="91.3751%" y="101" width="0.0363%" height="15" fill="rgb(216,204,22)" fg:x="12586" fg:w="5"/><text x="91.6251%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.07%)</title><rect x="91.3678%" y="117" width="0.0653%" height="15" fill="rgb(214,17,3)" fg:x="12585" fg:w="9"/><text x="91.6178%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.02%)</title><rect x="91.4114%" y="101" width="0.0218%" height="15" fill="rgb(212,111,17)" fg:x="12591" fg:w="3"/><text x="91.6614%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (15 samples, 0.11%)</title><rect x="91.4331%" y="101" width="0.1089%" height="15" fill="rgb(221,157,24)" fg:x="12594" fg:w="15"/><text x="91.6831%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (45 samples, 0.33%)</title><rect x="91.2662%" y="165" width="0.3267%" height="15" fill="rgb(252,16,13)" fg:x="12571" fg:w="45"/><text x="91.5162%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (45 samples, 0.33%)</title><rect x="91.2662%" y="149" width="0.3267%" height="15" fill="rgb(221,62,2)" fg:x="12571" fg:w="45"/><text x="91.5162%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (45 samples, 0.33%)</title><rect x="91.2662%" y="133" width="0.3267%" height="15" fill="rgb(247,87,22)" fg:x="12571" fg:w="45"/><text x="91.5162%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (22 samples, 0.16%)</title><rect x="91.4331%" y="117" width="0.1597%" height="15" fill="rgb(215,73,9)" fg:x="12594" fg:w="22"/><text x="91.6831%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.05%)</title><rect x="91.5420%" y="101" width="0.0508%" height="15" fill="rgb(207,175,33)" fg:x="12609" fg:w="7"/><text x="91.7920%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.07%)</title><rect x="91.6219%" y="117" width="0.0726%" height="15" fill="rgb(243,129,54)" fg:x="12620" fg:w="10"/><text x="91.8719%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.07%)</title><rect x="91.6219%" y="101" width="0.0726%" height="15" fill="rgb(227,119,45)" fg:x="12620" fg:w="10"/><text x="91.8719%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.07%)</title><rect x="91.6219%" y="85" width="0.0726%" height="15" fill="rgb(205,109,36)" fg:x="12620" fg:w="10"/><text x="91.8719%" y="95.50"></text></g><g><title>core::hash::sip::u8to64_le (8 samples, 0.06%)</title><rect x="91.6364%" y="69" width="0.0581%" height="15" fill="rgb(205,6,39)" fg:x="12622" fg:w="8"/><text x="91.8864%" y="79.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (65 samples, 0.47%)</title><rect x="91.2299%" y="229" width="0.4719%" height="15" fill="rgb(221,32,16)" fg:x="12566" fg:w="65"/><text x="91.4799%" y="239.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (65 samples, 0.47%)</title><rect x="91.2299%" y="213" width="0.4719%" height="15" fill="rgb(228,144,50)" fg:x="12566" fg:w="65"/><text x="91.4799%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (65 samples, 0.47%)</title><rect x="91.2299%" y="197" width="0.4719%" height="15" fill="rgb(229,201,53)" fg:x="12566" fg:w="65"/><text x="91.4799%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (65 samples, 0.47%)</title><rect x="91.2299%" y="181" width="0.4719%" height="15" fill="rgb(249,153,27)" fg:x="12566" fg:w="65"/><text x="91.4799%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.10%)</title><rect x="91.6001%" y="165" width="0.1016%" height="15" fill="rgb(227,106,25)" fg:x="12617" fg:w="14"/><text x="91.8501%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (14 samples, 0.10%)</title><rect x="91.6001%" y="149" width="0.1016%" height="15" fill="rgb(230,65,29)" fg:x="12617" fg:w="14"/><text x="91.8501%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u16 (14 samples, 0.10%)</title><rect x="91.6001%" y="133" width="0.1016%" height="15" fill="rgb(221,57,46)" fg:x="12617" fg:w="14"/><text x="91.8501%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (10 samples, 0.07%)</title><rect x="91.7453%" y="181" width="0.0726%" height="15" fill="rgb(229,161,17)" fg:x="12637" fg:w="10"/><text x="91.9953%" y="191.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (10 samples, 0.07%)</title><rect x="91.7453%" y="165" width="0.0726%" height="15" fill="rgb(222,213,11)" fg:x="12637" fg:w="10"/><text x="91.9953%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (30 samples, 0.22%)</title><rect x="91.7018%" y="197" width="0.2178%" height="15" fill="rgb(235,35,13)" fg:x="12631" fg:w="30"/><text x="91.9518%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (14 samples, 0.10%)</title><rect x="91.8179%" y="181" width="0.1016%" height="15" fill="rgb(233,158,34)" fg:x="12647" fg:w="14"/><text x="92.0679%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.10%)</title><rect x="91.8179%" y="165" width="0.1016%" height="15" fill="rgb(215,151,48)" fg:x="12647" fg:w="14"/><text x="92.0679%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (5 samples, 0.04%)</title><rect x="91.9849%" y="181" width="0.0363%" height="15" fill="rgb(229,84,14)" fg:x="12670" fg:w="5"/><text x="92.2349%" y="191.50"></text></g><g><title>hashbrown::raw::is_full (5 samples, 0.04%)</title><rect x="91.9849%" y="165" width="0.0363%" height="15" fill="rgb(229,68,14)" fg:x="12670" fg:w="5"/><text x="92.2349%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (15 samples, 0.11%)</title><rect x="91.9196%" y="197" width="0.1089%" height="15" fill="rgb(243,106,26)" fg:x="12661" fg:w="15"/><text x="92.1696%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (47 samples, 0.34%)</title><rect x="91.7018%" y="213" width="0.3412%" height="15" fill="rgb(206,45,38)" fg:x="12631" fg:w="47"/><text x="91.9518%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.01%)</title><rect x="92.0285%" y="197" width="0.0145%" height="15" fill="rgb(226,6,15)" fg:x="12676" fg:w="2"/><text x="92.2785%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.01%)</title><rect x="92.0285%" y="181" width="0.0145%" height="15" fill="rgb(232,22,54)" fg:x="12676" fg:w="2"/><text x="92.2785%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="92.0285%" y="165" width="0.0145%" height="15" fill="rgb(229,222,32)" fg:x="12676" fg:w="2"/><text x="92.2785%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (49 samples, 0.36%)</title><rect x="91.7018%" y="229" width="0.3557%" height="15" fill="rgb(228,62,29)" fg:x="12631" fg:w="49"/><text x="91.9518%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (2 samples, 0.01%)</title><rect x="92.0430%" y="213" width="0.0145%" height="15" fill="rgb(251,103,34)" fg:x="12678" fg:w="2"/><text x="92.2930%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (4 samples, 0.03%)</title><rect x="92.0575%" y="197" width="0.0290%" height="15" fill="rgb(233,12,30)" fg:x="12680" fg:w="4"/><text x="92.3075%" y="207.50"></text></g><g><title>core::intrinsics::write_bytes (4 samples, 0.03%)</title><rect x="92.0575%" y="181" width="0.0290%" height="15" fill="rgb(238,52,0)" fg:x="12680" fg:w="4"/><text x="92.3075%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="92.0575%" y="165" width="0.0290%" height="15" fill="rgb(223,98,5)" fg:x="12680" fg:w="4"/><text x="92.3075%" y="175.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (5 samples, 0.04%)</title><rect x="92.0865%" y="181" width="0.0363%" height="15" fill="rgb(228,75,37)" fg:x="12684" fg:w="5"/><text x="92.3365%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (26 samples, 0.19%)</title><rect x="92.0865%" y="197" width="0.1888%" height="15" fill="rgb(205,115,49)" fg:x="12684" fg:w="26"/><text x="92.3365%" y="207.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (21 samples, 0.15%)</title><rect x="92.1228%" y="181" width="0.1525%" height="15" fill="rgb(250,154,43)" fg:x="12689" fg:w="21"/><text x="92.3728%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.15%)</title><rect x="92.1228%" y="165" width="0.1525%" height="15" fill="rgb(226,43,29)" fg:x="12689" fg:w="21"/><text x="92.3728%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.15%)</title><rect x="92.1228%" y="149" width="0.1525%" height="15" fill="rgb(249,228,39)" fg:x="12689" fg:w="21"/><text x="92.3728%" y="159.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.13%)</title><rect x="92.1446%" y="133" width="0.1307%" height="15" fill="rgb(216,79,43)" fg:x="12692" fg:w="18"/><text x="92.3946%" y="143.50"></text></g><g><title>malloc (15 samples, 0.11%)</title><rect x="92.1664%" y="117" width="0.1089%" height="15" fill="rgb(228,95,12)" fg:x="12695" fg:w="15"/><text x="92.4164%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (161 samples, 1.17%)</title><rect x="91.1355%" y="245" width="1.1689%" height="15" fill="rgb(249,221,15)" fg:x="12553" fg:w="161"/><text x="91.3855%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (34 samples, 0.25%)</title><rect x="92.0575%" y="229" width="0.2468%" height="15" fill="rgb(233,34,13)" fg:x="12680" fg:w="34"/><text x="92.3075%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (34 samples, 0.25%)</title><rect x="92.0575%" y="213" width="0.2468%" height="15" fill="rgb(214,103,39)" fg:x="12680" fg:w="34"/><text x="92.3075%" y="223.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (4 samples, 0.03%)</title><rect x="92.2753%" y="197" width="0.0290%" height="15" fill="rgb(251,126,39)" fg:x="12710" fg:w="4"/><text x="92.5253%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (3 samples, 0.02%)</title><rect x="92.2826%" y="181" width="0.0218%" height="15" fill="rgb(214,216,36)" fg:x="12711" fg:w="3"/><text x="92.5326%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (2 samples, 0.01%)</title><rect x="92.2898%" y="165" width="0.0145%" height="15" fill="rgb(220,221,8)" fg:x="12712" fg:w="2"/><text x="92.5398%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (166 samples, 1.21%)</title><rect x="91.1064%" y="293" width="1.2052%" height="15" fill="rgb(240,216,3)" fg:x="12549" fg:w="166"/><text x="91.3564%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (165 samples, 1.20%)</title><rect x="91.1137%" y="277" width="1.1979%" height="15" fill="rgb(232,218,17)" fg:x="12550" fg:w="165"/><text x="91.3637%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (164 samples, 1.19%)</title><rect x="91.1210%" y="261" width="1.1906%" height="15" fill="rgb(229,163,45)" fg:x="12551" fg:w="164"/><text x="91.3710%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.09%)</title><rect x="92.3334%" y="277" width="0.0871%" height="15" fill="rgb(231,110,42)" fg:x="12718" fg:w="12"/><text x="92.5834%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.02%)</title><rect x="92.3987%" y="261" width="0.0218%" height="15" fill="rgb(208,170,48)" fg:x="12727" fg:w="3"/><text x="92.6487%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (5 samples, 0.04%)</title><rect x="92.4205%" y="277" width="0.0363%" height="15" fill="rgb(239,116,25)" fg:x="12730" fg:w="5"/><text x="92.6705%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (11 samples, 0.08%)</title><rect x="92.4568%" y="277" width="0.0799%" height="15" fill="rgb(219,200,50)" fg:x="12735" fg:w="11"/><text x="92.7068%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (9 samples, 0.07%)</title><rect x="92.4713%" y="261" width="0.0653%" height="15" fill="rgb(245,200,0)" fg:x="12737" fg:w="9"/><text x="92.7213%" y="271.50"></text></g><g><title>hashbrown::raw::is_full (9 samples, 0.07%)</title><rect x="92.4713%" y="245" width="0.0653%" height="15" fill="rgb(245,119,33)" fg:x="12737" fg:w="9"/><text x="92.7213%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (15 samples, 0.11%)</title><rect x="92.5439%" y="277" width="0.1089%" height="15" fill="rgb(231,125,12)" fg:x="12747" fg:w="15"/><text x="92.7939%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (12 samples, 0.09%)</title><rect x="92.6528%" y="277" width="0.0871%" height="15" fill="rgb(216,96,41)" fg:x="12762" fg:w="12"/><text x="92.9028%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.09%)</title><rect x="92.6528%" y="261" width="0.0871%" height="15" fill="rgb(248,43,45)" fg:x="12762" fg:w="12"/><text x="92.9028%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (229 samples, 1.66%)</title><rect x="91.0992%" y="309" width="1.6626%" height="15" fill="rgb(217,222,7)" fg:x="12548" fg:w="229"/><text x="91.3492%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (62 samples, 0.45%)</title><rect x="92.3116%" y="293" width="0.4501%" height="15" fill="rgb(233,28,6)" fg:x="12715" fg:w="62"/><text x="92.5616%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.02%)</title><rect x="92.7399%" y="277" width="0.0218%" height="15" fill="rgb(231,218,15)" fg:x="12774" fg:w="3"/><text x="92.9899%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.02%)</title><rect x="92.7399%" y="261" width="0.0218%" height="15" fill="rgb(226,171,48)" fg:x="12774" fg:w="3"/><text x="92.9899%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.02%)</title><rect x="92.7399%" y="245" width="0.0218%" height="15" fill="rgb(235,201,9)" fg:x="12774" fg:w="3"/><text x="92.9899%" y="255.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (343 samples, 2.49%)</title><rect x="90.3296%" y="357" width="2.4902%" height="15" fill="rgb(217,80,15)" fg:x="12442" fg:w="343"/><text x="90.5796%" y="367.50">st..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (343 samples, 2.49%)</title><rect x="90.3296%" y="341" width="2.4902%" height="15" fill="rgb(219,152,8)" fg:x="12442" fg:w="343"/><text x="90.5796%" y="351.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (339 samples, 2.46%)</title><rect x="90.3586%" y="325" width="2.4612%" height="15" fill="rgb(243,107,38)" fg:x="12446" fg:w="339"/><text x="90.6086%" y="335.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (8 samples, 0.06%)</title><rect x="92.7617%" y="309" width="0.0581%" height="15" fill="rgb(231,17,5)" fg:x="12777" fg:w="8"/><text x="93.0117%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (8 samples, 0.06%)</title><rect x="92.7617%" y="293" width="0.0581%" height="15" fill="rgb(209,25,54)" fg:x="12777" fg:w="8"/><text x="93.0117%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (5 samples, 0.04%)</title><rect x="92.7835%" y="277" width="0.0363%" height="15" fill="rgb(219,0,2)" fg:x="12780" fg:w="5"/><text x="93.0335%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (5 samples, 0.04%)</title><rect x="92.7835%" y="261" width="0.0363%" height="15" fill="rgb(246,9,5)" fg:x="12780" fg:w="5"/><text x="93.0335%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (5 samples, 0.04%)</title><rect x="92.7835%" y="245" width="0.0363%" height="15" fill="rgb(226,159,4)" fg:x="12780" fg:w="5"/><text x="93.0335%" y="255.50"></text></g><g><title>tetrs::logic::game::gravity (1,106 samples, 8.03%)</title><rect x="84.8120%" y="373" width="8.0296%" height="15" fill="rgb(219,175,34)" fg:x="11682" fg:w="1106"/><text x="85.0620%" y="383.50">tetrs::logi..</text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="92.8198%" y="357" width="0.0218%" height="15" fill="rgb(236,10,46)" fg:x="12785" fg:w="3"/><text x="93.0698%" y="367.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (3 samples, 0.02%)</title><rect x="92.8198%" y="341" width="0.0218%" height="15" fill="rgb(240,211,16)" fg:x="12785" fg:w="3"/><text x="93.0698%" y="351.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (3 samples, 0.02%)</title><rect x="92.8198%" y="325" width="0.0218%" height="15" fill="rgb(205,3,43)" fg:x="12785" fg:w="3"/><text x="93.0698%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (3 samples, 0.02%)</title><rect x="92.8198%" y="309" width="0.0218%" height="15" fill="rgb(245,7,22)" fg:x="12785" fg:w="3"/><text x="93.0698%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (3 samples, 0.02%)</title><rect x="92.8198%" y="293" width="0.0218%" height="15" fill="rgb(239,132,32)" fg:x="12785" fg:w="3"/><text x="93.0698%" y="303.50"></text></g><g><title>std::collections::hash::map::RandomState::new (3 samples, 0.02%)</title><rect x="92.8198%" y="277" width="0.0218%" height="15" fill="rgb(228,202,34)" fg:x="12785" fg:w="3"/><text x="93.0698%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.02%)</title><rect x="92.8198%" y="261" width="0.0218%" height="15" fill="rgb(254,200,22)" fg:x="12785" fg:w="3"/><text x="93.0698%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.02%)</title><rect x="92.8198%" y="245" width="0.0218%" height="15" fill="rgb(219,10,39)" fg:x="12785" fg:w="3"/><text x="93.0698%" y="255.50"></text></g><g><title>std::collections::hash::map::RandomState::new::_{{closure}} (2 samples, 0.01%)</title><rect x="92.8271%" y="229" width="0.0145%" height="15" fill="rgb(226,210,39)" fg:x="12786" fg:w="2"/><text x="93.0771%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.01%)</title><rect x="92.8271%" y="213" width="0.0145%" height="15" fill="rgb(208,219,16)" fg:x="12786" fg:w="2"/><text x="93.0771%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.01%)</title><rect x="92.8271%" y="197" width="0.0145%" height="15" fill="rgb(216,158,51)" fg:x="12786" fg:w="2"/><text x="93.0771%" y="207.50"></text></g><g><title>core::mem::replace (2 samples, 0.01%)</title><rect x="92.8271%" y="181" width="0.0145%" height="15" fill="rgb(233,14,44)" fg:x="12786" fg:w="2"/><text x="93.0771%" y="191.50"></text></g><g><title>core::ptr::write (2 samples, 0.01%)</title><rect x="92.8271%" y="165" width="0.0145%" height="15" fill="rgb(237,97,39)" fg:x="12786" fg:w="2"/><text x="93.0771%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="93.1465%" y="357" width="0.0145%" height="15" fill="rgb(218,198,43)" fg:x="12830" fg:w="2"/><text x="93.3965%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.01%)</title><rect x="93.1465%" y="341" width="0.0145%" height="15" fill="rgb(231,104,20)" fg:x="12830" fg:w="2"/><text x="93.3965%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="93.1465%" y="325" width="0.0145%" height="15" fill="rgb(254,36,13)" fg:x="12830" fg:w="2"/><text x="93.3965%" y="335.50"></text></g><g><title>__rdl_alloc (3 samples, 0.02%)</title><rect x="93.1901%" y="293" width="0.0218%" height="15" fill="rgb(248,14,50)" fg:x="12836" fg:w="3"/><text x="93.4401%" y="303.50"></text></g><g><title>core::ptr::read_volatile (6 samples, 0.04%)</title><rect x="93.2118%" y="293" width="0.0436%" height="15" fill="rgb(217,107,29)" fg:x="12839" fg:w="6"/><text x="93.4618%" y="303.50"></text></g><g><title>alloc::alloc::exchange_malloc (55 samples, 0.40%)</title><rect x="93.1610%" y="357" width="0.3993%" height="15" fill="rgb(251,169,33)" fg:x="12832" fg:w="55"/><text x="93.4110%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.38%)</title><rect x="93.1755%" y="341" width="0.3848%" height="15" fill="rgb(217,108,32)" fg:x="12834" fg:w="53"/><text x="93.4255%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.38%)</title><rect x="93.1755%" y="325" width="0.3848%" height="15" fill="rgb(219,66,42)" fg:x="12834" fg:w="53"/><text x="93.4255%" y="335.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.38%)</title><rect x="93.1755%" y="309" width="0.3848%" height="15" fill="rgb(206,180,7)" fg:x="12834" fg:w="53"/><text x="93.4255%" y="319.50"></text></g><g><title>malloc (42 samples, 0.30%)</title><rect x="93.2554%" y="293" width="0.3049%" height="15" fill="rgb(208,226,31)" fg:x="12845" fg:w="42"/><text x="93.5054%" y="303.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.01%)</title><rect x="93.5749%" y="229" width="0.0145%" height="15" fill="rgb(218,26,49)" fg:x="12889" fg:w="2"/><text x="93.8249%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.01%)</title><rect x="93.5749%" y="213" width="0.0145%" height="15" fill="rgb(233,197,48)" fg:x="12889" fg:w="2"/><text x="93.8249%" y="223.50"></text></g><g><title>__rust_dealloc (6 samples, 0.04%)</title><rect x="93.5894%" y="229" width="0.0436%" height="15" fill="rgb(252,181,51)" fg:x="12891" fg:w="6"/><text x="93.8394%" y="239.50"></text></g><g><title>tetrs::logic::game::is_connected (158 samples, 1.15%)</title><rect x="92.8416%" y="373" width="1.1471%" height="15" fill="rgb(253,90,19)" fg:x="12788" fg:w="158"/><text x="93.0916%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(i8,i8)&gt;&gt; (59 samples, 0.43%)</title><rect x="93.5603%" y="357" width="0.4283%" height="15" fill="rgb(215,171,30)" fg:x="12887" fg:w="59"/><text x="93.8103%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.43%)</title><rect x="93.5603%" y="341" width="0.4283%" height="15" fill="rgb(214,222,9)" fg:x="12887" fg:w="59"/><text x="93.8103%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(i8,i8),alloc::alloc::Global&gt;&gt; (59 samples, 0.43%)</title><rect x="93.5603%" y="325" width="0.4283%" height="15" fill="rgb(223,3,22)" fg:x="12887" fg:w="59"/><text x="93.8103%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.43%)</title><rect x="93.5603%" y="309" width="0.4283%" height="15" fill="rgb(225,196,46)" fg:x="12887" fg:w="59"/><text x="93.8103%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(i8,i8)&gt;&gt; (59 samples, 0.43%)</title><rect x="93.5603%" y="293" width="0.4283%" height="15" fill="rgb(209,110,37)" fg:x="12887" fg:w="59"/><text x="93.8103%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.43%)</title><rect x="93.5603%" y="277" width="0.4283%" height="15" fill="rgb(249,89,12)" fg:x="12887" fg:w="59"/><text x="93.8103%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (59 samples, 0.43%)</title><rect x="93.5603%" y="261" width="0.4283%" height="15" fill="rgb(226,27,33)" fg:x="12887" fg:w="59"/><text x="93.8103%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (59 samples, 0.43%)</title><rect x="93.5603%" y="245" width="0.4283%" height="15" fill="rgb(213,82,22)" fg:x="12887" fg:w="59"/><text x="93.8103%" y="255.50"></text></g><g><title>cfree (49 samples, 0.36%)</title><rect x="93.6329%" y="229" width="0.3557%" height="15" fill="rgb(248,140,0)" fg:x="12897" fg:w="49"/><text x="93.8829%" y="239.50"></text></g><g><title>[libc.so.6] (24 samples, 0.17%)</title><rect x="93.8144%" y="213" width="0.1742%" height="15" fill="rgb(228,106,3)" fg:x="12922" fg:w="24"/><text x="94.0644%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="94.1339%" y="357" width="0.0145%" height="15" fill="rgb(209,23,37)" fg:x="12966" fg:w="2"/><text x="94.3839%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.04%)</title><rect x="94.1484%" y="357" width="0.0436%" height="15" fill="rgb(241,93,50)" fg:x="12968" fg:w="6"/><text x="94.3984%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.04%)</title><rect x="94.1484%" y="341" width="0.0436%" height="15" fill="rgb(253,46,43)" fg:x="12968" fg:w="6"/><text x="94.3984%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.04%)</title><rect x="94.1484%" y="325" width="0.0436%" height="15" fill="rgb(226,206,43)" fg:x="12968" fg:w="6"/><text x="94.3984%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="94.1920%" y="357" width="0.0145%" height="15" fill="rgb(217,54,7)" fg:x="12974" fg:w="2"/><text x="94.4420%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (2 samples, 0.01%)</title><rect x="94.1920%" y="341" width="0.0145%" height="15" fill="rgb(223,5,52)" fg:x="12974" fg:w="2"/><text x="94.4420%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (2 samples, 0.01%)</title><rect x="94.1920%" y="325" width="0.0145%" height="15" fill="rgb(206,52,46)" fg:x="12974" fg:w="2"/><text x="94.4420%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (4 samples, 0.03%)</title><rect x="94.2065%" y="357" width="0.0290%" height="15" fill="rgb(253,136,11)" fg:x="12976" fg:w="4"/><text x="94.4565%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.04%)</title><rect x="94.3952%" y="341" width="0.0436%" height="15" fill="rgb(208,106,33)" fg:x="13002" fg:w="6"/><text x="94.6452%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.04%)</title><rect x="94.3952%" y="325" width="0.0436%" height="15" fill="rgb(206,54,4)" fg:x="13002" fg:w="6"/><text x="94.6452%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.04%)</title><rect x="94.3952%" y="309" width="0.0436%" height="15" fill="rgb(213,3,15)" fg:x="13002" fg:w="6"/><text x="94.6452%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="94.4461%" y="341" width="0.0145%" height="15" fill="rgb(252,211,39)" fg:x="13009" fg:w="2"/><text x="94.6961%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (2 samples, 0.01%)</title><rect x="94.4461%" y="325" width="0.0145%" height="15" fill="rgb(223,6,36)" fg:x="13009" fg:w="2"/><text x="94.6961%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (2 samples, 0.01%)</title><rect x="94.4461%" y="309" width="0.0145%" height="15" fill="rgb(252,169,45)" fg:x="13009" fg:w="2"/><text x="94.6961%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::backward_unchecked (2 samples, 0.01%)</title><rect x="94.4461%" y="293" width="0.0145%" height="15" fill="rgb(212,48,26)" fg:x="13009" fg:w="2"/><text x="94.6961%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_sub (2 samples, 0.01%)</title><rect x="94.4461%" y="277" width="0.0145%" height="15" fill="rgb(251,102,48)" fg:x="13009" fg:w="2"/><text x="94.6961%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (20 samples, 0.15%)</title><rect x="94.4969%" y="277" width="0.1452%" height="15" fill="rgb(243,208,16)" fg:x="13016" fg:w="20"/><text x="94.7469%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (20 samples, 0.15%)</title><rect x="94.4969%" y="261" width="0.1452%" height="15" fill="rgb(219,96,24)" fg:x="13016" fg:w="20"/><text x="94.7469%" y="271.50"></text></g><g><title>alloc::alloc::realloc (20 samples, 0.15%)</title><rect x="94.4969%" y="245" width="0.1452%" height="15" fill="rgb(219,33,29)" fg:x="13016" fg:w="20"/><text x="94.7469%" y="255.50"></text></g><g><title>realloc (20 samples, 0.15%)</title><rect x="94.4969%" y="229" width="0.1452%" height="15" fill="rgb(223,176,5)" fg:x="13016" fg:w="20"/><text x="94.7469%" y="239.50"></text></g><g><title>[libc.so.6] (18 samples, 0.13%)</title><rect x="94.5114%" y="213" width="0.1307%" height="15" fill="rgb(228,140,14)" fg:x="13018" fg:w="18"/><text x="94.7614%" y="223.50"></text></g><g><title>[libc.so.6] (13 samples, 0.09%)</title><rect x="94.5477%" y="197" width="0.0944%" height="15" fill="rgb(217,179,31)" fg:x="13023" fg:w="13"/><text x="94.7977%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="94.6203%" y="181" width="0.0218%" height="15" fill="rgb(230,9,30)" fg:x="13033" fg:w="3"/><text x="94.8703%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="94.6421%" y="277" width="0.0145%" height="15" fill="rgb(230,136,20)" fg:x="13036" fg:w="2"/><text x="94.8921%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (29 samples, 0.21%)</title><rect x="94.4969%" y="293" width="0.2105%" height="15" fill="rgb(215,210,22)" fg:x="13016" fg:w="29"/><text x="94.7469%" y="303.50"></text></g><g><title>malloc (7 samples, 0.05%)</title><rect x="94.6566%" y="277" width="0.0508%" height="15" fill="rgb(218,43,5)" fg:x="13038" fg:w="7"/><text x="94.9066%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (35 samples, 0.25%)</title><rect x="94.4606%" y="341" width="0.2541%" height="15" fill="rgb(216,11,5)" fg:x="13011" fg:w="35"/><text x="94.7106%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (32 samples, 0.23%)</title><rect x="94.4824%" y="325" width="0.2323%" height="15" fill="rgb(209,82,29)" fg:x="13014" fg:w="32"/><text x="94.7324%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (32 samples, 0.23%)</title><rect x="94.4824%" y="309" width="0.2323%" height="15" fill="rgb(244,115,12)" fg:x="13014" fg:w="32"/><text x="94.7324%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(usize,usize)&gt;&gt; (6 samples, 0.04%)</title><rect x="94.7219%" y="341" width="0.0436%" height="15" fill="rgb(222,82,18)" fg:x="13047" fg:w="6"/><text x="94.9719%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="94.7219%" y="325" width="0.0436%" height="15" fill="rgb(249,227,8)" fg:x="13047" fg:w="6"/><text x="94.9719%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(usize,usize),alloc::alloc::Global&gt;&gt; (6 samples, 0.04%)</title><rect x="94.7219%" y="309" width="0.0436%" height="15" fill="rgb(253,141,45)" fg:x="13047" fg:w="6"/><text x="94.9719%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="94.7219%" y="293" width="0.0436%" height="15" fill="rgb(234,184,4)" fg:x="13047" fg:w="6"/><text x="94.9719%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (6 samples, 0.04%)</title><rect x="94.7219%" y="277" width="0.0436%" height="15" fill="rgb(218,194,23)" fg:x="13047" fg:w="6"/><text x="94.9719%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.04%)</title><rect x="94.7219%" y="261" width="0.0436%" height="15" fill="rgb(235,66,41)" fg:x="13047" fg:w="6"/><text x="94.9719%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.04%)</title><rect x="94.7219%" y="245" width="0.0436%" height="15" fill="rgb(245,217,1)" fg:x="13047" fg:w="6"/><text x="94.9719%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.04%)</title><rect x="94.7219%" y="229" width="0.0436%" height="15" fill="rgb(229,91,1)" fg:x="13047" fg:w="6"/><text x="94.9719%" y="239.50"></text></g><g><title>cfree (6 samples, 0.04%)</title><rect x="94.7219%" y="213" width="0.0436%" height="15" fill="rgb(207,101,30)" fg:x="13047" fg:w="6"/><text x="94.9719%" y="223.50"></text></g><g><title>[libc.so.6] (5 samples, 0.04%)</title><rect x="94.7292%" y="197" width="0.0363%" height="15" fill="rgb(223,82,49)" fg:x="13048" fg:w="5"/><text x="94.9792%" y="207.50"></text></g><g><title>[libc.so.6] (4 samples, 0.03%)</title><rect x="94.7365%" y="181" width="0.0290%" height="15" fill="rgb(218,167,17)" fg:x="13049" fg:w="4"/><text x="94.9865%" y="191.50"></text></g><g><title>[libc.so.6] (3 samples, 0.02%)</title><rect x="94.7437%" y="165" width="0.0218%" height="15" fill="rgb(208,103,14)" fg:x="13050" fg:w="3"/><text x="94.9937%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="94.7655%" y="229" width="0.0363%" height="15" fill="rgb(238,20,8)" fg:x="13053" fg:w="5"/><text x="95.0155%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="94.7655%" y="213" width="0.0363%" height="15" fill="rgb(218,80,54)" fg:x="13053" fg:w="5"/><text x="95.0155%" y="223.50"></text></g><g><title>cfree (4 samples, 0.03%)</title><rect x="94.7728%" y="197" width="0.0290%" height="15" fill="rgb(240,144,17)" fg:x="13054" fg:w="4"/><text x="95.0228%" y="207.50"></text></g><g><title>[libc.so.6] (2 samples, 0.01%)</title><rect x="94.7873%" y="181" width="0.0145%" height="15" fill="rgb(245,27,50)" fg:x="13056" fg:w="2"/><text x="95.0373%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16&gt;&gt; (7 samples, 0.05%)</title><rect x="94.7655%" y="341" width="0.0508%" height="15" fill="rgb(251,51,7)" fg:x="13053" fg:w="7"/><text x="95.0155%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,std::collections::hash::map::RandomState&gt;&gt; (7 samples, 0.05%)</title><rect x="94.7655%" y="325" width="0.0508%" height="15" fill="rgb(245,217,29)" fg:x="13053" fg:w="7"/><text x="95.0155%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),std::collections::hash::map::RandomState&gt;&gt; (7 samples, 0.05%)</title><rect x="94.7655%" y="309" width="0.0508%" height="15" fill="rgb(221,176,29)" fg:x="13053" fg:w="7"/><text x="95.0155%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (7 samples, 0.05%)</title><rect x="94.7655%" y="293" width="0.0508%" height="15" fill="rgb(212,180,24)" fg:x="13053" fg:w="7"/><text x="95.0155%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.05%)</title><rect x="94.7655%" y="277" width="0.0508%" height="15" fill="rgb(254,24,2)" fg:x="13053" fg:w="7"/><text x="95.0155%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (7 samples, 0.05%)</title><rect x="94.7655%" y="261" width="0.0508%" height="15" fill="rgb(230,100,2)" fg:x="13053" fg:w="7"/><text x="95.0155%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (7 samples, 0.05%)</title><rect x="94.7655%" y="245" width="0.0508%" height="15" fill="rgb(219,142,25)" fg:x="13053" fg:w="7"/><text x="95.0155%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (2 samples, 0.01%)</title><rect x="94.8018%" y="229" width="0.0145%" height="15" fill="rgb(240,73,43)" fg:x="13058" fg:w="2"/><text x="95.0518%" y="239.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (2 samples, 0.01%)</title><rect x="94.8018%" y="213" width="0.0145%" height="15" fill="rgb(214,114,15)" fg:x="13058" fg:w="2"/><text x="95.0518%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.02%)</title><rect x="95.0196%" y="181" width="0.0218%" height="15" fill="rgb(207,130,4)" fg:x="13088" fg:w="3"/><text x="95.2696%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.05%)</title><rect x="95.0051%" y="197" width="0.0508%" height="15" fill="rgb(221,25,40)" fg:x="13086" fg:w="7"/><text x="95.2551%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.01%)</title><rect x="95.0414%" y="181" width="0.0145%" height="15" fill="rgb(241,184,7)" fg:x="13091" fg:w="2"/><text x="95.2914%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.14%)</title><rect x="95.0995%" y="181" width="0.1379%" height="15" fill="rgb(235,159,4)" fg:x="13099" fg:w="19"/><text x="95.3495%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (55 samples, 0.40%)</title><rect x="94.8817%" y="245" width="0.3993%" height="15" fill="rgb(214,87,48)" fg:x="13069" fg:w="55"/><text x="95.1317%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (55 samples, 0.40%)</title><rect x="94.8817%" y="229" width="0.3993%" height="15" fill="rgb(246,198,24)" fg:x="13069" fg:w="55"/><text x="95.1317%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (55 samples, 0.40%)</title><rect x="94.8817%" y="213" width="0.3993%" height="15" fill="rgb(209,66,40)" fg:x="13069" fg:w="55"/><text x="95.1317%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (31 samples, 0.23%)</title><rect x="95.0559%" y="197" width="0.2251%" height="15" fill="rgb(233,147,39)" fg:x="13093" fg:w="31"/><text x="95.3059%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.04%)</title><rect x="95.2374%" y="181" width="0.0436%" height="15" fill="rgb(231,145,52)" fg:x="13118" fg:w="6"/><text x="95.4874%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (7 samples, 0.05%)</title><rect x="95.2810%" y="245" width="0.0508%" height="15" fill="rgb(206,20,26)" fg:x="13124" fg:w="7"/><text x="95.5310%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.02%)</title><rect x="95.3100%" y="229" width="0.0218%" height="15" fill="rgb(238,220,4)" fg:x="13128" fg:w="3"/><text x="95.5600%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.02%)</title><rect x="95.3100%" y="213" width="0.0218%" height="15" fill="rgb(252,195,42)" fg:x="13128" fg:w="3"/><text x="95.5600%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.02%)</title><rect x="95.3100%" y="197" width="0.0218%" height="15" fill="rgb(209,10,6)" fg:x="13128" fg:w="3"/><text x="95.5600%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.15%)</title><rect x="95.3318%" y="197" width="0.1452%" height="15" fill="rgb(229,3,52)" fg:x="13131" fg:w="20"/><text x="95.5818%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (19 samples, 0.14%)</title><rect x="95.3390%" y="181" width="0.1379%" height="15" fill="rgb(253,49,37)" fg:x="13132" fg:w="19"/><text x="95.5890%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.14%)</title><rect x="95.3390%" y="165" width="0.1379%" height="15" fill="rgb(240,103,49)" fg:x="13132" fg:w="19"/><text x="95.5890%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (10 samples, 0.07%)</title><rect x="95.4044%" y="149" width="0.0726%" height="15" fill="rgb(250,182,30)" fg:x="13141" fg:w="10"/><text x="95.6544%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="95.4625%" y="133" width="0.0145%" height="15" fill="rgb(248,8,30)" fg:x="13149" fg:w="2"/><text x="95.7125%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (88 samples, 0.64%)</title><rect x="94.8454%" y="277" width="0.6389%" height="15" fill="rgb(237,120,30)" fg:x="13064" fg:w="88"/><text x="95.0954%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (88 samples, 0.64%)</title><rect x="94.8454%" y="261" width="0.6389%" height="15" fill="rgb(221,146,34)" fg:x="13064" fg:w="88"/><text x="95.0954%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (21 samples, 0.15%)</title><rect x="95.3318%" y="245" width="0.1525%" height="15" fill="rgb(242,55,13)" fg:x="13131" fg:w="21"/><text x="95.5818%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (21 samples, 0.15%)</title><rect x="95.3318%" y="229" width="0.1525%" height="15" fill="rgb(242,112,31)" fg:x="13131" fg:w="21"/><text x="95.5818%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u16 (21 samples, 0.15%)</title><rect x="95.3318%" y="213" width="0.1525%" height="15" fill="rgb(249,192,27)" fg:x="13131" fg:w="21"/><text x="95.5818%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.13%)</title><rect x="95.5714%" y="229" width="0.1307%" height="15" fill="rgb(208,204,44)" fg:x="13164" fg:w="18"/><text x="95.8214%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (2 samples, 0.01%)</title><rect x="95.6875%" y="213" width="0.0145%" height="15" fill="rgb(208,93,54)" fg:x="13180" fg:w="2"/><text x="95.9375%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5 samples, 0.04%)</title><rect x="95.7020%" y="229" width="0.0363%" height="15" fill="rgb(242,1,31)" fg:x="13182" fg:w="5"/><text x="95.9520%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (5 samples, 0.04%)</title><rect x="95.7020%" y="213" width="0.0363%" height="15" fill="rgb(241,83,25)" fg:x="13182" fg:w="5"/><text x="95.9520%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (5 samples, 0.04%)</title><rect x="95.7020%" y="197" width="0.0363%" height="15" fill="rgb(205,169,50)" fg:x="13182" fg:w="5"/><text x="95.9520%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.04%)</title><rect x="95.7020%" y="181" width="0.0363%" height="15" fill="rgb(239,186,37)" fg:x="13182" fg:w="5"/><text x="95.9520%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (17 samples, 0.12%)</title><rect x="95.7383%" y="229" width="0.1234%" height="15" fill="rgb(205,221,10)" fg:x="13187" fg:w="17"/><text x="95.9883%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.04%)</title><rect x="95.8618%" y="229" width="0.0363%" height="15" fill="rgb(218,196,15)" fg:x="13204" fg:w="5"/><text x="96.1118%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.04%)</title><rect x="95.8618%" y="213" width="0.0363%" height="15" fill="rgb(218,196,35)" fg:x="13204" fg:w="5"/><text x="96.1118%" y="223.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (149 samples, 1.08%)</title><rect x="94.8236%" y="341" width="1.0817%" height="15" fill="rgb(233,63,24)" fg:x="13061" fg:w="149"/><text x="95.0736%" y="351.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (149 samples, 1.08%)</title><rect x="94.8236%" y="325" width="1.0817%" height="15" fill="rgb(225,8,4)" fg:x="13061" fg:w="149"/><text x="95.0736%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (149 samples, 1.08%)</title><rect x="94.8236%" y="309" width="1.0817%" height="15" fill="rgb(234,105,35)" fg:x="13061" fg:w="149"/><text x="95.0736%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (149 samples, 1.08%)</title><rect x="94.8236%" y="293" width="1.0817%" height="15" fill="rgb(236,21,32)" fg:x="13061" fg:w="149"/><text x="95.0736%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (58 samples, 0.42%)</title><rect x="95.4842%" y="277" width="0.4211%" height="15" fill="rgb(228,109,6)" fg:x="13152" fg:w="58"/><text x="95.7342%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (58 samples, 0.42%)</title><rect x="95.4842%" y="261" width="0.4211%" height="15" fill="rgb(229,215,31)" fg:x="13152" fg:w="58"/><text x="95.7342%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (58 samples, 0.42%)</title><rect x="95.4842%" y="245" width="0.4211%" height="15" fill="rgb(221,52,54)" fg:x="13152" fg:w="58"/><text x="95.7342%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.02%)</title><rect x="96.0142%" y="197" width="0.0218%" height="15" fill="rgb(252,129,43)" fg:x="13225" fg:w="3"/><text x="96.2642%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.04%)</title><rect x="96.0070%" y="213" width="0.0436%" height="15" fill="rgb(248,183,27)" fg:x="13224" fg:w="6"/><text x="96.2570%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.01%)</title><rect x="96.0360%" y="197" width="0.0145%" height="15" fill="rgb(250,0,22)" fg:x="13228" fg:w="2"/><text x="96.2860%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (24 samples, 0.17%)</title><rect x="95.9416%" y="261" width="0.1742%" height="15" fill="rgb(213,166,10)" fg:x="13215" fg:w="24"/><text x="96.1916%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (24 samples, 0.17%)</title><rect x="95.9416%" y="245" width="0.1742%" height="15" fill="rgb(207,163,36)" fg:x="13215" fg:w="24"/><text x="96.1916%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (24 samples, 0.17%)</title><rect x="95.9416%" y="229" width="0.1742%" height="15" fill="rgb(208,122,22)" fg:x="13215" fg:w="24"/><text x="96.1916%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.07%)</title><rect x="96.0505%" y="213" width="0.0653%" height="15" fill="rgb(207,104,49)" fg:x="13230" fg:w="9"/><text x="96.3005%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (8 samples, 0.06%)</title><rect x="96.0578%" y="197" width="0.0581%" height="15" fill="rgb(248,211,50)" fg:x="13231" fg:w="8"/><text x="96.3078%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.04%)</title><rect x="96.1159%" y="261" width="0.0363%" height="15" fill="rgb(217,13,45)" fg:x="13239" fg:w="5"/><text x="96.3659%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.01%)</title><rect x="96.1377%" y="245" width="0.0145%" height="15" fill="rgb(211,216,49)" fg:x="13242" fg:w="2"/><text x="96.3877%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.01%)</title><rect x="96.1377%" y="229" width="0.0145%" height="15" fill="rgb(221,58,53)" fg:x="13242" fg:w="2"/><text x="96.3877%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.01%)</title><rect x="96.1377%" y="213" width="0.0145%" height="15" fill="rgb(220,112,41)" fg:x="13242" fg:w="2"/><text x="96.3877%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (41 samples, 0.30%)</title><rect x="95.9198%" y="293" width="0.2977%" height="15" fill="rgb(236,38,28)" fg:x="13212" fg:w="41"/><text x="96.1698%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41 samples, 0.30%)</title><rect x="95.9198%" y="277" width="0.2977%" height="15" fill="rgb(227,195,22)" fg:x="13212" fg:w="41"/><text x="96.1698%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9 samples, 0.07%)</title><rect x="96.1522%" y="261" width="0.0653%" height="15" fill="rgb(214,55,33)" fg:x="13244" fg:w="9"/><text x="96.4022%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (9 samples, 0.07%)</title><rect x="96.1522%" y="245" width="0.0653%" height="15" fill="rgb(248,80,13)" fg:x="13244" fg:w="9"/><text x="96.4022%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u16 (9 samples, 0.07%)</title><rect x="96.1522%" y="229" width="0.0653%" height="15" fill="rgb(238,52,6)" fg:x="13244" fg:w="9"/><text x="96.4022%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.06%)</title><rect x="96.1594%" y="213" width="0.0581%" height="15" fill="rgb(224,198,47)" fg:x="13245" fg:w="8"/><text x="96.4094%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.06%)</title><rect x="96.1594%" y="197" width="0.0581%" height="15" fill="rgb(233,171,20)" fg:x="13245" fg:w="8"/><text x="96.4094%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.06%)</title><rect x="96.1594%" y="181" width="0.0581%" height="15" fill="rgb(241,30,25)" fg:x="13245" fg:w="8"/><text x="96.4094%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.04%)</title><rect x="96.1740%" y="165" width="0.0436%" height="15" fill="rgb(207,171,38)" fg:x="13247" fg:w="6"/><text x="96.4240%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.02%)</title><rect x="96.2974%" y="101" width="0.0218%" height="15" fill="rgb(234,70,1)" fg:x="13264" fg:w="3"/><text x="96.5474%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.01%)</title><rect x="96.3046%" y="85" width="0.0145%" height="15" fill="rgb(232,178,18)" fg:x="13265" fg:w="2"/><text x="96.5546%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.03%)</title><rect x="96.3264%" y="85" width="0.0290%" height="15" fill="rgb(241,78,40)" fg:x="13268" fg:w="4"/><text x="96.5764%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 0.09%)</title><rect x="96.2683%" y="149" width="0.0944%" height="15" fill="rgb(222,35,25)" fg:x="13260" fg:w="13"/><text x="96.5183%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 0.09%)</title><rect x="96.2683%" y="133" width="0.0944%" height="15" fill="rgb(207,92,16)" fg:x="13260" fg:w="13"/><text x="96.5183%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 0.09%)</title><rect x="96.2683%" y="117" width="0.0944%" height="15" fill="rgb(216,59,51)" fg:x="13260" fg:w="13"/><text x="96.5183%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.04%)</title><rect x="96.3192%" y="101" width="0.0436%" height="15" fill="rgb(213,80,28)" fg:x="13267" fg:w="6"/><text x="96.5692%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (16 samples, 0.12%)</title><rect x="96.2611%" y="213" width="0.1162%" height="15" fill="rgb(220,93,7)" fg:x="13259" fg:w="16"/><text x="96.5111%" y="223.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (16 samples, 0.12%)</title><rect x="96.2611%" y="197" width="0.1162%" height="15" fill="rgb(225,24,44)" fg:x="13259" fg:w="16"/><text x="96.5111%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.12%)</title><rect x="96.2611%" y="181" width="0.1162%" height="15" fill="rgb(243,74,40)" fg:x="13259" fg:w="16"/><text x="96.5111%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.12%)</title><rect x="96.2611%" y="165" width="0.1162%" height="15" fill="rgb(228,39,7)" fg:x="13259" fg:w="16"/><text x="96.5111%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.01%)</title><rect x="96.3627%" y="149" width="0.0145%" height="15" fill="rgb(227,79,8)" fg:x="13273" fg:w="2"/><text x="96.6127%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (2 samples, 0.01%)</title><rect x="96.3627%" y="133" width="0.0145%" height="15" fill="rgb(236,58,11)" fg:x="13273" fg:w="2"/><text x="96.6127%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u16 (2 samples, 0.01%)</title><rect x="96.3627%" y="117" width="0.0145%" height="15" fill="rgb(249,63,35)" fg:x="13273" fg:w="2"/><text x="96.6127%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="96.3627%" y="101" width="0.0145%" height="15" fill="rgb(252,114,16)" fg:x="13273" fg:w="2"/><text x="96.6127%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.03%)</title><rect x="96.3918%" y="165" width="0.0290%" height="15" fill="rgb(254,151,24)" fg:x="13277" fg:w="4"/><text x="96.6418%" y="175.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (4 samples, 0.03%)</title><rect x="96.3918%" y="149" width="0.0290%" height="15" fill="rgb(253,54,39)" fg:x="13277" fg:w="4"/><text x="96.6418%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (13 samples, 0.09%)</title><rect x="96.3772%" y="181" width="0.0944%" height="15" fill="rgb(243,25,45)" fg:x="13275" fg:w="13"/><text x="96.6272%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (7 samples, 0.05%)</title><rect x="96.4208%" y="165" width="0.0508%" height="15" fill="rgb(234,134,9)" fg:x="13281" fg:w="7"/><text x="96.6708%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.05%)</title><rect x="96.4208%" y="149" width="0.0508%" height="15" fill="rgb(227,166,31)" fg:x="13281" fg:w="7"/><text x="96.6708%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (15 samples, 0.11%)</title><rect x="96.3772%" y="213" width="0.1089%" height="15" fill="rgb(245,143,41)" fg:x="13275" fg:w="15"/><text x="96.6272%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (15 samples, 0.11%)</title><rect x="96.3772%" y="197" width="0.1089%" height="15" fill="rgb(238,181,32)" fg:x="13275" fg:w="15"/><text x="96.6272%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (2 samples, 0.01%)</title><rect x="96.4716%" y="181" width="0.0145%" height="15" fill="rgb(224,113,18)" fg:x="13288" fg:w="2"/><text x="96.7216%" y="191.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.03%)</title><rect x="96.4934%" y="165" width="0.0290%" height="15" fill="rgb(240,229,28)" fg:x="13291" fg:w="4"/><text x="96.7434%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.03%)</title><rect x="96.4934%" y="149" width="0.0290%" height="15" fill="rgb(250,185,3)" fg:x="13291" fg:w="4"/><text x="96.7434%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.03%)</title><rect x="96.4934%" y="133" width="0.0290%" height="15" fill="rgb(212,59,25)" fg:x="13291" fg:w="4"/><text x="96.7434%" y="143.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.03%)</title><rect x="96.4934%" y="117" width="0.0290%" height="15" fill="rgb(221,87,20)" fg:x="13291" fg:w="4"/><text x="96.7434%" y="127.50"></text></g><g><title>malloc (2 samples, 0.01%)</title><rect x="96.5079%" y="101" width="0.0145%" height="15" fill="rgb(213,74,28)" fg:x="13293" fg:w="2"/><text x="96.7579%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (5 samples, 0.04%)</title><rect x="96.4934%" y="181" width="0.0363%" height="15" fill="rgb(224,132,34)" fg:x="13291" fg:w="5"/><text x="96.7434%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (39 samples, 0.28%)</title><rect x="96.2538%" y="229" width="0.2831%" height="15" fill="rgb(222,101,24)" fg:x="13258" fg:w="39"/><text x="96.5038%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (7 samples, 0.05%)</title><rect x="96.4861%" y="213" width="0.0508%" height="15" fill="rgb(254,142,4)" fg:x="13290" fg:w="7"/><text x="96.7361%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (7 samples, 0.05%)</title><rect x="96.4861%" y="197" width="0.0508%" height="15" fill="rgb(230,229,49)" fg:x="13290" fg:w="7"/><text x="96.7361%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (43 samples, 0.31%)</title><rect x="96.2320%" y="277" width="0.3122%" height="15" fill="rgb(238,70,47)" fg:x="13255" fg:w="43"/><text x="96.4820%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (42 samples, 0.30%)</title><rect x="96.2393%" y="261" width="0.3049%" height="15" fill="rgb(231,160,17)" fg:x="13256" fg:w="42"/><text x="96.4893%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (42 samples, 0.30%)</title><rect x="96.2393%" y="245" width="0.3049%" height="15" fill="rgb(218,68,53)" fg:x="13256" fg:w="42"/><text x="96.4893%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.04%)</title><rect x="96.5442%" y="261" width="0.0436%" height="15" fill="rgb(236,111,10)" fg:x="13298" fg:w="6"/><text x="96.7942%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (5 samples, 0.04%)</title><rect x="96.5878%" y="261" width="0.0363%" height="15" fill="rgb(224,34,41)" fg:x="13304" fg:w="5"/><text x="96.8378%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (4 samples, 0.03%)</title><rect x="96.5950%" y="245" width="0.0290%" height="15" fill="rgb(241,118,19)" fg:x="13305" fg:w="4"/><text x="96.8450%" y="255.50"></text></g><g><title>hashbrown::raw::is_full (4 samples, 0.03%)</title><rect x="96.5950%" y="229" width="0.0290%" height="15" fill="rgb(238,129,25)" fg:x="13305" fg:w="4"/><text x="96.8450%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (6 samples, 0.04%)</title><rect x="96.6241%" y="261" width="0.0436%" height="15" fill="rgb(238,22,31)" fg:x="13309" fg:w="6"/><text x="96.8741%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (64 samples, 0.46%)</title><rect x="96.2248%" y="293" width="0.4646%" height="15" fill="rgb(222,174,48)" fg:x="13254" fg:w="64"/><text x="96.4748%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (20 samples, 0.15%)</title><rect x="96.5442%" y="277" width="0.1452%" height="15" fill="rgb(206,152,40)" fg:x="13298" fg:w="20"/><text x="96.7942%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.02%)</title><rect x="96.6676%" y="261" width="0.0218%" height="15" fill="rgb(218,99,54)" fg:x="13315" fg:w="3"/><text x="96.9176%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.02%)</title><rect x="96.6676%" y="245" width="0.0218%" height="15" fill="rgb(220,174,26)" fg:x="13315" fg:w="3"/><text x="96.9176%" y="255.50"></text></g><g><title>tetrs::logic::game::gravity (343 samples, 2.49%)</title><rect x="94.2428%" y="357" width="2.4902%" height="15" fill="rgb(245,116,9)" fg:x="12981" fg:w="343"/><text x="94.4928%" y="367.50">te..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (114 samples, 0.83%)</title><rect x="95.9053%" y="341" width="0.8276%" height="15" fill="rgb(209,72,35)" fg:x="13210" fg:w="114"/><text x="96.1553%" y="351.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (114 samples, 0.83%)</title><rect x="95.9053%" y="325" width="0.8276%" height="15" fill="rgb(226,126,21)" fg:x="13210" fg:w="114"/><text x="96.1553%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (113 samples, 0.82%)</title><rect x="95.9126%" y="309" width="0.8204%" height="15" fill="rgb(227,192,1)" fg:x="13211" fg:w="113"/><text x="96.1626%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (6 samples, 0.04%)</title><rect x="96.6894%" y="293" width="0.0436%" height="15" fill="rgb(237,180,29)" fg:x="13318" fg:w="6"/><text x="96.9394%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (6 samples, 0.04%)</title><rect x="96.6894%" y="277" width="0.0436%" height="15" fill="rgb(230,197,35)" fg:x="13318" fg:w="6"/><text x="96.9394%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (3 samples, 0.02%)</title><rect x="96.7112%" y="261" width="0.0218%" height="15" fill="rgb(246,193,31)" fg:x="13321" fg:w="3"/><text x="96.9612%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (3 samples, 0.02%)</title><rect x="96.7112%" y="245" width="0.0218%" height="15" fill="rgb(241,36,4)" fg:x="13321" fg:w="3"/><text x="96.9612%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.01%)</title><rect x="96.7185%" y="229" width="0.0145%" height="15" fill="rgb(241,130,17)" fg:x="13322" fg:w="2"/><text x="96.9685%" y="239.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.01%)</title><rect x="96.9290%" y="277" width="0.0145%" height="15" fill="rgb(206,137,32)" fg:x="13351" fg:w="2"/><text x="97.1790%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (29 samples, 0.21%)</title><rect x="96.9072%" y="341" width="0.2105%" height="15" fill="rgb(237,228,51)" fg:x="13348" fg:w="29"/><text x="97.1572%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.20%)</title><rect x="96.9217%" y="325" width="0.1960%" height="15" fill="rgb(243,6,42)" fg:x="13350" fg:w="27"/><text x="97.1717%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.20%)</title><rect x="96.9217%" y="309" width="0.1960%" height="15" fill="rgb(251,74,28)" fg:x="13350" fg:w="27"/><text x="97.1717%" y="319.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.20%)</title><rect x="96.9217%" y="293" width="0.1960%" height="15" fill="rgb(218,20,49)" fg:x="13350" fg:w="27"/><text x="97.1717%" y="303.50"></text></g><g><title>malloc (24 samples, 0.17%)</title><rect x="96.9435%" y="277" width="0.1742%" height="15" fill="rgb(238,28,14)" fg:x="13353" fg:w="24"/><text x="97.1935%" y="287.50"></text></g><g><title>tetrs::logic::game::is_connected (77 samples, 0.56%)</title><rect x="96.7330%" y="357" width="0.5590%" height="15" fill="rgb(229,40,46)" fg:x="13324" fg:w="77"/><text x="96.9830%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(i8,i8)&gt;&gt; (24 samples, 0.17%)</title><rect x="97.1178%" y="341" width="0.1742%" height="15" fill="rgb(244,195,20)" fg:x="13377" fg:w="24"/><text x="97.3678%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.17%)</title><rect x="97.1178%" y="325" width="0.1742%" height="15" fill="rgb(253,56,35)" fg:x="13377" fg:w="24"/><text x="97.3678%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(i8,i8),alloc::alloc::Global&gt;&gt; (24 samples, 0.17%)</title><rect x="97.1178%" y="309" width="0.1742%" height="15" fill="rgb(210,149,44)" fg:x="13377" fg:w="24"/><text x="97.3678%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.17%)</title><rect x="97.1178%" y="293" width="0.1742%" height="15" fill="rgb(240,135,12)" fg:x="13377" fg:w="24"/><text x="97.3678%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(i8,i8)&gt;&gt; (24 samples, 0.17%)</title><rect x="97.1178%" y="277" width="0.1742%" height="15" fill="rgb(251,24,50)" fg:x="13377" fg:w="24"/><text x="97.3678%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.17%)</title><rect x="97.1178%" y="261" width="0.1742%" height="15" fill="rgb(243,200,47)" fg:x="13377" fg:w="24"/><text x="97.3678%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.17%)</title><rect x="97.1178%" y="245" width="0.1742%" height="15" fill="rgb(224,166,26)" fg:x="13377" fg:w="24"/><text x="97.3678%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.17%)</title><rect x="97.1178%" y="229" width="0.1742%" height="15" fill="rgb(233,0,47)" fg:x="13377" fg:w="24"/><text x="97.3678%" y="239.50"></text></g><g><title>cfree (24 samples, 0.17%)</title><rect x="97.1178%" y="213" width="0.1742%" height="15" fill="rgb(253,80,5)" fg:x="13377" fg:w="24"/><text x="97.3678%" y="223.50"></text></g><g><title>[libc.so.6] (16 samples, 0.12%)</title><rect x="97.1758%" y="197" width="0.1162%" height="15" fill="rgb(214,133,25)" fg:x="13385" fg:w="16"/><text x="97.4258%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.03%)</title><rect x="97.3356%" y="341" width="0.0290%" height="15" fill="rgb(209,27,14)" fg:x="13407" fg:w="4"/><text x="97.5856%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.03%)</title><rect x="97.3356%" y="325" width="0.0290%" height="15" fill="rgb(219,102,51)" fg:x="13407" fg:w="4"/><text x="97.5856%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.03%)</title><rect x="97.3356%" y="309" width="0.0290%" height="15" fill="rgb(237,18,16)" fg:x="13407" fg:w="4"/><text x="97.5856%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.02%)</title><rect x="97.4299%" y="325" width="0.0218%" height="15" fill="rgb(241,85,17)" fg:x="13420" fg:w="3"/><text x="97.6799%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="97.4299%" y="309" width="0.0218%" height="15" fill="rgb(236,90,42)" fg:x="13420" fg:w="3"/><text x="97.6799%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="97.4299%" y="293" width="0.0218%" height="15" fill="rgb(249,57,21)" fg:x="13420" fg:w="3"/><text x="97.6799%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.01%)</title><rect x="97.4517%" y="325" width="0.0145%" height="15" fill="rgb(243,12,36)" fg:x="13423" fg:w="2"/><text x="97.7017%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.01%)</title><rect x="97.4517%" y="309" width="0.0145%" height="15" fill="rgb(253,128,47)" fg:x="13423" fg:w="2"/><text x="97.7017%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.01%)</title><rect x="97.4517%" y="293" width="0.0145%" height="15" fill="rgb(207,33,20)" fg:x="13423" fg:w="2"/><text x="97.7017%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="97.4517%" y="277" width="0.0145%" height="15" fill="rgb(233,215,35)" fg:x="13423" fg:w="2"/><text x="97.7017%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.01%)</title><rect x="97.5098%" y="181" width="0.0145%" height="15" fill="rgb(249,188,52)" fg:x="13431" fg:w="2"/><text x="97.7598%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.01%)</title><rect x="97.5243%" y="165" width="0.0145%" height="15" fill="rgb(225,12,32)" fg:x="13433" fg:w="2"/><text x="97.7743%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 0.08%)</title><rect x="97.4735%" y="229" width="0.0799%" height="15" fill="rgb(247,98,14)" fg:x="13426" fg:w="11"/><text x="97.7235%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 0.08%)</title><rect x="97.4735%" y="213" width="0.0799%" height="15" fill="rgb(247,219,48)" fg:x="13426" fg:w="11"/><text x="97.7235%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 0.08%)</title><rect x="97.4735%" y="197" width="0.0799%" height="15" fill="rgb(253,60,48)" fg:x="13426" fg:w="11"/><text x="97.7235%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.03%)</title><rect x="97.5243%" y="181" width="0.0290%" height="15" fill="rgb(245,15,52)" fg:x="13433" fg:w="4"/><text x="97.7743%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.01%)</title><rect x="97.5388%" y="165" width="0.0145%" height="15" fill="rgb(220,133,28)" fg:x="13435" fg:w="2"/><text x="97.7888%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="97.5606%" y="181" width="0.0145%" height="15" fill="rgb(217,180,4)" fg:x="13438" fg:w="2"/><text x="97.8106%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="97.5606%" y="165" width="0.0145%" height="15" fill="rgb(251,24,1)" fg:x="13438" fg:w="2"/><text x="97.8106%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="97.5606%" y="149" width="0.0145%" height="15" fill="rgb(212,185,49)" fg:x="13438" fg:w="2"/><text x="97.8106%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.11%)</title><rect x="97.4735%" y="261" width="0.1089%" height="15" fill="rgb(215,175,22)" fg:x="13426" fg:w="15"/><text x="97.7235%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.11%)</title><rect x="97.4735%" y="245" width="0.1089%" height="15" fill="rgb(250,205,14)" fg:x="13426" fg:w="15"/><text x="97.7235%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="97.5606%" y="229" width="0.0218%" height="15" fill="rgb(225,211,22)" fg:x="13438" fg:w="3"/><text x="97.8106%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (3 samples, 0.02%)</title><rect x="97.5606%" y="213" width="0.0218%" height="15" fill="rgb(251,179,42)" fg:x="13438" fg:w="3"/><text x="97.8106%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u16 (3 samples, 0.02%)</title><rect x="97.5606%" y="197" width="0.0218%" height="15" fill="rgb(208,216,51)" fg:x="13438" fg:w="3"/><text x="97.8106%" y="207.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (21 samples, 0.15%)</title><rect x="97.4662%" y="325" width="0.1525%" height="15" fill="rgb(235,36,11)" fg:x="13425" fg:w="21"/><text x="97.7162%" y="335.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (21 samples, 0.15%)</title><rect x="97.4662%" y="309" width="0.1525%" height="15" fill="rgb(213,189,28)" fg:x="13425" fg:w="21"/><text x="97.7162%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (21 samples, 0.15%)</title><rect x="97.4662%" y="293" width="0.1525%" height="15" fill="rgb(227,203,42)" fg:x="13425" fg:w="21"/><text x="97.7162%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 0.15%)</title><rect x="97.4662%" y="277" width="0.1525%" height="15" fill="rgb(244,72,36)" fg:x="13425" fg:w="21"/><text x="97.7162%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (5 samples, 0.04%)</title><rect x="97.5824%" y="261" width="0.0363%" height="15" fill="rgb(213,53,17)" fg:x="13441" fg:w="5"/><text x="97.8324%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.04%)</title><rect x="97.5824%" y="245" width="0.0363%" height="15" fill="rgb(207,167,3)" fg:x="13441" fg:w="5"/><text x="97.8324%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 0.04%)</title><rect x="97.5824%" y="229" width="0.0363%" height="15" fill="rgb(216,98,30)" fg:x="13441" fg:w="5"/><text x="97.8324%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.02%)</title><rect x="97.5969%" y="213" width="0.0218%" height="15" fill="rgb(236,123,15)" fg:x="13443" fg:w="3"/><text x="97.8469%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="97.6187%" y="245" width="0.0218%" height="15" fill="rgb(248,81,50)" fg:x="13446" fg:w="3"/><text x="97.8687%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="97.6187%" y="229" width="0.0218%" height="15" fill="rgb(214,120,4)" fg:x="13446" fg:w="3"/><text x="97.8687%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="97.6187%" y="213" width="0.0218%" height="15" fill="rgb(208,179,34)" fg:x="13446" fg:w="3"/><text x="97.8687%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.04%)</title><rect x="97.6187%" y="277" width="0.0436%" height="15" fill="rgb(227,140,7)" fg:x="13446" fg:w="6"/><text x="97.8687%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.04%)</title><rect x="97.6187%" y="261" width="0.0436%" height="15" fill="rgb(214,22,6)" fg:x="13446" fg:w="6"/><text x="97.8687%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.01%)</title><rect x="97.6477%" y="245" width="0.0145%" height="15" fill="rgb(207,137,27)" fg:x="13450" fg:w="2"/><text x="97.8977%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (2 samples, 0.01%)</title><rect x="97.6477%" y="229" width="0.0145%" height="15" fill="rgb(210,8,46)" fg:x="13450" fg:w="2"/><text x="97.8977%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u16 (2 samples, 0.01%)</title><rect x="97.6477%" y="213" width="0.0145%" height="15" fill="rgb(240,16,54)" fg:x="13450" fg:w="2"/><text x="97.8977%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="97.6477%" y="197" width="0.0145%" height="15" fill="rgb(211,209,29)" fg:x="13450" fg:w="2"/><text x="97.8977%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="97.6477%" y="181" width="0.0145%" height="15" fill="rgb(226,228,24)" fg:x="13450" fg:w="2"/><text x="97.8977%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="97.6477%" y="165" width="0.0145%" height="15" fill="rgb(222,84,9)" fg:x="13450" fg:w="2"/><text x="97.8977%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="97.6623%" y="133" width="0.0363%" height="15" fill="rgb(234,203,30)" fg:x="13452" fg:w="5"/><text x="97.9123%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="97.6623%" y="117" width="0.0363%" height="15" fill="rgb(238,109,14)" fg:x="13452" fg:w="5"/><text x="97.9123%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="97.6623%" y="101" width="0.0363%" height="15" fill="rgb(233,206,34)" fg:x="13452" fg:w="5"/><text x="97.9123%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.01%)</title><rect x="97.6840%" y="85" width="0.0145%" height="15" fill="rgb(220,167,47)" fg:x="13455" fg:w="2"/><text x="97.9340%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (8 samples, 0.06%)</title><rect x="97.6623%" y="197" width="0.0581%" height="15" fill="rgb(238,105,10)" fg:x="13452" fg:w="8"/><text x="97.9123%" y="207.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (8 samples, 0.06%)</title><rect x="97.6623%" y="181" width="0.0581%" height="15" fill="rgb(213,227,17)" fg:x="13452" fg:w="8"/><text x="97.9123%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.06%)</title><rect x="97.6623%" y="165" width="0.0581%" height="15" fill="rgb(217,132,38)" fg:x="13452" fg:w="8"/><text x="97.9123%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.06%)</title><rect x="97.6623%" y="149" width="0.0581%" height="15" fill="rgb(242,146,4)" fg:x="13452" fg:w="8"/><text x="97.9123%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.01%)</title><rect x="97.7058%" y="133" width="0.0145%" height="15" fill="rgb(212,61,9)" fg:x="13458" fg:w="2"/><text x="97.9558%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (2 samples, 0.01%)</title><rect x="97.7058%" y="117" width="0.0145%" height="15" fill="rgb(247,126,22)" fg:x="13458" fg:w="2"/><text x="97.9558%" y="127.50"></text></g><g><title>core::hash::Hasher::write_u16 (2 samples, 0.01%)</title><rect x="97.7058%" y="101" width="0.0145%" height="15" fill="rgb(220,196,2)" fg:x="13458" fg:w="2"/><text x="97.9558%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="97.7058%" y="85" width="0.0145%" height="15" fill="rgb(208,46,4)" fg:x="13458" fg:w="2"/><text x="97.9558%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="97.7058%" y="69" width="0.0145%" height="15" fill="rgb(252,104,46)" fg:x="13458" fg:w="2"/><text x="97.9558%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="97.7058%" y="53" width="0.0145%" height="15" fill="rgb(237,152,48)" fg:x="13458" fg:w="2"/><text x="97.9558%" y="63.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.01%)</title><rect x="97.7058%" y="37" width="0.0145%" height="15" fill="rgb(221,59,37)" fg:x="13458" fg:w="2"/><text x="97.9558%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (2 samples, 0.01%)</title><rect x="97.7203%" y="165" width="0.0145%" height="15" fill="rgb(209,202,51)" fg:x="13460" fg:w="2"/><text x="97.9703%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (4 samples, 0.03%)</title><rect x="97.7203%" y="197" width="0.0290%" height="15" fill="rgb(228,81,30)" fg:x="13460" fg:w="4"/><text x="97.9703%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (4 samples, 0.03%)</title><rect x="97.7203%" y="181" width="0.0290%" height="15" fill="rgb(227,42,39)" fg:x="13460" fg:w="4"/><text x="97.9703%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (2 samples, 0.01%)</title><rect x="97.7349%" y="165" width="0.0145%" height="15" fill="rgb(221,26,2)" fg:x="13462" fg:w="2"/><text x="97.9849%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (14 samples, 0.10%)</title><rect x="97.6623%" y="261" width="0.1016%" height="15" fill="rgb(254,61,31)" fg:x="13452" fg:w="14"/><text x="97.9123%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.10%)</title><rect x="97.6623%" y="245" width="0.1016%" height="15" fill="rgb(222,173,38)" fg:x="13452" fg:w="14"/><text x="97.9123%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (14 samples, 0.10%)</title><rect x="97.6623%" y="229" width="0.1016%" height="15" fill="rgb(218,50,12)" fg:x="13452" fg:w="14"/><text x="97.9123%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (14 samples, 0.10%)</title><rect x="97.6623%" y="213" width="0.1016%" height="15" fill="rgb(223,88,40)" fg:x="13452" fg:w="14"/><text x="97.9123%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2 samples, 0.01%)</title><rect x="97.7494%" y="197" width="0.0145%" height="15" fill="rgb(237,54,19)" fg:x="13464" fg:w="2"/><text x="97.9994%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 0.01%)</title><rect x="97.7494%" y="181" width="0.0145%" height="15" fill="rgb(251,129,25)" fg:x="13464" fg:w="2"/><text x="97.9994%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="97.7639%" y="245" width="0.0218%" height="15" fill="rgb(238,97,19)" fg:x="13466" fg:w="3"/><text x="98.0139%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (2 samples, 0.01%)</title><rect x="97.7857%" y="245" width="0.0145%" height="15" fill="rgb(240,169,18)" fg:x="13469" fg:w="2"/><text x="98.0357%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.02%)</title><rect x="97.8002%" y="245" width="0.0218%" height="15" fill="rgb(230,187,49)" fg:x="13471" fg:w="3"/><text x="98.0502%" y="255.50"></text></g><g><title>tetrs::logic::game::gravity (61 samples, 0.44%)</title><rect x="97.3864%" y="341" width="0.4429%" height="15" fill="rgb(209,44,26)" fg:x="13414" fg:w="61"/><text x="97.6364%" y="351.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (29 samples, 0.21%)</title><rect x="97.6187%" y="325" width="0.2105%" height="15" fill="rgb(244,0,6)" fg:x="13446" fg:w="29"/><text x="97.8687%" y="335.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (29 samples, 0.21%)</title><rect x="97.6187%" y="309" width="0.2105%" height="15" fill="rgb(248,18,21)" fg:x="13446" fg:w="29"/><text x="97.8687%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (29 samples, 0.21%)</title><rect x="97.6187%" y="293" width="0.2105%" height="15" fill="rgb(245,180,19)" fg:x="13446" fg:w="29"/><text x="97.8687%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (23 samples, 0.17%)</title><rect x="97.6623%" y="277" width="0.1670%" height="15" fill="rgb(252,118,36)" fg:x="13452" fg:w="23"/><text x="97.9123%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (9 samples, 0.07%)</title><rect x="97.7639%" y="261" width="0.0653%" height="15" fill="rgb(210,224,19)" fg:x="13466" fg:w="9"/><text x="98.0139%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (5 samples, 0.04%)</title><rect x="97.8510%" y="325" width="0.0363%" height="15" fill="rgb(218,30,24)" fg:x="13478" fg:w="5"/><text x="98.1010%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="97.8510%" y="309" width="0.0363%" height="15" fill="rgb(219,75,50)" fg:x="13478" fg:w="5"/><text x="98.1010%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="97.8510%" y="293" width="0.0363%" height="15" fill="rgb(234,72,50)" fg:x="13478" fg:w="5"/><text x="98.1010%" y="303.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="97.8510%" y="277" width="0.0363%" height="15" fill="rgb(219,100,48)" fg:x="13478" fg:w="5"/><text x="98.1010%" y="287.50"></text></g><g><title>malloc (4 samples, 0.03%)</title><rect x="97.8583%" y="261" width="0.0290%" height="15" fill="rgb(253,5,41)" fg:x="13479" fg:w="4"/><text x="98.1083%" y="271.50"></text></g><g><title>tetrs::logic::game::is_connected (10 samples, 0.07%)</title><rect x="97.8292%" y="341" width="0.0726%" height="15" fill="rgb(247,181,11)" fg:x="13475" fg:w="10"/><text x="98.0792%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(i8,i8)&gt;&gt; (2 samples, 0.01%)</title><rect x="97.8873%" y="325" width="0.0145%" height="15" fill="rgb(222,223,25)" fg:x="13483" fg:w="2"/><text x="98.1373%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="97.8873%" y="309" width="0.0145%" height="15" fill="rgb(214,198,28)" fg:x="13483" fg:w="2"/><text x="98.1373%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(i8,i8),alloc::alloc::Global&gt;&gt; (2 samples, 0.01%)</title><rect x="97.8873%" y="293" width="0.0145%" height="15" fill="rgb(230,46,43)" fg:x="13483" fg:w="2"/><text x="98.1373%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="97.8873%" y="277" width="0.0145%" height="15" fill="rgb(233,65,53)" fg:x="13483" fg:w="2"/><text x="98.1373%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(i8,i8)&gt;&gt; (2 samples, 0.01%)</title><rect x="97.8873%" y="261" width="0.0145%" height="15" fill="rgb(221,121,27)" fg:x="13483" fg:w="2"/><text x="98.1373%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="97.8873%" y="245" width="0.0145%" height="15" fill="rgb(247,70,47)" fg:x="13483" fg:w="2"/><text x="98.1373%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="97.8873%" y="229" width="0.0145%" height="15" fill="rgb(228,85,35)" fg:x="13483" fg:w="2"/><text x="98.1373%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="97.8873%" y="213" width="0.0145%" height="15" fill="rgb(209,50,18)" fg:x="13483" fg:w="2"/><text x="98.1373%" y="223.50"></text></g><g><title>cfree (2 samples, 0.01%)</title><rect x="97.8873%" y="197" width="0.0145%" height="15" fill="rgb(250,19,35)" fg:x="13483" fg:w="2"/><text x="98.1373%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.02%)</title><rect x="97.9527%" y="261" width="0.0218%" height="15" fill="rgb(253,107,29)" fg:x="13492" fg:w="3"/><text x="98.2027%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (2 samples, 0.01%)</title><rect x="97.9599%" y="245" width="0.0145%" height="15" fill="rgb(252,179,29)" fg:x="13493" fg:w="2"/><text x="98.2099%" y="255.50"></text></g><g><title>tetrs::logic::game::gravity (7 samples, 0.05%)</title><rect x="97.9309%" y="325" width="0.0508%" height="15" fill="rgb(238,194,6)" fg:x="13489" fg:w="7"/><text x="98.1809%" y="335.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (5 samples, 0.04%)</title><rect x="97.9454%" y="309" width="0.0363%" height="15" fill="rgb(238,164,29)" fg:x="13491" fg:w="5"/><text x="98.1954%" y="319.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (5 samples, 0.04%)</title><rect x="97.9454%" y="293" width="0.0363%" height="15" fill="rgb(224,25,9)" fg:x="13491" fg:w="5"/><text x="98.1954%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.04%)</title><rect x="97.9454%" y="277" width="0.0363%" height="15" fill="rgb(244,153,23)" fg:x="13491" fg:w="5"/><text x="98.1954%" y="287.50"></text></g><g><title>tetrs::logic::game::is_connected (3 samples, 0.02%)</title><rect x="97.9817%" y="325" width="0.0218%" height="15" fill="rgb(212,203,14)" fg:x="13496" fg:w="3"/><text x="98.2317%" y="335.50"></text></g><g><title>tetrs::logic::game::simulate_clear_rows (15 samples, 0.11%)</title><rect x="97.9018%" y="341" width="0.1089%" height="15" fill="rgb(220,164,20)" fg:x="13485" fg:w="15"/><text x="98.1518%" y="351.50"></text></g><g><title>tetrs::logic::game::simulate_clear_rows (105 samples, 0.76%)</title><rect x="97.2920%" y="357" width="0.7623%" height="15" fill="rgb(222,203,48)" fg:x="13401" fg:w="105"/><text x="97.5420%" y="367.50"></text></g><g><title>tetrs::logic::id_manager::next_unique_id (6 samples, 0.04%)</title><rect x="98.0107%" y="341" width="0.0436%" height="15" fill="rgb(215,159,22)" fg:x="13500" fg:w="6"/><text x="98.2607%" y="351.50"></text></g><g><title>tetrs::logic::game::simulate_clear_rows (585 samples, 4.25%)</title><rect x="93.9887%" y="373" width="4.2471%" height="15" fill="rgb(216,183,47)" fg:x="12946" fg:w="585"/><text x="94.2387%" y="383.50">tetrs..</text></g><g><title>tetrs::logic::id_manager::next_unique_id (25 samples, 0.18%)</title><rect x="98.0543%" y="357" width="0.1815%" height="15" fill="rgb(229,195,25)" fg:x="13506" fg:w="25"/><text x="98.3043%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.01%)</title><rect x="98.2213%" y="341" width="0.0145%" height="15" fill="rgb(224,132,51)" fg:x="13529" fg:w="2"/><text x="98.4713%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.01%)</title><rect x="98.2213%" y="325" width="0.0145%" height="15" fill="rgb(240,63,7)" fg:x="13529" fg:w="2"/><text x="98.4713%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="98.2213%" y="309" width="0.0145%" height="15" fill="rgb(249,182,41)" fg:x="13529" fg:w="2"/><text x="98.4713%" y="319.50"></text></g><g><title>tetrs::logic::game::simulate_clear_rows (2,013 samples, 14.61%)</title><rect x="84.1876%" y="389" width="14.6145%" height="15" fill="rgb(243,47,26)" fg:x="11596" fg:w="2013"/><text x="84.4376%" y="399.50">tetrs::logic::game::si..</text></g><g><title>tetrs::logic::id_manager::next_unique_id (78 samples, 0.57%)</title><rect x="98.2358%" y="373" width="0.5663%" height="15" fill="rgb(233,48,2)" fg:x="13531" fg:w="78"/><text x="98.4858%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.05%)</title><rect x="98.7513%" y="357" width="0.0508%" height="15" fill="rgb(244,165,34)" fg:x="13602" fg:w="7"/><text x="99.0013%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.05%)</title><rect x="98.7513%" y="341" width="0.0508%" height="15" fill="rgb(207,89,7)" fg:x="13602" fg:w="7"/><text x="99.0013%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.05%)</title><rect x="98.7513%" y="325" width="0.0508%" height="15" fill="rgb(244,117,36)" fg:x="13602" fg:w="7"/><text x="99.0013%" y="335.50"></text></g><g><title>tetrs::logic::id_manager::get_pent_id (2 samples, 0.01%)</title><rect x="98.8021%" y="389" width="0.0145%" height="15" fill="rgb(226,144,34)" fg:x="13609" fg:w="2"/><text x="99.0521%" y="399.50"></text></g><g><title>tetrs::logic::bot::search (13,614 samples, 98.84%)</title><rect x="0.6098%" y="437" width="98.8384%" height="15" fill="rgb(213,23,19)" fg:x="84" fg:w="13614"/><text x="0.8598%" y="447.50">tetrs::logic::bot::search</text></g><g><title>tetrs::logic::bot::heuristic (5,023 samples, 36.47%)</title><rect x="62.9810%" y="421" width="36.4673%" height="15" fill="rgb(217,75,12)" fg:x="8675" fg:w="5023"/><text x="63.2310%" y="431.50">tetrs::logic::bot::heuristic</text></g><g><title>tetrs::logic::game::simulate_clear_rows (4,917 samples, 35.70%)</title><rect x="63.7505%" y="405" width="35.6977%" height="15" fill="rgb(224,159,17)" fg:x="8781" fg:w="4917"/><text x="64.0005%" y="415.50">tetrs::logic::game::simulate_clear_rows</text></g><g><title>tetrs::logic::id_manager::next_unique_id (87 samples, 0.63%)</title><rect x="98.8166%" y="389" width="0.6316%" height="15" fill="rgb(217,118,1)" fg:x="13611" fg:w="87"/><text x="99.0666%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.04%)</title><rect x="99.4119%" y="373" width="0.0363%" height="15" fill="rgb(232,180,48)" fg:x="13693" fg:w="5"/><text x="99.6619%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.04%)</title><rect x="99.4119%" y="357" width="0.0363%" height="15" fill="rgb(230,27,33)" fg:x="13693" fg:w="5"/><text x="99.6619%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.04%)</title><rect x="99.4119%" y="341" width="0.0363%" height="15" fill="rgb(205,31,21)" fg:x="13693" fg:w="5"/><text x="99.6619%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.01%)</title><rect x="99.4773%" y="341" width="0.0145%" height="15" fill="rgb(253,59,4)" fg:x="13702" fg:w="2"/><text x="99.7273%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="99.4773%" y="325" width="0.0145%" height="15" fill="rgb(224,201,9)" fg:x="13702" fg:w="2"/><text x="99.7273%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.01%)</title><rect x="99.4773%" y="309" width="0.0145%" height="15" fill="rgb(229,206,30)" fg:x="13702" fg:w="2"/><text x="99.7273%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.01%)</title><rect x="99.4773%" y="293" width="0.0145%" height="15" fill="rgb(212,67,47)" fg:x="13702" fg:w="2"/><text x="99.7273%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.01%)</title><rect x="99.4773%" y="277" width="0.0145%" height="15" fill="rgb(211,96,50)" fg:x="13702" fg:w="2"/><text x="99.7273%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.01%)</title><rect x="99.4773%" y="261" width="0.0145%" height="15" fill="rgb(252,114,18)" fg:x="13702" fg:w="2"/><text x="99.7273%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.01%)</title><rect x="99.4773%" y="245" width="0.0145%" height="15" fill="rgb(223,58,37)" fg:x="13702" fg:w="2"/><text x="99.7273%" y="255.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.02%)</title><rect x="99.4773%" y="405" width="0.0218%" height="15" fill="rgb(237,70,4)" fg:x="13702" fg:w="3"/><text x="99.7273%" y="415.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.02%)</title><rect x="99.4773%" y="389" width="0.0218%" height="15" fill="rgb(244,85,46)" fg:x="13702" fg:w="3"/><text x="99.7273%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.02%)</title><rect x="99.4773%" y="373" width="0.0218%" height="15" fill="rgb(223,39,52)" fg:x="13702" fg:w="3"/><text x="99.7273%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.02%)</title><rect x="99.4773%" y="357" width="0.0218%" height="15" fill="rgb(218,200,14)" fg:x="13702" fg:w="3"/><text x="99.7273%" y="367.50"></text></g><g><title>tetrs::logic::game::gravity (9 samples, 0.07%)</title><rect x="99.4482%" y="421" width="0.0653%" height="15" fill="rgb(208,171,16)" fg:x="13698" fg:w="9"/><text x="99.6982%" y="431.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (2 samples, 0.01%)</title><rect x="99.4991%" y="405" width="0.0145%" height="15" fill="rgb(234,200,18)" fg:x="13705" fg:w="2"/><text x="99.7491%" y="415.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (2 samples, 0.01%)</title><rect x="99.4991%" y="389" width="0.0145%" height="15" fill="rgb(228,45,11)" fg:x="13705" fg:w="2"/><text x="99.7491%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.01%)</title><rect x="99.4991%" y="373" width="0.0145%" height="15" fill="rgb(237,182,11)" fg:x="13705" fg:w="2"/><text x="99.7491%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.01%)</title><rect x="99.4991%" y="357" width="0.0145%" height="15" fill="rgb(241,175,49)" fg:x="13705" fg:w="2"/><text x="99.7491%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="99.4991%" y="341" width="0.0145%" height="15" fill="rgb(247,38,35)" fg:x="13705" fg:w="2"/><text x="99.7491%" y="351.50"></text></g><g><title>tetrs::logic::game::gravity (3 samples, 0.02%)</title><rect x="99.5136%" y="405" width="0.0218%" height="15" fill="rgb(228,39,49)" fg:x="13707" fg:w="3"/><text x="99.7636%" y="415.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (2 samples, 0.01%)</title><rect x="99.5208%" y="389" width="0.0145%" height="15" fill="rgb(226,101,26)" fg:x="13708" fg:w="2"/><text x="99.7708%" y="399.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (2 samples, 0.01%)</title><rect x="99.5208%" y="373" width="0.0145%" height="15" fill="rgb(206,141,19)" fg:x="13708" fg:w="2"/><text x="99.7708%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.01%)</title><rect x="99.5208%" y="357" width="0.0145%" height="15" fill="rgb(211,200,13)" fg:x="13708" fg:w="2"/><text x="99.7708%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.01%)</title><rect x="99.5208%" y="341" width="0.0145%" height="15" fill="rgb(241,121,6)" fg:x="13708" fg:w="2"/><text x="99.7708%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="99.5208%" y="325" width="0.0145%" height="15" fill="rgb(234,221,29)" fg:x="13708" fg:w="2"/><text x="99.7708%" y="335.50"></text></g><g><title>tetrs::logic::game::simulate_clear_rows (6 samples, 0.04%)</title><rect x="99.5136%" y="421" width="0.0436%" height="15" fill="rgb(229,136,5)" fg:x="13707" fg:w="6"/><text x="99.7636%" y="431.50"></text></g><g><title>tetrs::logic::id_manager::next_unique_id (2 samples, 0.01%)</title><rect x="99.5426%" y="405" width="0.0145%" height="15" fill="rgb(238,36,11)" fg:x="13711" fg:w="2"/><text x="99.7926%" y="415.50"></text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::maybe_unwind (13,633 samples, 98.98%)</title><rect x="0.5953%" y="517" width="98.9763%" height="15" fill="rgb(251,55,41)" fg:x="82" fg:w="13633"/><text x="0.8453%" y="527.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::maybe_unwind</text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::_{{closure}} (13,633 samples, 98.98%)</title><rect x="0.5953%" y="501" width="98.9763%" height="15" fill="rgb(242,34,40)" fg:x="82" fg:w="13633"/><text x="0.8453%" y="511.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::_{{closure}}</text></g><g><title>macroquad::exec::resume (13,633 samples, 98.98%)</title><rect x="0.5953%" y="485" width="98.9763%" height="15" fill="rgb(215,42,17)" fg:x="82" fg:w="13633"/><text x="0.8453%" y="495.50">macroquad::exec::resume</text></g><g><title>tetrs::amain::_{{closure}} (13,633 samples, 98.98%)</title><rect x="0.5953%" y="469" width="98.9763%" height="15" fill="rgb(207,44,46)" fg:x="82" fg:w="13633"/><text x="0.8453%" y="479.50">tetrs::amain::_{{closure}}</text></g><g><title>tetrs::test_bot (13,633 samples, 98.98%)</title><rect x="0.5953%" y="453" width="98.9763%" height="15" fill="rgb(211,206,28)" fg:x="82" fg:w="13633"/><text x="0.8453%" y="463.50">tetrs::test_bot</text></g><g><title>tetrs::logic::game::simulate_clear_rows (17 samples, 0.12%)</title><rect x="99.4482%" y="437" width="0.1234%" height="15" fill="rgb(237,167,16)" fg:x="13698" fg:w="17"/><text x="99.6982%" y="447.50"></text></g><g><title>tetrs::logic::id_manager::next_unique_id (2 samples, 0.01%)</title><rect x="99.5571%" y="421" width="0.0145%" height="15" fill="rgb(233,66,6)" fg:x="13713" fg:w="2"/><text x="99.8071%" y="431.50"></text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw (13,634 samples, 98.98%)</title><rect x="0.5953%" y="533" width="98.9836%" height="15" fill="rgb(246,123,29)" fg:x="82" fg:w="13634"/><text x="0.8453%" y="543.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw</text></g><g><title>XCloseDisplay (2 samples, 0.01%)</title><rect x="99.5789%" y="533" width="0.0145%" height="15" fill="rgb(209,62,40)" fg:x="13716" fg:w="2"/><text x="99.8289%" y="543.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (2 samples, 0.01%)</title><rect x="99.5789%" y="517" width="0.0145%" height="15" fill="rgb(218,4,25)" fg:x="13716" fg:w="2"/><text x="99.8289%" y="527.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (2 samples, 0.01%)</title><rect x="99.5789%" y="501" width="0.0145%" height="15" fill="rgb(253,91,49)" fg:x="13716" fg:w="2"/><text x="99.8289%" y="511.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (2 samples, 0.01%)</title><rect x="99.5789%" y="485" width="0.0145%" height="15" fill="rgb(228,155,29)" fg:x="13716" fg:w="2"/><text x="99.8289%" y="495.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="99.5789%" y="469" width="0.0145%" height="15" fill="rgb(243,57,37)" fg:x="13716" fg:w="2"/><text x="99.8289%" y="479.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="99.5789%" y="453" width="0.0145%" height="15" fill="rgb(244,167,17)" fg:x="13716" fg:w="2"/><text x="99.8289%" y="463.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="99.5789%" y="437" width="0.0145%" height="15" fill="rgb(207,181,38)" fg:x="13716" fg:w="2"/><text x="99.8289%" y="447.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="99.5789%" y="421" width="0.0145%" height="15" fill="rgb(211,8,23)" fg:x="13716" fg:w="2"/><text x="99.8289%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.04%)</title><rect x="99.6225%" y="229" width="0.0436%" height="15" fill="rgb(235,11,44)" fg:x="13722" fg:w="6"/><text x="99.8725%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.03%)</title><rect x="99.6370%" y="213" width="0.0290%" height="15" fill="rgb(248,18,52)" fg:x="13724" fg:w="4"/><text x="99.8870%" y="223.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (8 samples, 0.06%)</title><rect x="99.6225%" y="421" width="0.0581%" height="15" fill="rgb(208,4,7)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="431.50"></text></g><g><title>dlopen (8 samples, 0.06%)</title><rect x="99.6225%" y="405" width="0.0581%" height="15" fill="rgb(240,17,39)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="415.50"></text></g><g><title>[libc.so.6] (8 samples, 0.06%)</title><rect x="99.6225%" y="389" width="0.0581%" height="15" fill="rgb(207,170,3)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.06%)</title><rect x="99.6225%" y="373" width="0.0581%" height="15" fill="rgb(236,100,52)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="383.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.06%)</title><rect x="99.6225%" y="357" width="0.0581%" height="15" fill="rgb(246,78,51)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="367.50"></text></g><g><title>[libc.so.6] (8 samples, 0.06%)</title><rect x="99.6225%" y="341" width="0.0581%" height="15" fill="rgb(211,17,15)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.06%)</title><rect x="99.6225%" y="325" width="0.0581%" height="15" fill="rgb(209,59,46)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="335.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.06%)</title><rect x="99.6225%" y="309" width="0.0581%" height="15" fill="rgb(210,92,25)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.06%)</title><rect x="99.6225%" y="293" width="0.0581%" height="15" fill="rgb(238,174,52)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="303.50"></text></g><g><title>_dl_catch_exception (8 samples, 0.06%)</title><rect x="99.6225%" y="277" width="0.0581%" height="15" fill="rgb(230,73,7)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.06%)</title><rect x="99.6225%" y="261" width="0.0581%" height="15" fill="rgb(243,124,40)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.06%)</title><rect x="99.6225%" y="245" width="0.0581%" height="15" fill="rgb(244,170,11)" fg:x="13722" fg:w="8"/><text x="99.8725%" y="255.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (15 samples, 0.11%)</title><rect x="99.5934%" y="437" width="0.1089%" height="15" fill="rgb(207,114,54)" fg:x="13718" fg:w="15"/><text x="99.8434%" y="447.50"></text></g><g><title>[radeonsi_dri.so] (3 samples, 0.02%)</title><rect x="99.6806%" y="421" width="0.0218%" height="15" fill="rgb(205,42,20)" fg:x="13730" fg:w="3"/><text x="99.9306%" y="431.50"></text></g><g><title>[radeonsi_dri.so] (34 samples, 0.25%)</title><rect x="99.7023%" y="325" width="0.2468%" height="15" fill="rgb(230,30,28)" fg:x="13733" fg:w="34"/><text x="99.9523%" y="335.50"></text></g><g><title>[radeonsi_dri.so] (34 samples, 0.25%)</title><rect x="99.7023%" y="309" width="0.2468%" height="15" fill="rgb(205,73,54)" fg:x="13733" fg:w="34"/><text x="99.9523%" y="319.50"></text></g><g><title>[radeonsi_dri.so] (19 samples, 0.14%)</title><rect x="99.8112%" y="293" width="0.1379%" height="15" fill="rgb(254,227,23)" fg:x="13748" fg:w="19"/><text x="100.0612%" y="303.50"></text></g><g><title>pthread_setaffinity_np (19 samples, 0.14%)</title><rect x="99.8112%" y="277" width="0.1379%" height="15" fill="rgb(228,202,34)" fg:x="13748" fg:w="19"/><text x="100.0612%" y="287.50"></text></g><g><title>[unknown] (18 samples, 0.13%)</title><rect x="99.8185%" y="261" width="0.1307%" height="15" fill="rgb(222,225,37)" fg:x="13749" fg:w="18"/><text x="100.0685%" y="271.50"></text></g><g><title>[unknown] (18 samples, 0.13%)</title><rect x="99.8185%" y="245" width="0.1307%" height="15" fill="rgb(221,14,54)" fg:x="13749" fg:w="18"/><text x="100.0685%" y="255.50"></text></g><g><title>[unknown] (18 samples, 0.13%)</title><rect x="99.8185%" y="229" width="0.1307%" height="15" fill="rgb(254,102,2)" fg:x="13749" fg:w="18"/><text x="100.0685%" y="239.50"></text></g><g><title>[unknown] (18 samples, 0.13%)</title><rect x="99.8185%" y="213" width="0.1307%" height="15" fill="rgb(232,104,17)" fg:x="13749" fg:w="18"/><text x="100.0685%" y="223.50"></text></g><g><title>[unknown] (14 samples, 0.10%)</title><rect x="99.8475%" y="197" width="0.1016%" height="15" fill="rgb(250,220,14)" fg:x="13753" fg:w="14"/><text x="100.0975%" y="207.50"></text></g><g><title>[unknown] (11 samples, 0.08%)</title><rect x="99.8693%" y="181" width="0.0799%" height="15" fill="rgb(241,158,9)" fg:x="13756" fg:w="11"/><text x="100.1193%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9274%" y="165" width="0.0218%" height="15" fill="rgb(246,9,43)" fg:x="13764" fg:w="3"/><text x="100.1774%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9347%" y="149" width="0.0145%" height="15" fill="rgb(206,73,33)" fg:x="13765" fg:w="2"/><text x="100.1847%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9347%" y="133" width="0.0145%" height="15" fill="rgb(222,79,8)" fg:x="13765" fg:w="2"/><text x="100.1847%" y="143.50"></text></g><g><title>[libc.so.6] (35 samples, 0.25%)</title><rect x="99.7023%" y="341" width="0.2541%" height="15" fill="rgb(234,8,54)" fg:x="13733" fg:w="35"/><text x="99.9523%" y="351.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (52 samples, 0.38%)</title><rect x="99.5934%" y="517" width="0.3775%" height="15" fill="rgb(209,134,38)" fg:x="13718" fg:w="52"/><text x="99.8434%" y="527.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (52 samples, 0.38%)</title><rect x="99.5934%" y="501" width="0.3775%" height="15" fill="rgb(230,127,29)" fg:x="13718" fg:w="52"/><text x="99.8434%" y="511.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (52 samples, 0.38%)</title><rect x="99.5934%" y="485" width="0.3775%" height="15" fill="rgb(242,44,41)" fg:x="13718" fg:w="52"/><text x="99.8434%" y="495.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (52 samples, 0.38%)</title><rect x="99.5934%" y="469" width="0.3775%" height="15" fill="rgb(222,56,43)" fg:x="13718" fg:w="52"/><text x="99.8434%" y="479.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (52 samples, 0.38%)</title><rect x="99.5934%" y="453" width="0.3775%" height="15" fill="rgb(238,39,47)" fg:x="13718" fg:w="52"/><text x="99.8434%" y="463.50"></text></g><g><title>[radeonsi_dri.so] (37 samples, 0.27%)</title><rect x="99.7023%" y="437" width="0.2686%" height="15" fill="rgb(226,79,43)" fg:x="13733" fg:w="37"/><text x="99.9523%" y="447.50"></text></g><g><title>[radeonsi_dri.so] (37 samples, 0.27%)</title><rect x="99.7023%" y="421" width="0.2686%" height="15" fill="rgb(242,105,53)" fg:x="13733" fg:w="37"/><text x="99.9523%" y="431.50"></text></g><g><title>[radeonsi_dri.so] (37 samples, 0.27%)</title><rect x="99.7023%" y="405" width="0.2686%" height="15" fill="rgb(251,132,46)" fg:x="13733" fg:w="37"/><text x="99.9523%" y="415.50"></text></g><g><title>[radeonsi_dri.so] (37 samples, 0.27%)</title><rect x="99.7023%" y="389" width="0.2686%" height="15" fill="rgb(231,77,14)" fg:x="13733" fg:w="37"/><text x="99.9523%" y="399.50"></text></g><g><title>amdgpu_winsys_create (37 samples, 0.27%)</title><rect x="99.7023%" y="373" width="0.2686%" height="15" fill="rgb(240,135,9)" fg:x="13733" fg:w="37"/><text x="99.9523%" y="383.50"></text></g><g><title>[radeonsi_dri.so] (37 samples, 0.27%)</title><rect x="99.7023%" y="357" width="0.2686%" height="15" fill="rgb(248,109,14)" fg:x="13733" fg:w="37"/><text x="99.9523%" y="367.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="99.9564%" y="341" width="0.0145%" height="15" fill="rgb(227,146,52)" fg:x="13768" fg:w="2"/><text x="100.2064%" y="351.50"></text></g><g><title>[radeonsi_dri.so] (2 samples, 0.01%)</title><rect x="99.9564%" y="325" width="0.0145%" height="15" fill="rgb(232,54,3)" fg:x="13768" fg:w="2"/><text x="100.2064%" y="335.50"></text></g><g><title>miniquad::native::linux_x11::glx::Glx::init (54 samples, 0.39%)</title><rect x="99.5934%" y="533" width="0.3920%" height="15" fill="rgb(229,201,43)" fg:x="13718" fg:w="54"/><text x="99.8434%" y="543.50"></text></g><g><title>miniquad::native::linux_x11::glx::choose_fbconfig (2 samples, 0.01%)</title><rect x="99.9710%" y="517" width="0.0145%" height="15" fill="rgb(252,161,33)" fg:x="13770" fg:w="2"/><text x="100.2210%" y="527.50"></text></g><g><title>miniquad::native::linux_x11::glx::choose_fbconfig::_{{closure}} (2 samples, 0.01%)</title><rect x="99.9710%" y="501" width="0.0145%" height="15" fill="rgb(226,146,40)" fg:x="13770" fg:w="2"/><text x="100.2210%" y="511.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (2 samples, 0.01%)</title><rect x="99.9710%" y="485" width="0.0145%" height="15" fill="rgb(219,47,25)" fg:x="13770" fg:w="2"/><text x="100.2210%" y="495.50"></text></g><g><title>miniquad::native::linux_x11::glx_main_loop (13,691 samples, 99.40%)</title><rect x="0.5953%" y="549" width="99.3974%" height="15" fill="rgb(250,135,13)" fg:x="82" fg:w="13691"/><text x="0.8453%" y="559.50">miniquad::native::linux_x11::glx_main_loop</text></g><g><title>all (13,774 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(219,229,18)" fg:x="0" fg:w="13774"/><text x="0.2500%" y="671.50"></text></g><g><title>tetrs (13,764 samples, 99.93%)</title><rect x="0.0726%" y="645" width="99.9274%" height="15" fill="rgb(217,152,27)" fg:x="10" fg:w="13764"/><text x="0.3226%" y="655.50">tetrs</text></g><g><title>[unknown] (13,715 samples, 99.57%)</title><rect x="0.4283%" y="629" width="99.5717%" height="15" fill="rgb(225,71,47)" fg:x="59" fg:w="13715"/><text x="0.6783%" y="639.50">[unknown]</text></g><g><title>tetrs::main (13,692 samples, 99.40%)</title><rect x="0.5953%" y="613" width="99.4047%" height="15" fill="rgb(220,139,14)" fg:x="82" fg:w="13692"/><text x="0.8453%" y="623.50">tetrs::main</text></g><g><title>macroquad::Window::from_config (13,692 samples, 99.40%)</title><rect x="0.5953%" y="597" width="99.4047%" height="15" fill="rgb(247,54,32)" fg:x="82" fg:w="13692"/><text x="0.8453%" y="607.50">macroquad::Window::from_config</text></g><g><title>miniquad::start (13,692 samples, 99.40%)</title><rect x="0.5953%" y="581" width="99.4047%" height="15" fill="rgb(252,131,39)" fg:x="82" fg:w="13692"/><text x="0.8453%" y="591.50">miniquad::start</text></g><g><title>miniquad::native::linux_x11::run (13,692 samples, 99.40%)</title><rect x="0.5953%" y="565" width="99.4047%" height="15" fill="rgb(210,108,39)" fg:x="82" fg:w="13692"/><text x="0.8453%" y="575.50">miniquad::native::linux_x11::run</text></g></svg></svg>