<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="159261"><g><title>[radeonsi_dri.so] (32 samples, 0.02%)</title><rect x="0.0402%" y="565" width="0.0201%" height="15" fill="rgb(227,0,7)" fg:x="64" fg:w="32"/><text x="0.2902%" y="575.50"></text></g><g><title>cfree (20 samples, 0.01%)</title><rect x="0.0477%" y="549" width="0.0126%" height="15" fill="rgb(217,0,24)" fg:x="76" fg:w="20"/><text x="0.2977%" y="559.50"></text></g><g><title>[libc.so.6] (20 samples, 0.01%)</title><rect x="0.0477%" y="533" width="0.0126%" height="15" fill="rgb(221,193,54)" fg:x="76" fg:w="20"/><text x="0.2977%" y="543.50"></text></g><g><title>[libc.so.6] (20 samples, 0.01%)</title><rect x="0.0477%" y="517" width="0.0126%" height="15" fill="rgb(248,212,6)" fg:x="76" fg:w="20"/><text x="0.2977%" y="527.50"></text></g><g><title>[libc.so.6] (50 samples, 0.03%)</title><rect x="0.0364%" y="597" width="0.0314%" height="15" fill="rgb(208,68,35)" fg:x="58" fg:w="50"/><text x="0.2864%" y="607.50"></text></g><g><title>[libc.so.6] (50 samples, 0.03%)</title><rect x="0.0364%" y="581" width="0.0314%" height="15" fill="rgb(232,128,0)" fg:x="58" fg:w="50"/><text x="0.2864%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="0.1143%" y="389" width="0.0119%" height="15" fill="rgb(207,160,47)" fg:x="182" fg:w="19"/><text x="0.3643%" y="399.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (19 samples, 0.01%)</title><rect x="0.1143%" y="373" width="0.0119%" height="15" fill="rgb(228,23,34)" fg:x="182" fg:w="19"/><text x="0.3643%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (21 samples, 0.01%)</title><rect x="0.1262%" y="389" width="0.0132%" height="15" fill="rgb(218,30,26)" fg:x="201" fg:w="21"/><text x="0.3762%" y="399.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as alloc::rc::RcEqIdent&lt;T,A&gt;&gt;::eq (21 samples, 0.01%)</title><rect x="0.1262%" y="373" width="0.0132%" height="15" fill="rgb(220,122,19)" fg:x="201" fg:w="21"/><text x="0.3762%" y="383.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::cmp::PartialEq&gt;::eq (21 samples, 0.01%)</title><rect x="0.1262%" y="357" width="0.0132%" height="15" fill="rgb(250,228,42)" fg:x="201" fg:w="21"/><text x="0.3762%" y="367.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (20 samples, 0.01%)</title><rect x="0.1268%" y="341" width="0.0126%" height="15" fill="rgb(240,193,28)" fg:x="202" fg:w="20"/><text x="0.3768%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (20 samples, 0.01%)</title><rect x="0.1268%" y="325" width="0.0126%" height="15" fill="rgb(216,20,37)" fg:x="202" fg:w="20"/><text x="0.3768%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (20 samples, 0.01%)</title><rect x="0.1268%" y="309" width="0.0126%" height="15" fill="rgb(206,188,39)" fg:x="202" fg:w="20"/><text x="0.3768%" y="319.50"></text></g><g><title>__rdl_alloc (48 samples, 0.03%)</title><rect x="0.2493%" y="149" width="0.0301%" height="15" fill="rgb(217,207,13)" fg:x="397" fg:w="48"/><text x="0.4993%" y="159.50"></text></g><g><title>__rust_alloc (58 samples, 0.04%)</title><rect x="0.2794%" y="149" width="0.0364%" height="15" fill="rgb(231,73,38)" fg:x="445" fg:w="58"/><text x="0.5294%" y="159.50"></text></g><g><title>[libc.so.6] (109 samples, 0.07%)</title><rect x="1.2922%" y="117" width="0.0684%" height="15" fill="rgb(225,20,46)" fg:x="2058" fg:w="109"/><text x="1.5422%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,818 samples, 1.14%)</title><rect x="0.2198%" y="197" width="1.1415%" height="15" fill="rgb(210,31,41)" fg:x="350" fg:w="1818"/><text x="0.4698%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,818 samples, 1.14%)</title><rect x="0.2198%" y="181" width="1.1415%" height="15" fill="rgb(221,200,47)" fg:x="350" fg:w="1818"/><text x="0.4698%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1,807 samples, 1.13%)</title><rect x="0.2267%" y="165" width="1.1346%" height="15" fill="rgb(226,26,5)" fg:x="361" fg:w="1807"/><text x="0.4767%" y="175.50"></text></g><g><title>malloc (1,664 samples, 1.04%)</title><rect x="0.3165%" y="149" width="1.0448%" height="15" fill="rgb(249,33,26)" fg:x="504" fg:w="1664"/><text x="0.5665%" y="159.50"></text></g><g><title>[libc.so.6] (1,036 samples, 0.65%)</title><rect x="0.7108%" y="133" width="0.6505%" height="15" fill="rgb(235,183,28)" fg:x="1132" fg:w="1036"/><text x="0.9608%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,902 samples, 1.19%)</title><rect x="0.1746%" y="245" width="1.1943%" height="15" fill="rgb(221,5,38)" fg:x="278" fg:w="1902"/><text x="0.4246%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,902 samples, 1.19%)</title><rect x="0.1746%" y="229" width="1.1943%" height="15" fill="rgb(247,18,42)" fg:x="278" fg:w="1902"/><text x="0.4246%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,902 samples, 1.19%)</title><rect x="0.1746%" y="213" width="1.1943%" height="15" fill="rgb(241,131,45)" fg:x="278" fg:w="1902"/><text x="0.4246%" y="223.50"></text></g><g><title>[libc.so.6] (158 samples, 0.10%)</title><rect x="1.4128%" y="213" width="0.0992%" height="15" fill="rgb(249,31,29)" fg:x="2250" fg:w="158"/><text x="1.6628%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,131 samples, 1.34%)</title><rect x="0.1746%" y="309" width="1.3381%" height="15" fill="rgb(225,111,53)" fg:x="278" fg:w="2131"/><text x="0.4246%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,131 samples, 1.34%)</title><rect x="0.1746%" y="293" width="1.3381%" height="15" fill="rgb(238,160,17)" fg:x="278" fg:w="2131"/><text x="0.4246%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (2,131 samples, 1.34%)</title><rect x="0.1746%" y="277" width="1.3381%" height="15" fill="rgb(214,148,48)" fg:x="278" fg:w="2131"/><text x="0.4246%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,131 samples, 1.34%)</title><rect x="0.1746%" y="261" width="1.3381%" height="15" fill="rgb(232,36,49)" fg:x="278" fg:w="2131"/><text x="0.4246%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (229 samples, 0.14%)</title><rect x="1.3688%" y="245" width="0.1438%" height="15" fill="rgb(209,103,24)" fg:x="2180" fg:w="229"/><text x="1.6188%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (229 samples, 0.14%)</title><rect x="1.3688%" y="229" width="0.1438%" height="15" fill="rgb(229,88,8)" fg:x="2180" fg:w="229"/><text x="1.6188%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.03%)</title><rect x="1.5126%" y="309" width="0.0276%" height="15" fill="rgb(213,181,19)" fg:x="2409" fg:w="44"/><text x="1.7626%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (32 samples, 0.02%)</title><rect x="1.5402%" y="309" width="0.0201%" height="15" fill="rgb(254,191,54)" fg:x="2453" fg:w="32"/><text x="1.7902%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (511 samples, 0.32%)</title><rect x="1.5666%" y="261" width="0.3209%" height="15" fill="rgb(241,83,37)" fg:x="2495" fg:w="511"/><text x="1.8166%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (511 samples, 0.32%)</title><rect x="1.5666%" y="245" width="0.3209%" height="15" fill="rgb(233,36,39)" fg:x="2495" fg:w="511"/><text x="1.8166%" y="255.50"></text></g><g><title>alloc::alloc::alloc (511 samples, 0.32%)</title><rect x="1.5666%" y="229" width="0.3209%" height="15" fill="rgb(226,3,54)" fg:x="2495" fg:w="511"/><text x="1.8166%" y="239.50"></text></g><g><title>malloc (472 samples, 0.30%)</title><rect x="1.5911%" y="213" width="0.2964%" height="15" fill="rgb(245,192,40)" fg:x="2534" fg:w="472"/><text x="1.8411%" y="223.50"></text></g><g><title>[libc.so.6] (338 samples, 0.21%)</title><rect x="1.6752%" y="197" width="0.2122%" height="15" fill="rgb(238,167,29)" fg:x="2668" fg:w="338"/><text x="1.9252%" y="207.50"></text></g><g><title>[libc.so.6] (61 samples, 0.04%)</title><rect x="1.8492%" y="181" width="0.0383%" height="15" fill="rgb(232,182,51)" fg:x="2945" fg:w="61"/><text x="2.0992%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (526 samples, 0.33%)</title><rect x="1.5603%" y="309" width="0.3303%" height="15" fill="rgb(231,60,39)" fg:x="2485" fg:w="526"/><text x="1.8103%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (523 samples, 0.33%)</title><rect x="1.5622%" y="293" width="0.3284%" height="15" fill="rgb(208,69,12)" fg:x="2488" fg:w="523"/><text x="1.8122%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (523 samples, 0.33%)</title><rect x="1.5622%" y="277" width="0.3284%" height="15" fill="rgb(235,93,37)" fg:x="2488" fg:w="523"/><text x="1.8122%" y="287.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (33 samples, 0.02%)</title><rect x="1.8906%" y="309" width="0.0207%" height="15" fill="rgb(213,116,39)" fg:x="3011" fg:w="33"/><text x="2.1406%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15,622 samples, 9.81%)</title><rect x="0.1513%" y="373" width="9.8091%" height="15" fill="rgb(222,207,29)" fg:x="241" fg:w="15622"/><text x="0.4013%" y="383.50">&lt;alloc::vec::V..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15,607 samples, 9.80%)</title><rect x="0.1607%" y="357" width="9.7996%" height="15" fill="rgb(206,96,30)" fg:x="256" fg:w="15607"/><text x="0.4107%" y="367.50">alloc::slice::..</text></g><g><title>alloc::slice::hack::to_vec (15,607 samples, 9.80%)</title><rect x="0.1607%" y="341" width="9.7996%" height="15" fill="rgb(218,138,4)" fg:x="256" fg:w="15607"/><text x="0.4107%" y="351.50">alloc::slice::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15,607 samples, 9.80%)</title><rect x="0.1607%" y="325" width="9.7996%" height="15" fill="rgb(250,191,14)" fg:x="256" fg:w="15607"/><text x="0.4107%" y="335.50">&lt;T as alloc::s..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12,819 samples, 8.05%)</title><rect x="1.9113%" y="309" width="8.0491%" height="15" fill="rgb(239,60,40)" fg:x="3044" fg:w="12819"/><text x="2.1613%" y="319.50">core::ptr::..</text></g><g><title>core::intrinsics::copy_nonoverlapping (12,819 samples, 8.05%)</title><rect x="1.9113%" y="293" width="8.0491%" height="15" fill="rgb(206,27,48)" fg:x="3044" fg:w="12819"/><text x="2.1613%" y="303.50">core::intri..</text></g><g><title>[libc.so.6] (12,807 samples, 8.04%)</title><rect x="1.9189%" y="277" width="8.0415%" height="15" fill="rgb(225,35,8)" fg:x="3056" fg:w="12807"/><text x="2.1689%" y="287.50">[libc.so.6]</text></g><g><title>&lt;tetrs::logic::state::State as core::clone::Clone&gt;::clone (15,651 samples, 9.83%)</title><rect x="0.1406%" y="389" width="9.8273%" height="15" fill="rgb(250,213,24)" fg:x="224" fg:w="15651"/><text x="0.3906%" y="399.50">&lt;tetrs::logic:..</text></g><g><title>[libc.so.6] (46 samples, 0.03%)</title><rect x="10.3390%" y="261" width="0.0289%" height="15" fill="rgb(247,123,22)" fg:x="16466" fg:w="46"/><text x="10.5890%" y="271.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (638 samples, 0.40%)</title><rect x="9.9679%" y="389" width="0.4006%" height="15" fill="rgb(231,138,38)" fg:x="15875" fg:w="638"/><text x="10.2179%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (634 samples, 0.40%)</title><rect x="9.9704%" y="373" width="0.3981%" height="15" fill="rgb(231,145,46)" fg:x="15879" fg:w="634"/><text x="10.2204%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (586 samples, 0.37%)</title><rect x="10.0006%" y="357" width="0.3679%" height="15" fill="rgb(251,118,11)" fg:x="15927" fg:w="586"/><text x="10.2506%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (578 samples, 0.36%)</title><rect x="10.0056%" y="341" width="0.3629%" height="15" fill="rgb(217,147,25)" fg:x="15935" fg:w="578"/><text x="10.2556%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (578 samples, 0.36%)</title><rect x="10.0056%" y="325" width="0.3629%" height="15" fill="rgb(247,81,37)" fg:x="15935" fg:w="578"/><text x="10.2556%" y="335.50"></text></g><g><title>alloc::alloc::alloc (578 samples, 0.36%)</title><rect x="10.0056%" y="309" width="0.3629%" height="15" fill="rgb(209,12,38)" fg:x="15935" fg:w="578"/><text x="10.2556%" y="319.50"></text></g><g><title>malloc (566 samples, 0.36%)</title><rect x="10.0131%" y="293" width="0.3554%" height="15" fill="rgb(227,1,9)" fg:x="15947" fg:w="566"/><text x="10.2631%" y="303.50"></text></g><g><title>[libc.so.6] (480 samples, 0.30%)</title><rect x="10.0671%" y="277" width="0.3014%" height="15" fill="rgb(248,47,43)" fg:x="16033" fg:w="480"/><text x="10.3171%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.01%)</title><rect x="10.3735%" y="293" width="0.0119%" height="15" fill="rgb(221,10,30)" fg:x="16521" fg:w="19"/><text x="10.6235%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.01%)</title><rect x="10.3735%" y="277" width="0.0119%" height="15" fill="rgb(210,229,1)" fg:x="16521" fg:w="19"/><text x="10.6235%" y="287.50"></text></g><g><title>cfree (19 samples, 0.01%)</title><rect x="10.3735%" y="261" width="0.0119%" height="15" fill="rgb(222,148,37)" fg:x="16521" fg:w="19"/><text x="10.6235%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tetrs::logic::state::State&gt;&gt; (24 samples, 0.02%)</title><rect x="10.3735%" y="389" width="0.0151%" height="15" fill="rgb(234,67,33)" fg:x="16521" fg:w="24"/><text x="10.6235%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="10.3735%" y="373" width="0.0151%" height="15" fill="rgb(247,98,35)" fg:x="16521" fg:w="24"/><text x="10.6235%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;tetrs::logic::state::State,alloc::alloc::Global&gt;&gt; (24 samples, 0.02%)</title><rect x="10.3735%" y="357" width="0.0151%" height="15" fill="rgb(247,138,52)" fg:x="16521" fg:w="24"/><text x="10.6235%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="10.3735%" y="341" width="0.0151%" height="15" fill="rgb(213,79,30)" fg:x="16521" fg:w="24"/><text x="10.6235%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tetrs::logic::state::State&gt;&gt; (24 samples, 0.02%)</title><rect x="10.3735%" y="325" width="0.0151%" height="15" fill="rgb(246,177,23)" fg:x="16521" fg:w="24"/><text x="10.6235%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="10.3735%" y="309" width="0.0151%" height="15" fill="rgb(230,62,27)" fg:x="16521" fg:w="24"/><text x="10.6235%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;priority_queue::priority_queue::PriorityQueue&lt;alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,i32&gt;&gt; (16 samples, 0.01%)</title><rect x="10.3886%" y="389" width="0.0100%" height="15" fill="rgb(216,154,8)" fg:x="16545" fg:w="16"/><text x="10.6386%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;priority_queue::store::Store&lt;alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,i32&gt;&gt; (16 samples, 0.01%)</title><rect x="10.3886%" y="373" width="0.0100%" height="15" fill="rgb(244,35,45)" fg:x="16545" fg:w="16"/><text x="10.6386%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (56 samples, 0.04%)</title><rect x="10.4288%" y="229" width="0.0352%" height="15" fill="rgb(251,115,12)" fg:x="16609" fg:w="56"/><text x="10.6788%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (56 samples, 0.04%)</title><rect x="10.4288%" y="213" width="0.0352%" height="15" fill="rgb(240,54,50)" fg:x="16609" fg:w="56"/><text x="10.6788%" y="223.50"></text></g><g><title>cfree (46 samples, 0.03%)</title><rect x="10.4351%" y="197" width="0.0289%" height="15" fill="rgb(233,84,52)" fg:x="16619" fg:w="46"/><text x="10.6851%" y="207.50"></text></g><g><title>[libc.so.6] (36 samples, 0.02%)</title><rect x="10.4414%" y="181" width="0.0226%" height="15" fill="rgb(207,117,47)" fg:x="16629" fg:w="36"/><text x="10.6914%" y="191.50"></text></g><g><title>cfree (2,668 samples, 1.68%)</title><rect x="10.4684%" y="229" width="1.6752%" height="15" fill="rgb(249,43,39)" fg:x="16672" fg:w="2668"/><text x="10.7184%" y="239.50"></text></g><g><title>[libc.so.6] (2,558 samples, 1.61%)</title><rect x="10.5374%" y="213" width="1.6062%" height="15" fill="rgb(209,38,44)" fg:x="16782" fg:w="2558"/><text x="10.7874%" y="223.50"></text></g><g><title>[libc.so.6] (2,496 samples, 1.57%)</title><rect x="10.5763%" y="197" width="1.5672%" height="15" fill="rgb(236,212,23)" fg:x="16844" fg:w="2496"/><text x="10.8263%" y="207.50"></text></g><g><title>[libc.so.6] (2,379 samples, 1.49%)</title><rect x="10.6498%" y="181" width="1.4938%" height="15" fill="rgb(242,79,21)" fg:x="16961" fg:w="2379"/><text x="10.8998%" y="191.50"></text></g><g><title>[libc.so.6] (487 samples, 0.31%)</title><rect x="11.8378%" y="165" width="0.3058%" height="15" fill="rgb(211,96,35)" fg:x="18853" fg:w="487"/><text x="12.0878%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,192 samples, 0.75%)</title><rect x="12.1555%" y="117" width="0.7485%" height="15" fill="rgb(253,215,40)" fg:x="19359" fg:w="1192"/><text x="12.4055%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (1,192 samples, 0.75%)</title><rect x="12.1555%" y="101" width="0.7485%" height="15" fill="rgb(211,81,21)" fg:x="19359" fg:w="1192"/><text x="12.4055%" y="111.50"></text></g><g><title>cfree (1,147 samples, 0.72%)</title><rect x="12.1838%" y="85" width="0.7202%" height="15" fill="rgb(208,190,38)" fg:x="19404" fg:w="1147"/><text x="12.4338%" y="95.50"></text></g><g><title>[libc.so.6] (795 samples, 0.50%)</title><rect x="12.4048%" y="69" width="0.4992%" height="15" fill="rgb(235,213,38)" fg:x="19756" fg:w="795"/><text x="12.6548%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,320 samples, 0.83%)</title><rect x="12.1486%" y="197" width="0.8288%" height="15" fill="rgb(237,122,38)" fg:x="19348" fg:w="1320"/><text x="12.3986%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u16&gt;]&gt; (1,317 samples, 0.83%)</title><rect x="12.1505%" y="181" width="0.8269%" height="15" fill="rgb(244,218,35)" fg:x="19351" fg:w="1317"/><text x="12.4005%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (1,309 samples, 0.82%)</title><rect x="12.1555%" y="165" width="0.8219%" height="15" fill="rgb(240,68,47)" fg:x="19359" fg:w="1309"/><text x="12.4055%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (1,309 samples, 0.82%)</title><rect x="12.1555%" y="149" width="0.8219%" height="15" fill="rgb(210,16,53)" fg:x="19359" fg:w="1309"/><text x="12.4055%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,309 samples, 0.82%)</title><rect x="12.1555%" y="133" width="0.8219%" height="15" fill="rgb(235,124,12)" fg:x="19359" fg:w="1309"/><text x="12.4055%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (117 samples, 0.07%)</title><rect x="12.9040%" y="117" width="0.0735%" height="15" fill="rgb(224,169,11)" fg:x="20551" fg:w="117"/><text x="13.1540%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (241 samples, 0.15%)</title><rect x="12.9774%" y="165" width="0.1513%" height="15" fill="rgb(250,166,2)" fg:x="20668" fg:w="241"/><text x="13.2274%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (241 samples, 0.15%)</title><rect x="12.9774%" y="149" width="0.1513%" height="15" fill="rgb(242,216,29)" fg:x="20668" fg:w="241"/><text x="13.2274%" y="159.50"></text></g><g><title>cfree (231 samples, 0.15%)</title><rect x="12.9837%" y="133" width="0.1450%" height="15" fill="rgb(230,116,27)" fg:x="20678" fg:w="231"/><text x="13.2337%" y="143.50"></text></g><g><title>[libc.so.6] (201 samples, 0.13%)</title><rect x="13.0026%" y="117" width="0.1262%" height="15" fill="rgb(228,99,48)" fg:x="20708" fg:w="201"/><text x="13.2526%" y="127.50"></text></g><g><title>[libc.so.6] (145 samples, 0.09%)</title><rect x="13.0377%" y="101" width="0.0910%" height="15" fill="rgb(253,11,6)" fg:x="20764" fg:w="145"/><text x="13.2877%" y="111.50"></text></g><g><title>[libc.so.6] (98 samples, 0.06%)</title><rect x="13.0672%" y="85" width="0.0615%" height="15" fill="rgb(247,143,39)" fg:x="20811" fg:w="98"/><text x="13.3172%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (1,571 samples, 0.99%)</title><rect x="12.1486%" y="213" width="0.9864%" height="15" fill="rgb(236,97,10)" fg:x="19348" fg:w="1571"/><text x="12.3986%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (251 samples, 0.16%)</title><rect x="12.9774%" y="197" width="0.1576%" height="15" fill="rgb(233,208,19)" fg:x="20668" fg:w="251"/><text x="13.2274%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (251 samples, 0.16%)</title><rect x="12.9774%" y="181" width="0.1576%" height="15" fill="rgb(216,164,2)" fg:x="20668" fg:w="251"/><text x="13.2274%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (18 samples, 0.01%)</title><rect x="13.1350%" y="213" width="0.0113%" height="15" fill="rgb(220,129,5)" fg:x="20919" fg:w="18"/><text x="13.3850%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (18 samples, 0.01%)</title><rect x="13.1350%" y="197" width="0.0113%" height="15" fill="rgb(242,17,10)" fg:x="20919" fg:w="18"/><text x="13.3850%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="13.1350%" y="181" width="0.0113%" height="15" fill="rgb(242,107,0)" fg:x="20919" fg:w="18"/><text x="13.3850%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (68 samples, 0.04%)</title><rect x="13.1463%" y="165" width="0.0427%" height="15" fill="rgb(251,28,31)" fg:x="20937" fg:w="68"/><text x="13.3963%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (68 samples, 0.04%)</title><rect x="13.1463%" y="149" width="0.0427%" height="15" fill="rgb(233,223,10)" fg:x="20937" fg:w="68"/><text x="13.3963%" y="159.50"></text></g><g><title>cfree (65 samples, 0.04%)</title><rect x="13.1482%" y="133" width="0.0408%" height="15" fill="rgb(215,21,27)" fg:x="20940" fg:w="65"/><text x="13.3982%" y="143.50"></text></g><g><title>[libc.so.6] (43 samples, 0.03%)</title><rect x="13.1620%" y="117" width="0.0270%" height="15" fill="rgb(232,23,21)" fg:x="20962" fg:w="43"/><text x="13.4120%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,448 samples, 2.79%)</title><rect x="10.3987%" y="341" width="2.7929%" height="15" fill="rgb(244,5,23)" fg:x="16561" fg:w="4448"/><text x="10.6487%" y="351.50">&lt;h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (4,448 samples, 2.79%)</title><rect x="10.3987%" y="325" width="2.7929%" height="15" fill="rgb(226,81,46)" fg:x="16561" fg:w="4448"/><text x="10.6487%" y="335.50">ha..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4,435 samples, 2.78%)</title><rect x="10.4068%" y="309" width="2.7847%" height="15" fill="rgb(247,70,30)" fg:x="16574" fg:w="4435"/><text x="10.6568%" y="319.50">ha..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4,435 samples, 2.78%)</title><rect x="10.4068%" y="293" width="2.7847%" height="15" fill="rgb(212,68,19)" fg:x="16574" fg:w="4435"/><text x="10.6568%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,alloc::rc::Rc&lt;tetrs::logic::state::State&gt;)&gt; (4,435 samples, 2.78%)</title><rect x="10.4068%" y="277" width="2.7847%" height="15" fill="rgb(240,187,13)" fg:x="16574" fg:w="4435"/><text x="10.6568%" y="287.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;tetrs::logic::state::State&gt;&gt; (4,435 samples, 2.78%)</title><rect x="10.4068%" y="261" width="2.7847%" height="15" fill="rgb(223,113,26)" fg:x="16574" fg:w="4435"/><text x="10.6568%" y="271.50">co..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,435 samples, 2.78%)</title><rect x="10.4068%" y="245" width="2.7847%" height="15" fill="rgb(206,192,2)" fg:x="16574" fg:w="4435"/><text x="10.6568%" y="255.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;tetrs::logic::state::State&gt; (1,669 samples, 1.05%)</title><rect x="12.1436%" y="229" width="1.0480%" height="15" fill="rgb(241,108,4)" fg:x="19340" fg:w="1669"/><text x="12.3936%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;char&gt;&gt; (72 samples, 0.05%)</title><rect x="13.1463%" y="213" width="0.0452%" height="15" fill="rgb(247,173,49)" fg:x="20937" fg:w="72"/><text x="13.3963%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;char&gt;&gt; (72 samples, 0.05%)</title><rect x="13.1463%" y="197" width="0.0452%" height="15" fill="rgb(224,114,35)" fg:x="20937" fg:w="72"/><text x="13.3963%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.05%)</title><rect x="13.1463%" y="181" width="0.0452%" height="15" fill="rgb(245,159,27)" fg:x="20937" fg:w="72"/><text x="13.3963%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,alloc::rc::Rc&lt;tetrs::logic::state::State&gt;&gt;&gt; (4,449 samples, 2.79%)</title><rect x="10.3987%" y="389" width="2.7935%" height="15" fill="rgb(245,172,44)" fg:x="16561" fg:w="4449"/><text x="10.6487%" y="399.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,std::collections::hash::map::RandomState&gt;&gt; (4,449 samples, 2.79%)</title><rect x="10.3987%" y="373" width="2.7935%" height="15" fill="rgb(236,23,11)" fg:x="16561" fg:w="4449"/><text x="10.6487%" y="383.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::rc::Rc&lt;tetrs::logic::state::State&gt;,alloc::rc::Rc&lt;tetrs::logic::state::State&gt;)&gt;&gt; (4,449 samples, 2.79%)</title><rect x="10.3987%" y="357" width="2.7935%" height="15" fill="rgb(205,117,38)" fg:x="16561" fg:w="4449"/><text x="10.6487%" y="367.50">co..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (964 samples, 0.61%)</title><rect x="13.1941%" y="277" width="0.6053%" height="15" fill="rgb(237,72,25)" fg:x="21013" fg:w="964"/><text x="13.4441%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (964 samples, 0.61%)</title><rect x="13.1941%" y="261" width="0.6053%" height="15" fill="rgb(244,70,9)" fg:x="21013" fg:w="964"/><text x="13.4441%" y="271.50"></text></g><g><title>cfree (847 samples, 0.53%)</title><rect x="13.2675%" y="245" width="0.5318%" height="15" fill="rgb(217,125,39)" fg:x="21130" fg:w="847"/><text x="13.5175%" y="255.50"></text></g><g><title>[libc.so.6] (622 samples, 0.39%)</title><rect x="13.4088%" y="229" width="0.3906%" height="15" fill="rgb(235,36,10)" fg:x="21355" fg:w="622"/><text x="13.6588%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (976 samples, 0.61%)</title><rect x="13.1922%" y="357" width="0.6128%" height="15" fill="rgb(251,123,47)" fg:x="21010" fg:w="976"/><text x="13.4422%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u16&gt;]&gt; (976 samples, 0.61%)</title><rect x="13.1922%" y="341" width="0.6128%" height="15" fill="rgb(221,13,13)" fg:x="21010" fg:w="976"/><text x="13.4422%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (974 samples, 0.61%)</title><rect x="13.1934%" y="325" width="0.6116%" height="15" fill="rgb(238,131,9)" fg:x="21012" fg:w="974"/><text x="13.4434%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (974 samples, 0.61%)</title><rect x="13.1934%" y="309" width="0.6116%" height="15" fill="rgb(211,50,8)" fg:x="21012" fg:w="974"/><text x="13.4434%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (974 samples, 0.61%)</title><rect x="13.1934%" y="293" width="0.6116%" height="15" fill="rgb(245,182,24)" fg:x="21012" fg:w="974"/><text x="13.4434%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (75 samples, 0.05%)</title><rect x="13.8050%" y="325" width="0.0471%" height="15" fill="rgb(242,14,37)" fg:x="21986" fg:w="75"/><text x="14.0550%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (75 samples, 0.05%)</title><rect x="13.8050%" y="309" width="0.0471%" height="15" fill="rgb(246,228,12)" fg:x="21986" fg:w="75"/><text x="14.0550%" y="319.50"></text></g><g><title>cfree (73 samples, 0.05%)</title><rect x="13.8063%" y="293" width="0.0458%" height="15" fill="rgb(213,55,15)" fg:x="21988" fg:w="73"/><text x="14.0563%" y="303.50"></text></g><g><title>[libc.so.6] (42 samples, 0.03%)</title><rect x="13.8257%" y="277" width="0.0264%" height="15" fill="rgb(209,9,3)" fg:x="22019" fg:w="42"/><text x="14.0757%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (1,063 samples, 0.67%)</title><rect x="13.1922%" y="373" width="0.6675%" height="15" fill="rgb(230,59,30)" fg:x="21010" fg:w="1063"/><text x="13.4422%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (87 samples, 0.05%)</title><rect x="13.8050%" y="357" width="0.0546%" height="15" fill="rgb(209,121,21)" fg:x="21986" fg:w="87"/><text x="14.0550%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.05%)</title><rect x="13.8050%" y="341" width="0.0546%" height="15" fill="rgb(220,109,13)" fg:x="21986" fg:w="87"/><text x="14.0550%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,418 samples, 0.89%)</title><rect x="13.8615%" y="325" width="0.8904%" height="15" fill="rgb(232,18,1)" fg:x="22076" fg:w="1418"/><text x="14.1115%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1,418 samples, 0.89%)</title><rect x="13.8615%" y="309" width="0.8904%" height="15" fill="rgb(215,41,42)" fg:x="22076" fg:w="1418"/><text x="14.1115%" y="319.50"></text></g><g><title>cfree (1,417 samples, 0.89%)</title><rect x="13.8622%" y="293" width="0.8897%" height="15" fill="rgb(224,123,36)" fg:x="22077" fg:w="1417"/><text x="14.1122%" y="303.50"></text></g><g><title>[libc.so.6] (1,391 samples, 0.87%)</title><rect x="13.8785%" y="277" width="0.8734%" height="15" fill="rgb(240,125,3)" fg:x="22103" fg:w="1391"/><text x="14.1285%" y="287.50"></text></g><g><title>[libc.so.6] (1,327 samples, 0.83%)</title><rect x="13.9187%" y="261" width="0.8332%" height="15" fill="rgb(205,98,50)" fg:x="22167" fg:w="1327"/><text x="14.1687%" y="271.50"></text></g><g><title>[libc.so.6] (1,263 samples, 0.79%)</title><rect x="13.9588%" y="245" width="0.7930%" height="15" fill="rgb(205,185,37)" fg:x="22231" fg:w="1263"/><text x="14.2088%" y="255.50"></text></g><g><title>[libc.so.6] (233 samples, 0.15%)</title><rect x="14.6056%" y="229" width="0.1463%" height="15" fill="rgb(238,207,15)" fg:x="23261" fg:w="233"/><text x="14.8556%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (1,424 samples, 0.89%)</title><rect x="13.8596%" y="373" width="0.8941%" height="15" fill="rgb(213,199,42)" fg:x="22073" fg:w="1424"/><text x="14.1096%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (1,424 samples, 0.89%)</title><rect x="13.8596%" y="357" width="0.8941%" height="15" fill="rgb(235,201,11)" fg:x="22073" fg:w="1424"/><text x="14.1096%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,424 samples, 0.89%)</title><rect x="13.8596%" y="341" width="0.8941%" height="15" fill="rgb(207,46,11)" fg:x="22073" fg:w="1424"/><text x="14.1096%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (69 samples, 0.04%)</title><rect x="14.7557%" y="325" width="0.0433%" height="15" fill="rgb(241,35,35)" fg:x="23500" fg:w="69"/><text x="15.0057%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (69 samples, 0.04%)</title><rect x="14.7557%" y="309" width="0.0433%" height="15" fill="rgb(243,32,47)" fg:x="23500" fg:w="69"/><text x="15.0057%" y="319.50"></text></g><g><title>cfree (69 samples, 0.04%)</title><rect x="14.7557%" y="293" width="0.0433%" height="15" fill="rgb(247,202,23)" fg:x="23500" fg:w="69"/><text x="15.0057%" y="303.50"></text></g><g><title>[libc.so.6] (47 samples, 0.03%)</title><rect x="14.7695%" y="277" width="0.0295%" height="15" fill="rgb(219,102,11)" fg:x="23522" fg:w="47"/><text x="15.0195%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tetrs::logic::state::State&gt; (2,564 samples, 1.61%)</title><rect x="13.1922%" y="389" width="1.6099%" height="15" fill="rgb(243,110,44)" fg:x="21010" fg:w="2564"/><text x="13.4422%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;char&gt;&gt; (77 samples, 0.05%)</title><rect x="14.7538%" y="373" width="0.0483%" height="15" fill="rgb(222,74,54)" fg:x="23497" fg:w="77"/><text x="15.0038%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;char&gt;&gt; (77 samples, 0.05%)</title><rect x="14.7538%" y="357" width="0.0483%" height="15" fill="rgb(216,99,12)" fg:x="23497" fg:w="77"/><text x="15.0038%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.05%)</title><rect x="14.7538%" y="341" width="0.0483%" height="15" fill="rgb(226,22,26)" fg:x="23497" fg:w="77"/><text x="15.0038%" y="351.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (18 samples, 0.01%)</title><rect x="14.8040%" y="373" width="0.0113%" height="15" fill="rgb(217,163,10)" fg:x="23577" fg:w="18"/><text x="15.0540%" y="383.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (45 samples, 0.03%)</title><rect x="14.8153%" y="373" width="0.0283%" height="15" fill="rgb(213,25,53)" fg:x="23595" fg:w="45"/><text x="15.0653%" y="383.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::pop (93 samples, 0.06%)</title><rect x="14.8021%" y="389" width="0.0584%" height="15" fill="rgb(252,105,26)" fg:x="23574" fg:w="93"/><text x="15.0521%" y="399.50"></text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (27 samples, 0.02%)</title><rect x="14.8436%" y="373" width="0.0170%" height="15" fill="rgb(220,39,43)" fg:x="23640" fg:w="27"/><text x="15.0936%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (78 samples, 0.05%)</title><rect x="14.8994%" y="309" width="0.0490%" height="15" fill="rgb(229,68,48)" fg:x="23729" fg:w="78"/><text x="15.1494%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (78 samples, 0.05%)</title><rect x="14.8994%" y="293" width="0.0490%" height="15" fill="rgb(252,8,32)" fg:x="23729" fg:w="78"/><text x="15.1494%" y="303.50"></text></g><g><title>alloc::alloc::realloc (78 samples, 0.05%)</title><rect x="14.8994%" y="277" width="0.0490%" height="15" fill="rgb(223,20,43)" fg:x="23729" fg:w="78"/><text x="15.1494%" y="287.50"></text></g><g><title>realloc (77 samples, 0.05%)</title><rect x="14.9001%" y="261" width="0.0483%" height="15" fill="rgb(229,81,49)" fg:x="23730" fg:w="77"/><text x="15.1501%" y="271.50"></text></g><g><title>[libc.so.6] (71 samples, 0.04%)</title><rect x="14.9038%" y="245" width="0.0446%" height="15" fill="rgb(236,28,36)" fg:x="23736" fg:w="71"/><text x="15.1538%" y="255.50"></text></g><g><title>[libc.so.6] (68 samples, 0.04%)</title><rect x="14.9057%" y="229" width="0.0427%" height="15" fill="rgb(249,185,26)" fg:x="23739" fg:w="68"/><text x="15.1557%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (85 samples, 0.05%)</title><rect x="14.8963%" y="325" width="0.0534%" height="15" fill="rgb(249,174,33)" fg:x="23724" fg:w="85"/><text x="15.1463%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (91 samples, 0.06%)</title><rect x="14.8938%" y="357" width="0.0571%" height="15" fill="rgb(233,201,37)" fg:x="23720" fg:w="91"/><text x="15.1438%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (91 samples, 0.06%)</title><rect x="14.8938%" y="341" width="0.0571%" height="15" fill="rgb(221,78,26)" fg:x="23720" fg:w="91"/><text x="15.1438%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (126 samples, 0.08%)</title><rect x="14.8724%" y="373" width="0.0791%" height="15" fill="rgb(250,127,30)" fg:x="23686" fg:w="126"/><text x="15.1224%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (168 samples, 0.11%)</title><rect x="15.0056%" y="309" width="0.1055%" height="15" fill="rgb(230,49,44)" fg:x="23898" fg:w="168"/><text x="15.2556%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (139 samples, 0.09%)</title><rect x="15.0238%" y="293" width="0.0873%" height="15" fill="rgb(229,67,23)" fg:x="23927" fg:w="139"/><text x="15.2738%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (44 samples, 0.03%)</title><rect x="15.1117%" y="277" width="0.0276%" height="15" fill="rgb(249,83,47)" fg:x="24067" fg:w="44"/><text x="15.3617%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (40 samples, 0.03%)</title><rect x="15.1142%" y="261" width="0.0251%" height="15" fill="rgb(215,43,3)" fg:x="24071" fg:w="40"/><text x="15.3642%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (40 samples, 0.03%)</title><rect x="15.1142%" y="245" width="0.0251%" height="15" fill="rgb(238,154,13)" fg:x="24071" fg:w="40"/><text x="15.3642%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (55 samples, 0.03%)</title><rect x="15.1110%" y="309" width="0.0345%" height="15" fill="rgb(219,56,2)" fg:x="24066" fg:w="55"/><text x="15.3610%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u32 (55 samples, 0.03%)</title><rect x="15.1110%" y="293" width="0.0345%" height="15" fill="rgb(233,0,4)" fg:x="24066" fg:w="55"/><text x="15.3610%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (79 samples, 0.05%)</title><rect x="15.3371%" y="213" width="0.0496%" height="15" fill="rgb(235,30,7)" fg:x="24426" fg:w="79"/><text x="15.5871%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (217 samples, 0.14%)</title><rect x="15.3038%" y="229" width="0.1363%" height="15" fill="rgb(250,79,13)" fg:x="24373" fg:w="217"/><text x="15.5538%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (85 samples, 0.05%)</title><rect x="15.3867%" y="213" width="0.0534%" height="15" fill="rgb(211,146,34)" fg:x="24505" fg:w="85"/><text x="15.6367%" y="223.50"></text></g><g><title>core::cmp::min (135 samples, 0.08%)</title><rect x="15.4401%" y="229" width="0.0848%" height="15" fill="rgb(228,22,38)" fg:x="24590" fg:w="135"/><text x="15.6901%" y="239.50"></text></g><g><title>core::cmp::Ord::min (135 samples, 0.08%)</title><rect x="15.4401%" y="213" width="0.0848%" height="15" fill="rgb(235,168,5)" fg:x="24590" fg:w="135"/><text x="15.6901%" y="223.50"></text></g><g><title>core::cmp::min_by (135 samples, 0.08%)</title><rect x="15.4401%" y="197" width="0.0848%" height="15" fill="rgb(221,155,16)" fg:x="24590" fg:w="135"/><text x="15.6901%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (816 samples, 0.51%)</title><rect x="15.1456%" y="277" width="0.5124%" height="15" fill="rgb(215,215,53)" fg:x="24121" fg:w="816"/><text x="15.3956%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (816 samples, 0.51%)</title><rect x="15.1456%" y="261" width="0.5124%" height="15" fill="rgb(223,4,10)" fg:x="24121" fg:w="816"/><text x="15.3956%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (816 samples, 0.51%)</title><rect x="15.1456%" y="245" width="0.5124%" height="15" fill="rgb(234,103,6)" fg:x="24121" fg:w="816"/><text x="15.3956%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (212 samples, 0.13%)</title><rect x="15.5248%" y="229" width="0.1331%" height="15" fill="rgb(227,97,0)" fg:x="24725" fg:w="212"/><text x="15.7748%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::hash::Hash&gt;::hash (1,277 samples, 0.80%)</title><rect x="14.9585%" y="341" width="0.8018%" height="15" fill="rgb(234,150,53)" fg:x="23823" fg:w="1277"/><text x="15.2085%" y="351.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::hash::Hash&gt;::hash (1,277 samples, 0.80%)</title><rect x="14.9585%" y="325" width="0.8018%" height="15" fill="rgb(228,201,54)" fg:x="23823" fg:w="1277"/><text x="15.2085%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (979 samples, 0.61%)</title><rect x="15.1456%" y="309" width="0.6147%" height="15" fill="rgb(222,22,37)" fg:x="24121" fg:w="979"/><text x="15.3956%" y="319.50"></text></g><g><title>core::hash::Hasher::write_u16 (979 samples, 0.61%)</title><rect x="15.1456%" y="293" width="0.6147%" height="15" fill="rgb(237,53,32)" fg:x="24121" fg:w="979"/><text x="15.3956%" y="303.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (163 samples, 0.10%)</title><rect x="15.6579%" y="277" width="0.1023%" height="15" fill="rgb(233,25,53)" fg:x="24937" fg:w="163"/><text x="15.9079%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (55 samples, 0.03%)</title><rect x="15.7672%" y="293" width="0.0345%" height="15" fill="rgb(210,40,34)" fg:x="25111" fg:w="55"/><text x="16.0172%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (34 samples, 0.02%)</title><rect x="15.7804%" y="277" width="0.0213%" height="15" fill="rgb(241,220,44)" fg:x="25132" fg:w="34"/><text x="16.0304%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (37 samples, 0.02%)</title><rect x="15.8068%" y="277" width="0.0232%" height="15" fill="rgb(235,28,35)" fg:x="25174" fg:w="37"/><text x="16.0568%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (118 samples, 0.07%)</title><rect x="15.7603%" y="341" width="0.0741%" height="15" fill="rgb(210,56,17)" fg:x="25100" fg:w="118"/><text x="16.0103%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (118 samples, 0.07%)</title><rect x="15.7603%" y="325" width="0.0741%" height="15" fill="rgb(224,130,29)" fg:x="25100" fg:w="118"/><text x="16.0103%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (118 samples, 0.07%)</title><rect x="15.7603%" y="309" width="0.0741%" height="15" fill="rgb(235,212,8)" fg:x="25100" fg:w="118"/><text x="16.0103%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (52 samples, 0.03%)</title><rect x="15.8017%" y="293" width="0.0327%" height="15" fill="rgb(223,33,50)" fg:x="25166" fg:w="52"/><text x="16.0517%" y="303.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1,406 samples, 0.88%)</title><rect x="14.9585%" y="357" width="0.8828%" height="15" fill="rgb(219,149,13)" fg:x="23823" fg:w="1406"/><text x="15.2085%" y="367.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::cmp::PartialEq&gt;::eq (53 samples, 0.03%)</title><rect x="15.8752%" y="229" width="0.0333%" height="15" fill="rgb(250,156,29)" fg:x="25283" fg:w="53"/><text x="16.1252%" y="239.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (53 samples, 0.03%)</title><rect x="15.8752%" y="213" width="0.0333%" height="15" fill="rgb(216,193,19)" fg:x="25283" fg:w="53"/><text x="16.1252%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (51 samples, 0.03%)</title><rect x="15.8765%" y="197" width="0.0320%" height="15" fill="rgb(216,135,14)" fg:x="25285" fg:w="51"/><text x="16.1265%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (51 samples, 0.03%)</title><rect x="15.8765%" y="181" width="0.0320%" height="15" fill="rgb(241,47,5)" fg:x="25285" fg:w="51"/><text x="16.1265%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (45 samples, 0.03%)</title><rect x="15.8802%" y="165" width="0.0283%" height="15" fill="rgb(233,42,35)" fg:x="25291" fg:w="45"/><text x="16.1302%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (45 samples, 0.03%)</title><rect x="15.8802%" y="149" width="0.0283%" height="15" fill="rgb(231,13,6)" fg:x="25291" fg:w="45"/><text x="16.1302%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (45 samples, 0.03%)</title><rect x="15.8802%" y="133" width="0.0283%" height="15" fill="rgb(207,181,40)" fg:x="25291" fg:w="45"/><text x="16.1302%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (45 samples, 0.03%)</title><rect x="15.8802%" y="117" width="0.0283%" height="15" fill="rgb(254,173,49)" fg:x="25291" fg:w="45"/><text x="16.1302%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (45 samples, 0.03%)</title><rect x="15.8802%" y="101" width="0.0283%" height="15" fill="rgb(221,1,38)" fg:x="25291" fg:w="45"/><text x="16.1302%" y="111.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (45 samples, 0.03%)</title><rect x="15.8802%" y="85" width="0.0283%" height="15" fill="rgb(206,124,46)" fg:x="25291" fg:w="45"/><text x="16.1302%" y="95.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (45 samples, 0.03%)</title><rect x="15.8802%" y="69" width="0.0283%" height="15" fill="rgb(249,21,11)" fg:x="25291" fg:w="45"/><text x="16.1302%" y="79.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (45 samples, 0.03%)</title><rect x="15.8802%" y="53" width="0.0283%" height="15" fill="rgb(222,201,40)" fg:x="25291" fg:w="45"/><text x="16.1302%" y="63.50"></text></g><g><title>[libc.so.6] (31 samples, 0.02%)</title><rect x="15.8890%" y="37" width="0.0195%" height="15" fill="rgb(235,61,29)" fg:x="25305" fg:w="31"/><text x="16.1390%" y="47.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (70 samples, 0.04%)</title><rect x="15.8689%" y="309" width="0.0440%" height="15" fill="rgb(219,207,3)" fg:x="25273" fg:w="70"/><text x="16.1189%" y="319.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (69 samples, 0.04%)</title><rect x="15.8695%" y="293" width="0.0433%" height="15" fill="rgb(222,56,46)" fg:x="25274" fg:w="69"/><text x="16.1195%" y="303.50"></text></g><g><title>&lt;Q as indexmap::equivalent::Equivalent&lt;K&gt;&gt;::equivalent (60 samples, 0.04%)</title><rect x="15.8752%" y="277" width="0.0377%" height="15" fill="rgb(239,76,54)" fg:x="25283" fg:w="60"/><text x="16.1252%" y="287.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (60 samples, 0.04%)</title><rect x="15.8752%" y="261" width="0.0377%" height="15" fill="rgb(231,124,27)" fg:x="25283" fg:w="60"/><text x="16.1252%" y="271.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as alloc::rc::RcEqIdent&lt;T,A&gt;&gt;::eq (60 samples, 0.04%)</title><rect x="15.8752%" y="245" width="0.0377%" height="15" fill="rgb(249,195,6)" fg:x="25283" fg:w="60"/><text x="16.1252%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (59 samples, 0.04%)</title><rect x="15.9261%" y="309" width="0.0370%" height="15" fill="rgb(237,174,47)" fg:x="25364" fg:w="59"/><text x="16.1761%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (59 samples, 0.04%)</title><rect x="15.9261%" y="293" width="0.0370%" height="15" fill="rgb(206,201,31)" fg:x="25364" fg:w="59"/><text x="16.1761%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (59 samples, 0.04%)</title><rect x="15.9261%" y="277" width="0.0370%" height="15" fill="rgb(231,57,52)" fg:x="25364" fg:w="59"/><text x="16.1761%" y="287.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::entry (1,634 samples, 1.03%)</title><rect x="14.9516%" y="373" width="1.0260%" height="15" fill="rgb(248,177,22)" fg:x="23812" fg:w="1634"/><text x="15.2016%" y="383.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (217 samples, 0.14%)</title><rect x="15.8413%" y="357" width="0.1363%" height="15" fill="rgb(215,211,37)" fg:x="25229" fg:w="217"/><text x="16.0913%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (196 samples, 0.12%)</title><rect x="15.8545%" y="341" width="0.1231%" height="15" fill="rgb(241,128,51)" fg:x="25250" fg:w="196"/><text x="16.1045%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (189 samples, 0.12%)</title><rect x="15.8589%" y="325" width="0.1187%" height="15" fill="rgb(227,165,31)" fg:x="25257" fg:w="189"/><text x="16.1089%" y="335.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (16 samples, 0.01%)</title><rect x="15.9675%" y="309" width="0.0100%" height="15" fill="rgb(228,167,24)" fg:x="25430" fg:w="16"/><text x="16.2175%" y="319.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (16 samples, 0.01%)</title><rect x="15.9675%" y="293" width="0.0100%" height="15" fill="rgb(228,143,12)" fg:x="25430" fg:w="16"/><text x="16.2175%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="15.9675%" y="277" width="0.0100%" height="15" fill="rgb(249,149,8)" fg:x="25430" fg:w="16"/><text x="16.2175%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.01%)</title><rect x="15.9907%" y="341" width="0.0119%" height="15" fill="rgb(243,35,44)" fg:x="25467" fg:w="19"/><text x="16.2407%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::bucket_ptr (18 samples, 0.01%)</title><rect x="16.0334%" y="261" width="0.0113%" height="15" fill="rgb(246,89,9)" fg:x="25535" fg:w="18"/><text x="16.2834%" y="271.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (25 samples, 0.02%)</title><rect x="16.0680%" y="229" width="0.0157%" height="15" fill="rgb(233,213,13)" fg:x="25590" fg:w="25"/><text x="16.3180%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (25 samples, 0.02%)</title><rect x="16.0680%" y="213" width="0.0157%" height="15" fill="rgb(233,141,41)" fg:x="25590" fg:w="25"/><text x="16.3180%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (80 samples, 0.05%)</title><rect x="16.0447%" y="245" width="0.0502%" height="15" fill="rgb(239,167,4)" fg:x="25553" fg:w="80"/><text x="16.2947%" y="255.50"></text></g><g><title>hashbrown::raw::inner::unlikely (18 samples, 0.01%)</title><rect x="16.0837%" y="229" width="0.0113%" height="15" fill="rgb(209,217,16)" fg:x="25615" fg:w="18"/><text x="16.3337%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_insert_slot (81 samples, 0.05%)</title><rect x="16.0447%" y="261" width="0.0509%" height="15" fill="rgb(219,88,35)" fg:x="25553" fg:w="81"/><text x="16.2947%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (16 samples, 0.01%)</title><rect x="16.0975%" y="229" width="0.0100%" height="15" fill="rgb(220,193,23)" fg:x="25637" fg:w="16"/><text x="16.3475%" y="239.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (16 samples, 0.01%)</title><rect x="16.0975%" y="213" width="0.0100%" height="15" fill="rgb(230,90,52)" fg:x="25637" fg:w="16"/><text x="16.3475%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="16.0975%" y="197" width="0.0100%" height="15" fill="rgb(252,106,19)" fg:x="25637" fg:w="16"/><text x="16.3475%" y="207.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="16.0975%" y="181" width="0.0100%" height="15" fill="rgb(206,74,20)" fg:x="25637" fg:w="16"/><text x="16.3475%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (154 samples, 0.10%)</title><rect x="16.0115%" y="325" width="0.0967%" height="15" fill="rgb(230,138,44)" fg:x="25500" fg:w="154"/><text x="16.2615%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (154 samples, 0.10%)</title><rect x="16.0115%" y="309" width="0.0967%" height="15" fill="rgb(235,182,43)" fg:x="25500" fg:w="154"/><text x="16.2615%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (153 samples, 0.10%)</title><rect x="16.0121%" y="293" width="0.0961%" height="15" fill="rgb(242,16,51)" fg:x="25501" fg:w="153"/><text x="16.2621%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (145 samples, 0.09%)</title><rect x="16.0171%" y="277" width="0.0910%" height="15" fill="rgb(248,9,4)" fg:x="25509" fg:w="145"/><text x="16.2671%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (20 samples, 0.01%)</title><rect x="16.0956%" y="261" width="0.0126%" height="15" fill="rgb(210,31,22)" fg:x="25634" fg:w="20"/><text x="16.3456%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (20 samples, 0.01%)</title><rect x="16.0956%" y="245" width="0.0126%" height="15" fill="rgb(239,54,39)" fg:x="25634" fg:w="20"/><text x="16.3456%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (20 samples, 0.01%)</title><rect x="16.1081%" y="325" width="0.0126%" height="15" fill="rgb(230,99,41)" fg:x="25654" fg:w="20"/><text x="16.3581%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (194 samples, 0.12%)</title><rect x="16.0027%" y="341" width="0.1218%" height="15" fill="rgb(253,106,12)" fg:x="25486" fg:w="194"/><text x="16.2527%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (44 samples, 0.03%)</title><rect x="16.1251%" y="245" width="0.0276%" height="15" fill="rgb(213,46,41)" fg:x="25681" fg:w="44"/><text x="16.3751%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (44 samples, 0.03%)</title><rect x="16.1251%" y="229" width="0.0276%" height="15" fill="rgb(215,133,35)" fg:x="25681" fg:w="44"/><text x="16.3751%" y="239.50"></text></g><g><title>alloc::alloc::realloc (44 samples, 0.03%)</title><rect x="16.1251%" y="213" width="0.0276%" height="15" fill="rgb(213,28,5)" fg:x="25681" fg:w="44"/><text x="16.3751%" y="223.50"></text></g><g><title>realloc (44 samples, 0.03%)</title><rect x="16.1251%" y="197" width="0.0276%" height="15" fill="rgb(215,77,49)" fg:x="25681" fg:w="44"/><text x="16.3751%" y="207.50"></text></g><g><title>[libc.so.6] (36 samples, 0.02%)</title><rect x="16.1301%" y="181" width="0.0226%" height="15" fill="rgb(248,100,22)" fg:x="25689" fg:w="36"/><text x="16.3801%" y="191.50"></text></g><g><title>[libc.so.6] (33 samples, 0.02%)</title><rect x="16.1320%" y="165" width="0.0207%" height="15" fill="rgb(208,67,9)" fg:x="25692" fg:w="33"/><text x="16.3820%" y="175.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (281 samples, 0.18%)</title><rect x="15.9775%" y="373" width="0.1764%" height="15" fill="rgb(219,133,21)" fg:x="25446" fg:w="281"/><text x="16.2275%" y="383.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (268 samples, 0.17%)</title><rect x="15.9857%" y="357" width="0.1683%" height="15" fill="rgb(246,46,29)" fg:x="25459" fg:w="268"/><text x="16.2357%" y="367.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (47 samples, 0.03%)</title><rect x="16.1245%" y="341" width="0.0295%" height="15" fill="rgb(246,185,52)" fg:x="25680" fg:w="47"/><text x="16.3745%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (47 samples, 0.03%)</title><rect x="16.1245%" y="325" width="0.0295%" height="15" fill="rgb(252,136,11)" fg:x="25680" fg:w="47"/><text x="16.3745%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (47 samples, 0.03%)</title><rect x="16.1245%" y="309" width="0.0295%" height="15" fill="rgb(219,138,53)" fg:x="25680" fg:w="47"/><text x="16.3745%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (47 samples, 0.03%)</title><rect x="16.1245%" y="293" width="0.0295%" height="15" fill="rgb(211,51,23)" fg:x="25680" fg:w="47"/><text x="16.3745%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (47 samples, 0.03%)</title><rect x="16.1245%" y="277" width="0.0295%" height="15" fill="rgb(247,221,28)" fg:x="25680" fg:w="47"/><text x="16.3745%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (47 samples, 0.03%)</title><rect x="16.1245%" y="261" width="0.0295%" height="15" fill="rgb(251,222,45)" fg:x="25680" fg:w="47"/><text x="16.3745%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (88 samples, 0.06%)</title><rect x="16.1967%" y="357" width="0.0553%" height="15" fill="rgb(217,162,53)" fg:x="25795" fg:w="88"/><text x="16.4467%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (88 samples, 0.06%)</title><rect x="16.1967%" y="341" width="0.0553%" height="15" fill="rgb(229,93,14)" fg:x="25795" fg:w="88"/><text x="16.4467%" y="351.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (185 samples, 0.12%)</title><rect x="16.1540%" y="373" width="0.1162%" height="15" fill="rgb(209,67,49)" fg:x="25727" fg:w="185"/><text x="16.4040%" y="383.50"></text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::get_priority_from_position (28 samples, 0.02%)</title><rect x="16.2526%" y="357" width="0.0176%" height="15" fill="rgb(213,87,29)" fg:x="25884" fg:w="28"/><text x="16.5026%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index (20 samples, 0.01%)</title><rect x="16.2576%" y="341" width="0.0126%" height="15" fill="rgb(205,151,52)" fg:x="25892" fg:w="20"/><text x="16.5076%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (20 samples, 0.01%)</title><rect x="16.2576%" y="325" width="0.0126%" height="15" fill="rgb(253,215,39)" fg:x="25892" fg:w="20"/><text x="16.5076%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (20 samples, 0.01%)</title><rect x="16.2576%" y="309" width="0.0126%" height="15" fill="rgb(221,220,41)" fg:x="25892" fg:w="20"/><text x="16.5076%" y="319.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (2,247 samples, 1.41%)</title><rect x="14.8605%" y="389" width="1.4109%" height="15" fill="rgb(218,133,21)" fg:x="23667" fg:w="2247"/><text x="15.1105%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (79 samples, 0.05%)</title><rect x="16.2846%" y="229" width="0.0496%" height="15" fill="rgb(221,193,43)" fg:x="25935" fg:w="79"/><text x="16.5346%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (79 samples, 0.05%)</title><rect x="16.2846%" y="213" width="0.0496%" height="15" fill="rgb(240,128,52)" fg:x="25935" fg:w="79"/><text x="16.5346%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (79 samples, 0.05%)</title><rect x="16.2846%" y="197" width="0.0496%" height="15" fill="rgb(253,114,12)" fg:x="25935" fg:w="79"/><text x="16.5346%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (35 samples, 0.02%)</title><rect x="16.3122%" y="181" width="0.0220%" height="15" fill="rgb(215,223,47)" fg:x="25979" fg:w="35"/><text x="16.5622%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (103 samples, 0.06%)</title><rect x="16.2745%" y="341" width="0.0647%" height="15" fill="rgb(248,225,23)" fg:x="25919" fg:w="103"/><text x="16.5245%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (103 samples, 0.06%)</title><rect x="16.2745%" y="325" width="0.0647%" height="15" fill="rgb(250,108,0)" fg:x="25919" fg:w="103"/><text x="16.5245%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (102 samples, 0.06%)</title><rect x="16.2752%" y="309" width="0.0640%" height="15" fill="rgb(228,208,7)" fg:x="25920" fg:w="102"/><text x="16.5252%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::hash::Hash&gt;::hash (102 samples, 0.06%)</title><rect x="16.2752%" y="293" width="0.0640%" height="15" fill="rgb(244,45,10)" fg:x="25920" fg:w="102"/><text x="16.5252%" y="303.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::hash::Hash&gt;::hash (102 samples, 0.06%)</title><rect x="16.2752%" y="277" width="0.0640%" height="15" fill="rgb(207,125,25)" fg:x="25920" fg:w="102"/><text x="16.5252%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (87 samples, 0.05%)</title><rect x="16.2846%" y="261" width="0.0546%" height="15" fill="rgb(210,195,18)" fg:x="25935" fg:w="87"/><text x="16.5346%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u16 (87 samples, 0.05%)</title><rect x="16.2846%" y="245" width="0.0546%" height="15" fill="rgb(249,80,12)" fg:x="25935" fg:w="87"/><text x="16.5346%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (109 samples, 0.07%)</title><rect x="16.2745%" y="389" width="0.0684%" height="15" fill="rgb(221,65,9)" fg:x="25919" fg:w="109"/><text x="16.5245%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (109 samples, 0.07%)</title><rect x="16.2745%" y="373" width="0.0684%" height="15" fill="rgb(235,49,36)" fg:x="25919" fg:w="109"/><text x="16.5245%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (109 samples, 0.07%)</title><rect x="16.2745%" y="357" width="0.0684%" height="15" fill="rgb(225,32,20)" fg:x="25919" fg:w="109"/><text x="16.5245%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (18 samples, 0.01%)</title><rect x="16.3964%" y="277" width="0.0113%" height="15" fill="rgb(215,141,46)" fg:x="26113" fg:w="18"/><text x="16.6464%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.02%)</title><rect x="16.4095%" y="261" width="0.0220%" height="15" fill="rgb(250,160,47)" fg:x="26134" fg:w="35"/><text x="16.6595%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (124 samples, 0.08%)</title><rect x="16.3612%" y="325" width="0.0779%" height="15" fill="rgb(216,222,40)" fg:x="26057" fg:w="124"/><text x="16.6112%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (124 samples, 0.08%)</title><rect x="16.3612%" y="309" width="0.0779%" height="15" fill="rgb(234,217,39)" fg:x="26057" fg:w="124"/><text x="16.6112%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (124 samples, 0.08%)</title><rect x="16.3612%" y="293" width="0.0779%" height="15" fill="rgb(207,178,40)" fg:x="26057" fg:w="124"/><text x="16.6112%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (50 samples, 0.03%)</title><rect x="16.4077%" y="277" width="0.0314%" height="15" fill="rgb(221,136,13)" fg:x="26131" fg:w="50"/><text x="16.6577%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (26 samples, 0.02%)</title><rect x="16.4391%" y="325" width="0.0163%" height="15" fill="rgb(249,199,10)" fg:x="26181" fg:w="26"/><text x="16.6891%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (264 samples, 0.17%)</title><rect x="16.4604%" y="277" width="0.1658%" height="15" fill="rgb(249,222,13)" fg:x="26215" fg:w="264"/><text x="16.7104%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (207 samples, 0.13%)</title><rect x="16.4962%" y="261" width="0.1300%" height="15" fill="rgb(244,185,38)" fg:x="26272" fg:w="207"/><text x="16.7462%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (42 samples, 0.03%)</title><rect x="16.6293%" y="245" width="0.0264%" height="15" fill="rgb(236,202,9)" fg:x="26484" fg:w="42"/><text x="16.8793%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (40 samples, 0.03%)</title><rect x="16.6306%" y="229" width="0.0251%" height="15" fill="rgb(250,229,37)" fg:x="26486" fg:w="40"/><text x="16.8806%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (40 samples, 0.03%)</title><rect x="16.6306%" y="213" width="0.0251%" height="15" fill="rgb(206,174,23)" fg:x="26486" fg:w="40"/><text x="16.8806%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (17 samples, 0.01%)</title><rect x="16.6450%" y="197" width="0.0107%" height="15" fill="rgb(211,33,43)" fg:x="26509" fg:w="17"/><text x="16.8950%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (92 samples, 0.06%)</title><rect x="16.6262%" y="277" width="0.0578%" height="15" fill="rgb(245,58,50)" fg:x="26479" fg:w="92"/><text x="16.8762%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u32 (92 samples, 0.06%)</title><rect x="16.6262%" y="261" width="0.0578%" height="15" fill="rgb(244,68,36)" fg:x="26479" fg:w="92"/><text x="16.8762%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_ne_bytes (45 samples, 0.03%)</title><rect x="16.6557%" y="245" width="0.0283%" height="15" fill="rgb(232,229,15)" fg:x="26526" fg:w="45"/><text x="16.9057%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (138 samples, 0.09%)</title><rect x="17.2070%" y="181" width="0.0867%" height="15" fill="rgb(254,30,23)" fg:x="27404" fg:w="138"/><text x="17.4570%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (282 samples, 0.18%)</title><rect x="17.1737%" y="197" width="0.1771%" height="15" fill="rgb(235,160,14)" fg:x="27351" fg:w="282"/><text x="17.4237%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (91 samples, 0.06%)</title><rect x="17.2936%" y="181" width="0.0571%" height="15" fill="rgb(212,155,44)" fg:x="27542" fg:w="91"/><text x="17.5436%" y="191.50"></text></g><g><title>core::cmp::min (75 samples, 0.05%)</title><rect x="17.3508%" y="197" width="0.0471%" height="15" fill="rgb(226,2,50)" fg:x="27633" fg:w="75"/><text x="17.6008%" y="207.50"></text></g><g><title>core::cmp::Ord::min (75 samples, 0.05%)</title><rect x="17.3508%" y="181" width="0.0471%" height="15" fill="rgb(234,177,6)" fg:x="27633" fg:w="75"/><text x="17.6008%" y="191.50"></text></g><g><title>core::cmp::min_by (75 samples, 0.05%)</title><rect x="17.3508%" y="165" width="0.0471%" height="15" fill="rgb(217,24,9)" fg:x="27633" fg:w="75"/><text x="17.6008%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,869 samples, 1.17%)</title><rect x="16.7260%" y="245" width="1.1735%" height="15" fill="rgb(220,13,46)" fg:x="26638" fg:w="1869"/><text x="16.9760%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1,848 samples, 1.16%)</title><rect x="16.7392%" y="229" width="1.1604%" height="15" fill="rgb(239,221,27)" fg:x="26659" fg:w="1848"/><text x="16.9892%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,848 samples, 1.16%)</title><rect x="16.7392%" y="213" width="1.1604%" height="15" fill="rgb(222,198,25)" fg:x="26659" fg:w="1848"/><text x="16.9892%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (799 samples, 0.50%)</title><rect x="17.3979%" y="197" width="0.5017%" height="15" fill="rgb(211,99,13)" fg:x="27708" fg:w="799"/><text x="17.6479%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (2,809 samples, 1.76%)</title><rect x="16.3549%" y="357" width="1.7638%" height="15" fill="rgb(232,111,31)" fg:x="26047" fg:w="2809"/><text x="16.6049%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,809 samples, 1.76%)</title><rect x="16.3549%" y="341" width="1.7638%" height="15" fill="rgb(245,82,37)" fg:x="26047" fg:w="2809"/><text x="16.6049%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,649 samples, 1.66%)</title><rect x="16.4554%" y="325" width="1.6633%" height="15" fill="rgb(227,149,46)" fg:x="26207" fg:w="2649"/><text x="16.7054%" y="335.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::hash::Hash&gt;::hash (2,649 samples, 1.66%)</title><rect x="16.4554%" y="309" width="1.6633%" height="15" fill="rgb(218,36,50)" fg:x="26207" fg:w="2649"/><text x="16.7054%" y="319.50"></text></g><g><title>&lt;tetrs::logic::state::State as core::hash::Hash&gt;::hash (2,649 samples, 1.66%)</title><rect x="16.4554%" y="293" width="1.6633%" height="15" fill="rgb(226,80,48)" fg:x="26207" fg:w="2649"/><text x="16.7054%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (2,285 samples, 1.43%)</title><rect x="16.6839%" y="277" width="1.4348%" height="15" fill="rgb(238,224,15)" fg:x="26571" fg:w="2285"/><text x="16.9339%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u16 (2,285 samples, 1.43%)</title><rect x="16.6839%" y="261" width="1.4348%" height="15" fill="rgb(241,136,10)" fg:x="26571" fg:w="2285"/><text x="16.9339%" y="271.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (349 samples, 0.22%)</title><rect x="17.8995%" y="245" width="0.2191%" height="15" fill="rgb(208,32,45)" fg:x="28507" fg:w="349"/><text x="18.1495%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (19 samples, 0.01%)</title><rect x="18.1815%" y="165" width="0.0119%" height="15" fill="rgb(207,135,9)" fg:x="28956" fg:w="19"/><text x="18.4315%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (38 samples, 0.02%)</title><rect x="18.1991%" y="149" width="0.0239%" height="15" fill="rgb(206,86,44)" fg:x="28984" fg:w="38"/><text x="18.4491%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (127 samples, 0.08%)</title><rect x="18.1482%" y="213" width="0.0797%" height="15" fill="rgb(245,177,15)" fg:x="28903" fg:w="127"/><text x="18.3982%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (127 samples, 0.08%)</title><rect x="18.1482%" y="197" width="0.0797%" height="15" fill="rgb(206,64,50)" fg:x="28903" fg:w="127"/><text x="18.3982%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (127 samples, 0.08%)</title><rect x="18.1482%" y="181" width="0.0797%" height="15" fill="rgb(234,36,40)" fg:x="28903" fg:w="127"/><text x="18.3982%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (55 samples, 0.03%)</title><rect x="18.1934%" y="165" width="0.0345%" height="15" fill="rgb(213,64,8)" fg:x="28975" fg:w="55"/><text x="18.4434%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (370 samples, 0.23%)</title><rect x="18.2399%" y="165" width="0.2323%" height="15" fill="rgb(210,75,36)" fg:x="29049" fg:w="370"/><text x="18.4899%" y="175.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (303 samples, 0.19%)</title><rect x="18.2819%" y="149" width="0.1903%" height="15" fill="rgb(229,88,21)" fg:x="29116" fg:w="303"/><text x="18.5319%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (51 samples, 0.03%)</title><rect x="18.4728%" y="133" width="0.0320%" height="15" fill="rgb(252,204,47)" fg:x="29420" fg:w="51"/><text x="18.7228%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (51 samples, 0.03%)</title><rect x="18.4728%" y="117" width="0.0320%" height="15" fill="rgb(208,77,27)" fg:x="29420" fg:w="51"/><text x="18.7228%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (51 samples, 0.03%)</title><rect x="18.4728%" y="101" width="0.0320%" height="15" fill="rgb(221,76,26)" fg:x="29420" fg:w="51"/><text x="18.7228%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (17 samples, 0.01%)</title><rect x="18.4942%" y="85" width="0.0107%" height="15" fill="rgb(225,139,18)" fg:x="29454" fg:w="17"/><text x="18.7442%" y="95.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (153 samples, 0.10%)</title><rect x="18.4722%" y="165" width="0.0961%" height="15" fill="rgb(230,137,11)" fg:x="29419" fg:w="153"/><text x="18.7222%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u32 (153 samples, 0.10%)</title><rect x="18.4722%" y="149" width="0.0961%" height="15" fill="rgb(212,28,1)" fg:x="29419" fg:w="153"/><text x="18.7222%" y="159.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_ne_bytes (101 samples, 0.06%)</title><rect x="18.5048%" y="133" width="0.0634%" height="15" fill="rgb(248,164,17)" fg:x="29471" fg:w="101"/><text x="18.7548%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (195 samples, 0.12%)</title><rect x="19.3506%" y="69" width="0.1224%" height="15" fill="rgb(222,171,42)" fg:x="30818" fg:w="195"/><text x="19.6006%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (376 samples, 0.24%)</title><rect x="19.3067%" y="85" width="0.2361%" height="15" fill="rgb(243,84,45)" fg:x="30748" fg:w="376"/><text x="19.5567%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (111 samples, 0.07%)</title><rect x="19.4731%" y="69" width="0.0697%" height="15" fill="rgb(252,49,23)" fg:x="31013" fg:w="111"/><text x="19.7231%" y="79.50"></text></g><g><title>core::cmp::min (124 samples, 0.08%)</title><rect x="19.5428%" y="85" width="0.0779%" height="15" fill="rgb(215,19,7)" fg:x="31124" fg:w="124"/><text x="19.7928%" y="95.50"></text></g><g><title>core::cmp::Ord::min (124 samples, 0.08%)</title><rect x="19.5428%" y="69" width="0.0779%" height="15" fill="rgb(238,81,41)" fg:x="31124" fg:w="124"/><text x="19.7928%" y="79.50"></text></g><g><title>core::cmp::min_by (124 samples, 0.08%)</title><rect x="19.5428%" y="53" width="0.0779%" height="15" fill="rgb(210,199,37)" fg:x="31124" fg:w="124"/><text x="19.7928%" y="63.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,585 samples, 1.62%)</title><rect x="18.6298%" y="133" width="1.6231%" height="15" fill="rgb(244,192,49)" fg:x="29670" fg:w="2585"/><text x="18.8798%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,521 samples, 1.58%)</title><rect x="18.6700%" y="117" width="1.5829%" height="15" fill="rgb(226,211,11)" fg:x="29734" fg:w="2521"/><text x="18.9200%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,521 samples, 1.58%)</title><rect x="18.6700%" y="101" width="1.5829%" height="15" fill="rgb(236,162,54)" fg:x="29734" fg:w="2521"/><text x="18.9200%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (1,007 samples, 0.63%)</title><rect x="19.6206%" y="85" width="0.6323%" height="15" fill="rgb(220,229,9)" fg:x="31248" fg:w="1007"/><text x="19.8706%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="20.2378%" y="69" width="0.0151%" height="15" fill="rgb(250,87,22)" fg:x="32231" fg:w="24"/><text x="20.4878%" y="79.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (3,857 samples, 2.42%)</title><rect x="18.1432%" y="261" width="2.4218%" height="15" fill="rgb(239,43,17)" fg:x="28895" fg:w="3857"/><text x="18.3932%" y="271.50">ha..</text></g><g><title>hashbrown::map::make_hash (3,857 samples, 2.42%)</title><rect x="18.1432%" y="245" width="2.4218%" height="15" fill="rgb(231,177,25)" fg:x="28895" fg:w="3857"/><text x="18.3932%" y="255.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (3,857 samples, 2.42%)</title><rect x="18.1432%" y="229" width="2.4218%" height="15" fill="rgb(219,179,1)" fg:x="28895" fg:w="3857"/><text x="18.3932%" y="239.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,717 samples, 2.33%)</title><rect x="18.2311%" y="213" width="2.3339%" height="15" fill="rgb(238,219,53)" fg:x="29035" fg:w="3717"/><text x="18.4811%" y="223.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::hash::Hash&gt;::hash (3,717 samples, 2.33%)</title><rect x="18.2311%" y="197" width="2.3339%" height="15" fill="rgb(232,167,36)" fg:x="29035" fg:w="3717"/><text x="18.4811%" y="207.50">&lt;..</text></g><g><title>&lt;tetrs::logic::state::State as core::hash::Hash&gt;::hash (3,713 samples, 2.33%)</title><rect x="18.2336%" y="181" width="2.3314%" height="15" fill="rgb(244,19,51)" fg:x="29039" fg:w="3713"/><text x="18.4836%" y="191.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (3,180 samples, 2.00%)</title><rect x="18.5683%" y="165" width="1.9967%" height="15" fill="rgb(224,6,22)" fg:x="29572" fg:w="3180"/><text x="18.8183%" y="175.50">c..</text></g><g><title>core::hash::Hasher::write_u16 (3,180 samples, 2.00%)</title><rect x="18.5683%" y="149" width="1.9967%" height="15" fill="rgb(224,145,5)" fg:x="29572" fg:w="3180"/><text x="18.8183%" y="159.50">c..</text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (497 samples, 0.31%)</title><rect x="20.2529%" y="133" width="0.3121%" height="15" fill="rgb(234,130,49)" fg:x="32255" fg:w="497"/><text x="20.5029%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (3,862 samples, 2.42%)</title><rect x="18.1432%" y="277" width="2.4250%" height="15" fill="rgb(254,6,2)" fg:x="28895" fg:w="3862"/><text x="18.3932%" y="287.50">ha..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (28 samples, 0.02%)</title><rect x="20.5769%" y="229" width="0.0176%" height="15" fill="rgb(208,96,46)" fg:x="32771" fg:w="28"/><text x="20.8269%" y="239.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (28 samples, 0.02%)</title><rect x="20.5769%" y="213" width="0.0176%" height="15" fill="rgb(239,3,39)" fg:x="32771" fg:w="28"/><text x="20.8269%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (50 samples, 0.03%)</title><rect x="20.5738%" y="245" width="0.0314%" height="15" fill="rgb(233,210,1)" fg:x="32766" fg:w="50"/><text x="20.8238%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (17 samples, 0.01%)</title><rect x="20.5945%" y="229" width="0.0107%" height="15" fill="rgb(244,137,37)" fg:x="32799" fg:w="17"/><text x="20.8445%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.01%)</title><rect x="20.5945%" y="213" width="0.0107%" height="15" fill="rgb(240,136,2)" fg:x="32799" fg:w="17"/><text x="20.8445%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (16 samples, 0.01%)</title><rect x="20.6052%" y="245" width="0.0100%" height="15" fill="rgb(239,18,37)" fg:x="32816" fg:w="16"/><text x="20.8552%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (68 samples, 0.04%)</title><rect x="20.5738%" y="261" width="0.0427%" height="15" fill="rgb(218,185,22)" fg:x="32766" fg:w="68"/><text x="20.8238%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (69 samples, 0.04%)</title><rect x="20.5738%" y="277" width="0.0433%" height="15" fill="rgb(225,218,4)" fg:x="32766" fg:w="69"/><text x="20.8238%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (18 samples, 0.01%)</title><rect x="20.6190%" y="245" width="0.0113%" height="15" fill="rgb(230,182,32)" fg:x="32838" fg:w="18"/><text x="20.8690%" y="255.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (16 samples, 0.01%)</title><rect x="20.6202%" y="229" width="0.0100%" height="15" fill="rgb(242,56,43)" fg:x="32840" fg:w="16"/><text x="20.8702%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="20.6202%" y="213" width="0.0100%" height="15" fill="rgb(233,99,24)" fg:x="32840" fg:w="16"/><text x="20.8702%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="20.6202%" y="197" width="0.0100%" height="15" fill="rgb(234,209,42)" fg:x="32840" fg:w="16"/><text x="20.8702%" y="207.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="20.6202%" y="181" width="0.0100%" height="15" fill="rgb(227,7,12)" fg:x="32840" fg:w="16"/><text x="20.8702%" y="191.50"></text></g><g><title>malloc (16 samples, 0.01%)</title><rect x="20.6202%" y="165" width="0.0100%" height="15" fill="rgb(245,203,43)" fg:x="32840" fg:w="16"/><text x="20.8702%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (3,993 samples, 2.51%)</title><rect x="18.1243%" y="293" width="2.5072%" height="15" fill="rgb(238,205,33)" fg:x="28865" fg:w="3993"/><text x="18.3743%" y="303.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (23 samples, 0.01%)</title><rect x="20.6171%" y="277" width="0.0144%" height="15" fill="rgb(231,56,7)" fg:x="32835" fg:w="23"/><text x="20.8671%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (23 samples, 0.01%)</title><rect x="20.6171%" y="261" width="0.0144%" height="15" fill="rgb(244,186,29)" fg:x="32835" fg:w="23"/><text x="20.8671%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4,000 samples, 2.51%)</title><rect x="18.1212%" y="341" width="2.5116%" height="15" fill="rgb(234,111,31)" fg:x="28860" fg:w="4000"/><text x="18.3712%" y="351.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,997 samples, 2.51%)</title><rect x="18.1231%" y="325" width="2.5097%" height="15" fill="rgb(241,149,10)" fg:x="28863" fg:w="3997"/><text x="18.3731%" y="335.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (3,997 samples, 2.51%)</title><rect x="18.1231%" y="309" width="2.5097%" height="15" fill="rgb(249,206,44)" fg:x="28863" fg:w="3997"/><text x="18.3731%" y="319.50">ha..</text></g><g><title>&lt;tetrs::logic::state::State as core::cmp::PartialEq&gt;::eq (48 samples, 0.03%)</title><rect x="20.6460%" y="229" width="0.0301%" height="15" fill="rgb(251,153,30)" fg:x="32881" fg:w="48"/><text x="20.8960%" y="239.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (46 samples, 0.03%)</title><rect x="20.6472%" y="213" width="0.0289%" height="15" fill="rgb(239,152,38)" fg:x="32883" fg:w="46"/><text x="20.8972%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (46 samples, 0.03%)</title><rect x="20.6472%" y="197" width="0.0289%" height="15" fill="rgb(249,139,47)" fg:x="32883" fg:w="46"/><text x="20.8972%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (46 samples, 0.03%)</title><rect x="20.6472%" y="181" width="0.0289%" height="15" fill="rgb(244,64,35)" fg:x="32883" fg:w="46"/><text x="20.8972%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (39 samples, 0.02%)</title><rect x="20.6516%" y="165" width="0.0245%" height="15" fill="rgb(216,46,15)" fg:x="32890" fg:w="39"/><text x="20.9016%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (39 samples, 0.02%)</title><rect x="20.6516%" y="149" width="0.0245%" height="15" fill="rgb(250,74,19)" fg:x="32890" fg:w="39"/><text x="20.9016%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (36 samples, 0.02%)</title><rect x="20.6535%" y="133" width="0.0226%" height="15" fill="rgb(249,42,33)" fg:x="32893" fg:w="36"/><text x="20.9035%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal::_{{closure}} (36 samples, 0.02%)</title><rect x="20.6535%" y="117" width="0.0226%" height="15" fill="rgb(242,149,17)" fg:x="32893" fg:w="36"/><text x="20.9035%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (36 samples, 0.02%)</title><rect x="20.6535%" y="101" width="0.0226%" height="15" fill="rgb(244,29,21)" fg:x="32893" fg:w="36"/><text x="20.9035%" y="111.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (36 samples, 0.02%)</title><rect x="20.6535%" y="85" width="0.0226%" height="15" fill="rgb(220,130,37)" fg:x="32893" fg:w="36"/><text x="20.9035%" y="95.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (36 samples, 0.02%)</title><rect x="20.6535%" y="69" width="0.0226%" height="15" fill="rgb(211,67,2)" fg:x="32893" fg:w="36"/><text x="20.9035%" y="79.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (36 samples, 0.02%)</title><rect x="20.6535%" y="53" width="0.0226%" height="15" fill="rgb(235,68,52)" fg:x="32893" fg:w="36"/><text x="20.9035%" y="63.50"></text></g><g><title>[libc.so.6] (27 samples, 0.02%)</title><rect x="20.6592%" y="37" width="0.0170%" height="15" fill="rgb(246,142,3)" fg:x="32902" fg:w="27"/><text x="20.9092%" y="47.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (51 samples, 0.03%)</title><rect x="20.6460%" y="309" width="0.0320%" height="15" fill="rgb(241,25,7)" fg:x="32881" fg:w="51"/><text x="20.8960%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (51 samples, 0.03%)</title><rect x="20.6460%" y="293" width="0.0320%" height="15" fill="rgb(242,119,39)" fg:x="32881" fg:w="51"/><text x="20.8960%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (51 samples, 0.03%)</title><rect x="20.6460%" y="277" width="0.0320%" height="15" fill="rgb(241,98,45)" fg:x="32881" fg:w="51"/><text x="20.8960%" y="287.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (51 samples, 0.03%)</title><rect x="20.6460%" y="261" width="0.0320%" height="15" fill="rgb(254,28,30)" fg:x="32881" fg:w="51"/><text x="20.8960%" y="271.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as alloc::rc::RcEqIdent&lt;T,A&gt;&gt;::eq (51 samples, 0.03%)</title><rect x="20.6460%" y="245" width="0.0320%" height="15" fill="rgb(241,142,54)" fg:x="32881" fg:w="51"/><text x="20.8960%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (52 samples, 0.03%)</title><rect x="20.6460%" y="325" width="0.0327%" height="15" fill="rgb(222,85,15)" fg:x="32881" fg:w="52"/><text x="20.8960%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (24 samples, 0.02%)</title><rect x="20.6805%" y="309" width="0.0151%" height="15" fill="rgb(210,85,47)" fg:x="32936" fg:w="24"/><text x="20.9305%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (21 samples, 0.01%)</title><rect x="20.6824%" y="293" width="0.0132%" height="15" fill="rgb(224,206,25)" fg:x="32939" fg:w="21"/><text x="20.9324%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (36 samples, 0.02%)</title><rect x="20.6786%" y="325" width="0.0226%" height="15" fill="rgb(243,201,19)" fg:x="32933" fg:w="36"/><text x="20.9286%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (16 samples, 0.01%)</title><rect x="20.7012%" y="325" width="0.0100%" height="15" fill="rgb(236,59,4)" fg:x="32969" fg:w="16"/><text x="20.9512%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (52 samples, 0.03%)</title><rect x="20.7188%" y="325" width="0.0327%" height="15" fill="rgb(254,179,45)" fg:x="32997" fg:w="52"/><text x="20.9688%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (52 samples, 0.03%)</title><rect x="20.7188%" y="309" width="0.0327%" height="15" fill="rgb(226,14,10)" fg:x="32997" fg:w="52"/><text x="20.9688%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (52 samples, 0.03%)</title><rect x="20.7188%" y="293" width="0.0327%" height="15" fill="rgb(244,27,41)" fg:x="32997" fg:w="52"/><text x="20.9688%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (4,199 samples, 2.64%)</title><rect x="18.1187%" y="357" width="2.6366%" height="15" fill="rgb(235,35,32)" fg:x="28856" fg:w="4199"/><text x="18.3687%" y="367.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (195 samples, 0.12%)</title><rect x="20.6328%" y="341" width="0.1224%" height="15" fill="rgb(218,68,31)" fg:x="32860" fg:w="195"/><text x="20.8828%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (35 samples, 0.02%)</title><rect x="20.7552%" y="325" width="0.0220%" height="15" fill="rgb(207,120,37)" fg:x="33055" fg:w="35"/><text x="21.0052%" y="335.50"></text></g><g><title>core::ptr::write (35 samples, 0.02%)</title><rect x="20.7552%" y="309" width="0.0220%" height="15" fill="rgb(227,98,0)" fg:x="33055" fg:w="35"/><text x="21.0052%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (36 samples, 0.02%)</title><rect x="20.7552%" y="341" width="0.0226%" height="15" fill="rgb(207,7,3)" fg:x="33055" fg:w="36"/><text x="21.0052%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (7,074 samples, 4.44%)</title><rect x="16.3430%" y="389" width="4.4418%" height="15" fill="rgb(206,98,19)" fg:x="26028" fg:w="7074"/><text x="16.5930%" y="399.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7,071 samples, 4.44%)</title><rect x="16.3449%" y="373" width="4.4399%" height="15" fill="rgb(217,5,26)" fg:x="26031" fg:w="7071"/><text x="16.5949%" y="383.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (47 samples, 0.03%)</title><rect x="20.7552%" y="357" width="0.0295%" height="15" fill="rgb(235,190,38)" fg:x="33055" fg:w="47"/><text x="21.0052%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (97 samples, 0.06%)</title><rect x="20.9147%" y="357" width="0.0609%" height="15" fill="rgb(247,86,24)" fg:x="33309" fg:w="97"/><text x="21.1647%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (22 samples, 0.01%)</title><rect x="20.9618%" y="341" width="0.0138%" height="15" fill="rgb(205,101,16)" fg:x="33384" fg:w="22"/><text x="21.2118%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (22 samples, 0.01%)</title><rect x="20.9618%" y="325" width="0.0138%" height="15" fill="rgb(246,168,33)" fg:x="33384" fg:w="22"/><text x="21.2118%" y="335.50"></text></g><g><title>__rdl_alloc (542 samples, 0.34%)</title><rect x="21.8792%" y="149" width="0.3403%" height="15" fill="rgb(231,114,1)" fg:x="34845" fg:w="542"/><text x="22.1292%" y="159.50"></text></g><g><title>__rust_alloc (577 samples, 0.36%)</title><rect x="22.2195%" y="149" width="0.3623%" height="15" fill="rgb(207,184,53)" fg:x="35387" fg:w="577"/><text x="22.4695%" y="159.50"></text></g><g><title>[libc.so.6] (170 samples, 0.11%)</title><rect x="29.7160%" y="117" width="0.1067%" height="15" fill="rgb(224,95,51)" fg:x="47326" fg:w="170"/><text x="29.9660%" y="127.50"></text></g><g><title>[libc.so.6] (5,307 samples, 3.33%)</title><rect x="26.4911%" y="133" width="3.3323%" height="15" fill="rgb(212,188,45)" fg:x="42190" fg:w="5307"/><text x="26.7411%" y="143.50">[li..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13,073 samples, 8.21%)</title><rect x="21.6155%" y="197" width="8.2085%" height="15" fill="rgb(223,154,38)" fg:x="34425" fg:w="13073"/><text x="21.8655%" y="207.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (13,073 samples, 8.21%)</title><rect x="21.6155%" y="181" width="8.2085%" height="15" fill="rgb(251,22,52)" fg:x="34425" fg:w="13073"/><text x="21.8655%" y="191.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (13,035 samples, 8.18%)</title><rect x="21.6393%" y="165" width="8.1847%" height="15" fill="rgb(229,209,22)" fg:x="34463" fg:w="13035"/><text x="21.8893%" y="175.50">alloc::allo..</text></g><g><title>malloc (11,523 samples, 7.24%)</title><rect x="22.5887%" y="149" width="7.2353%" height="15" fill="rgb(234,138,34)" fg:x="35975" fg:w="11523"/><text x="22.8387%" y="159.50">malloc</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13,971 samples, 8.77%)</title><rect x="21.0717%" y="245" width="8.7724%" height="15" fill="rgb(212,95,11)" fg:x="33559" fg:w="13971"/><text x="21.3217%" y="255.50">alloc::vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13,971 samples, 8.77%)</title><rect x="21.0717%" y="229" width="8.7724%" height="15" fill="rgb(240,179,47)" fg:x="33559" fg:w="13971"/><text x="21.3217%" y="239.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13,971 samples, 8.77%)</title><rect x="21.0717%" y="213" width="8.7724%" height="15" fill="rgb(240,163,11)" fg:x="33559" fg:w="13971"/><text x="21.3217%" y="223.50">alloc::raw_v..</text></g><g><title>core::alloc::layout::Layout::array (32 samples, 0.02%)</title><rect x="29.8240%" y="197" width="0.0201%" height="15" fill="rgb(236,37,12)" fg:x="47498" fg:w="32"/><text x="30.0740%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (32 samples, 0.02%)</title><rect x="29.8240%" y="181" width="0.0201%" height="15" fill="rgb(232,164,16)" fg:x="47498" fg:w="32"/><text x="30.0740%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16,836 samples, 10.57%)</title><rect x="21.0717%" y="309" width="10.5713%" height="15" fill="rgb(244,205,15)" fg:x="33559" fg:w="16836"/><text x="21.3217%" y="319.50">&lt;alloc::vec::Ve..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16,836 samples, 10.57%)</title><rect x="21.0717%" y="293" width="10.5713%" height="15" fill="rgb(223,117,47)" fg:x="33559" fg:w="16836"/><text x="21.3217%" y="303.50">alloc::slice::&lt;..</text></g><g><title>alloc::slice::hack::to_vec (16,836 samples, 10.57%)</title><rect x="21.0717%" y="277" width="10.5713%" height="15" fill="rgb(244,107,35)" fg:x="33559" fg:w="16836"/><text x="21.3217%" y="287.50">alloc::slice::h..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16,836 samples, 10.57%)</title><rect x="21.0717%" y="261" width="10.5713%" height="15" fill="rgb(205,140,8)" fg:x="33559" fg:w="16836"/><text x="21.3217%" y="271.50">&lt;T as alloc::sl..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,865 samples, 1.80%)</title><rect x="29.8441%" y="245" width="1.7989%" height="15" fill="rgb(228,84,46)" fg:x="47530" fg:w="2865"/><text x="30.0941%" y="255.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,865 samples, 1.80%)</title><rect x="29.8441%" y="229" width="1.7989%" height="15" fill="rgb(254,188,9)" fg:x="47530" fg:w="2865"/><text x="30.0941%" y="239.50">c..</text></g><g><title>[libc.so.6] (2,445 samples, 1.54%)</title><rect x="30.1078%" y="213" width="1.5352%" height="15" fill="rgb(206,112,54)" fg:x="47950" fg:w="2445"/><text x="30.3578%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (619 samples, 0.39%)</title><rect x="31.6430%" y="309" width="0.3887%" height="15" fill="rgb(216,84,49)" fg:x="50395" fg:w="619"/><text x="31.8930%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (107 samples, 0.07%)</title><rect x="31.9645%" y="293" width="0.0672%" height="15" fill="rgb(214,194,35)" fg:x="50907" fg:w="107"/><text x="32.2145%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="32.0147%" y="277" width="0.0170%" height="15" fill="rgb(249,28,3)" fg:x="50987" fg:w="27"/><text x="32.2647%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (34 samples, 0.02%)</title><rect x="32.0323%" y="309" width="0.0213%" height="15" fill="rgb(222,56,52)" fg:x="51015" fg:w="34"/><text x="32.2823%" y="319.50"></text></g><g><title>__rdl_alloc (36 samples, 0.02%)</title><rect x="32.1497%" y="213" width="0.0226%" height="15" fill="rgb(245,217,50)" fg:x="51202" fg:w="36"/><text x="32.3997%" y="223.50"></text></g><g><title>__rust_alloc (83 samples, 0.05%)</title><rect x="32.1723%" y="213" width="0.0521%" height="15" fill="rgb(213,201,24)" fg:x="51238" fg:w="83"/><text x="32.4223%" y="223.50"></text></g><g><title>[libc.so.6] (368 samples, 0.23%)</title><rect x="33.2410%" y="181" width="0.2311%" height="15" fill="rgb(248,116,28)" fg:x="52940" fg:w="368"/><text x="33.4910%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,135 samples, 1.34%)</title><rect x="32.1328%" y="261" width="1.3406%" height="15" fill="rgb(219,72,43)" fg:x="51175" fg:w="2135"/><text x="32.3828%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,135 samples, 1.34%)</title><rect x="32.1328%" y="245" width="1.3406%" height="15" fill="rgb(209,138,14)" fg:x="51175" fg:w="2135"/><text x="32.3828%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2,128 samples, 1.34%)</title><rect x="32.1372%" y="229" width="1.3362%" height="15" fill="rgb(222,18,33)" fg:x="51182" fg:w="2128"/><text x="32.3872%" y="239.50"></text></g><g><title>malloc (1,978 samples, 1.24%)</title><rect x="32.2314%" y="213" width="1.2420%" height="15" fill="rgb(213,199,7)" fg:x="51332" fg:w="1978"/><text x="32.4814%" y="223.50"></text></g><g><title>[libc.so.6] (1,244 samples, 0.78%)</title><rect x="32.6922%" y="197" width="0.7811%" height="15" fill="rgb(250,110,10)" fg:x="52066" fg:w="1244"/><text x="32.9422%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,264 samples, 1.42%)</title><rect x="32.0537%" y="309" width="1.4216%" height="15" fill="rgb(248,123,6)" fg:x="51049" fg:w="2264"/><text x="32.3037%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,211 samples, 1.39%)</title><rect x="32.0870%" y="293" width="1.3883%" height="15" fill="rgb(206,91,31)" fg:x="51102" fg:w="2211"/><text x="32.3370%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,211 samples, 1.39%)</title><rect x="32.0870%" y="277" width="1.3883%" height="15" fill="rgb(211,154,13)" fg:x="51102" fg:w="2211"/><text x="32.3370%" y="287.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (184 samples, 0.12%)</title><rect x="33.4752%" y="309" width="0.1155%" height="15" fill="rgb(225,148,7)" fg:x="53313" fg:w="184"/><text x="33.7252%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (38,614 samples, 24.25%)</title><rect x="20.8796%" y="373" width="24.2457%" height="15" fill="rgb(220,160,43)" fg:x="33253" fg:w="38614"/><text x="21.1296%" y="383.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::C..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (38,461 samples, 24.15%)</title><rect x="20.9756%" y="357" width="24.1497%" height="15" fill="rgb(213,52,39)" fg:x="33406" fg:w="38461"/><text x="21.2256%" y="367.50">alloc::slice::&lt;impl [T]&gt;::to_vec_in</text></g><g><title>alloc::slice::hack::to_vec (38,461 samples, 24.15%)</title><rect x="20.9756%" y="341" width="24.1497%" height="15" fill="rgb(243,137,7)" fg:x="33406" fg:w="38461"/><text x="21.2256%" y="351.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (38,461 samples, 24.15%)</title><rect x="20.9756%" y="325" width="24.1497%" height="15" fill="rgb(230,79,13)" fg:x="33406" fg:w="38461"/><text x="21.2256%" y="335.50">&lt;T as alloc::slice::hack::ConvertVec&gt;:..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (18,370 samples, 11.53%)</title><rect x="33.5908%" y="309" width="11.5345%" height="15" fill="rgb(247,105,23)" fg:x="53497" fg:w="18370"/><text x="33.8408%" y="319.50">core::ptr::const_..</text></g><g><title>core::intrinsics::copy_nonoverlapping (18,370 samples, 11.53%)</title><rect x="33.5908%" y="293" width="11.5345%" height="15" fill="rgb(223,179,41)" fg:x="53497" fg:w="18370"/><text x="33.8408%" y="303.50">core::intrinsics:..</text></g><g><title>[libc.so.6] (18,359 samples, 11.53%)</title><rect x="33.5977%" y="277" width="11.5276%" height="15" fill="rgb(218,9,34)" fg:x="53508" fg:w="18359"/><text x="33.8477%" y="287.50">[libc.so.6]</text></g><g><title>[unknown] (54 samples, 0.03%)</title><rect x="45.0914%" y="261" width="0.0339%" height="15" fill="rgb(222,106,8)" fg:x="71813" fg:w="54"/><text x="45.3414%" y="271.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="45.0920%" y="245" width="0.0333%" height="15" fill="rgb(211,220,0)" fg:x="71814" fg:w="53"/><text x="45.3420%" y="255.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="45.0920%" y="229" width="0.0333%" height="15" fill="rgb(229,52,16)" fg:x="71814" fg:w="53"/><text x="45.3420%" y="239.50"></text></g><g><title>[unknown] (53 samples, 0.03%)</title><rect x="45.0920%" y="213" width="0.0333%" height="15" fill="rgb(212,155,18)" fg:x="71814" fg:w="53"/><text x="45.3420%" y="223.50"></text></g><g><title>[unknown] (52 samples, 0.03%)</title><rect x="45.0926%" y="197" width="0.0327%" height="15" fill="rgb(242,21,14)" fg:x="71815" fg:w="52"/><text x="45.3426%" y="207.50"></text></g><g><title>[unknown] (50 samples, 0.03%)</title><rect x="45.0939%" y="181" width="0.0314%" height="15" fill="rgb(222,19,48)" fg:x="71817" fg:w="50"/><text x="45.3439%" y="191.50"></text></g><g><title>[unknown] (41 samples, 0.03%)</title><rect x="45.0996%" y="165" width="0.0257%" height="15" fill="rgb(232,45,27)" fg:x="71826" fg:w="41"/><text x="45.3496%" y="175.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="45.1046%" y="149" width="0.0207%" height="15" fill="rgb(249,103,42)" fg:x="71834" fg:w="33"/><text x="45.3546%" y="159.50"></text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="45.1083%" y="133" width="0.0170%" height="15" fill="rgb(246,81,33)" fg:x="71840" fg:w="27"/><text x="45.3583%" y="143.50"></text></g><g><title>[unknown] (23 samples, 0.01%)</title><rect x="45.1109%" y="117" width="0.0144%" height="15" fill="rgb(252,33,42)" fg:x="71844" fg:w="23"/><text x="45.3609%" y="127.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="45.1153%" y="101" width="0.0100%" height="15" fill="rgb(209,212,41)" fg:x="71851" fg:w="16"/><text x="45.3653%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (49 samples, 0.03%)</title><rect x="45.1253%" y="373" width="0.0308%" height="15" fill="rgb(207,154,6)" fg:x="71867" fg:w="49"/><text x="45.3753%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (49 samples, 0.03%)</title><rect x="45.1253%" y="357" width="0.0308%" height="15" fill="rgb(223,64,47)" fg:x="71867" fg:w="49"/><text x="45.3753%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (49 samples, 0.03%)</title><rect x="45.1253%" y="341" width="0.0308%" height="15" fill="rgb(211,161,38)" fg:x="71867" fg:w="49"/><text x="45.3753%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (217 samples, 0.14%)</title><rect x="45.1561%" y="373" width="0.1363%" height="15" fill="rgb(219,138,40)" fg:x="71916" fg:w="217"/><text x="45.4061%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next_back (217 samples, 0.14%)</title><rect x="45.1561%" y="357" width="0.1363%" height="15" fill="rgb(241,228,46)" fg:x="71916" fg:w="217"/><text x="45.4061%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next_back (217 samples, 0.14%)</title><rect x="45.1561%" y="341" width="0.1363%" height="15" fill="rgb(223,209,38)" fg:x="71916" fg:w="217"/><text x="45.4061%" y="351.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (192 samples, 0.12%)</title><rect x="45.1718%" y="325" width="0.1206%" height="15" fill="rgb(236,164,45)" fg:x="71941" fg:w="192"/><text x="45.4218%" y="335.50"></text></g><g><title>[libc.so.6] (21 samples, 0.01%)</title><rect x="45.4254%" y="213" width="0.0132%" height="15" fill="rgb(231,15,5)" fg:x="72345" fg:w="21"/><text x="45.6754%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (181 samples, 0.11%)</title><rect x="45.3256%" y="309" width="0.1136%" height="15" fill="rgb(252,35,15)" fg:x="72186" fg:w="181"/><text x="45.5756%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (181 samples, 0.11%)</title><rect x="45.3256%" y="293" width="0.1136%" height="15" fill="rgb(248,181,18)" fg:x="72186" fg:w="181"/><text x="45.5756%" y="303.50"></text></g><g><title>alloc::alloc::realloc (181 samples, 0.11%)</title><rect x="45.3256%" y="277" width="0.1136%" height="15" fill="rgb(233,39,42)" fg:x="72186" fg:w="181"/><text x="45.5756%" y="287.50"></text></g><g><title>realloc (169 samples, 0.11%)</title><rect x="45.3331%" y="261" width="0.1061%" height="15" fill="rgb(238,110,33)" fg:x="72198" fg:w="169"/><text x="45.5831%" y="271.50"></text></g><g><title>[libc.so.6] (147 samples, 0.09%)</title><rect x="45.3469%" y="245" width="0.0923%" height="15" fill="rgb(233,195,10)" fg:x="72220" fg:w="147"/><text x="45.5969%" y="255.50"></text></g><g><title>[libc.so.6] (139 samples, 0.09%)</title><rect x="45.3520%" y="229" width="0.0873%" height="15" fill="rgb(254,105,3)" fg:x="72228" fg:w="139"/><text x="45.6020%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (216 samples, 0.14%)</title><rect x="45.3156%" y="325" width="0.1356%" height="15" fill="rgb(221,225,9)" fg:x="72170" fg:w="216"/><text x="45.5656%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (233 samples, 0.15%)</title><rect x="45.3086%" y="357" width="0.1463%" height="15" fill="rgb(224,227,45)" fg:x="72159" fg:w="233"/><text x="45.5586%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (233 samples, 0.15%)</title><rect x="45.3086%" y="341" width="0.1463%" height="15" fill="rgb(229,198,43)" fg:x="72159" fg:w="233"/><text x="45.5586%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (326 samples, 0.20%)</title><rect x="45.3005%" y="373" width="0.2047%" height="15" fill="rgb(206,209,35)" fg:x="72146" fg:w="326"/><text x="45.5505%" y="383.50"></text></g><g><title>core::ptr::write (65 samples, 0.04%)</title><rect x="45.4644%" y="357" width="0.0408%" height="15" fill="rgb(245,195,53)" fg:x="72407" fg:w="65"/><text x="45.7144%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (60 samples, 0.04%)</title><rect x="45.5052%" y="373" width="0.0377%" height="15" fill="rgb(240,92,26)" fg:x="72472" fg:w="60"/><text x="45.7552%" y="383.50"></text></g><g><title>core::intrinsics::copy (44 samples, 0.03%)</title><rect x="45.5152%" y="357" width="0.0276%" height="15" fill="rgb(207,40,23)" fg:x="72488" fg:w="44"/><text x="45.7652%" y="367.50"></text></g><g><title>[libc.so.6] (44 samples, 0.03%)</title><rect x="45.5152%" y="341" width="0.0276%" height="15" fill="rgb(223,111,35)" fg:x="72488" fg:w="44"/><text x="45.7652%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (20 samples, 0.01%)</title><rect x="45.5611%" y="341" width="0.0126%" height="15" fill="rgb(229,147,28)" fg:x="72561" fg:w="20"/><text x="45.8111%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (70 samples, 0.04%)</title><rect x="45.5485%" y="373" width="0.0440%" height="15" fill="rgb(211,29,28)" fg:x="72541" fg:w="70"/><text x="45.7985%" y="383.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next (70 samples, 0.04%)</title><rect x="45.5485%" y="357" width="0.0440%" height="15" fill="rgb(228,72,33)" fg:x="72541" fg:w="70"/><text x="45.7985%" y="367.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (30 samples, 0.02%)</title><rect x="45.5736%" y="341" width="0.0188%" height="15" fill="rgb(205,214,31)" fg:x="72581" fg:w="30"/><text x="45.8236%" y="351.50"></text></g><g><title>__rust_dealloc (22 samples, 0.01%)</title><rect x="45.9202%" y="245" width="0.0138%" height="15" fill="rgb(224,111,15)" fg:x="73133" fg:w="22"/><text x="46.1702%" y="255.50"></text></g><g><title>[libc.so.6] (7,970 samples, 5.00%)</title><rect x="48.2171%" y="229" width="5.0044%" height="15" fill="rgb(253,21,26)" fg:x="76791" fg:w="7970"/><text x="48.4671%" y="239.50">[libc...</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12,088 samples, 7.59%)</title><rect x="45.6320%" y="277" width="7.5901%" height="15" fill="rgb(245,139,43)" fg:x="72674" fg:w="12088"/><text x="45.8820%" y="287.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::dealloc (12,088 samples, 7.59%)</title><rect x="45.6320%" y="261" width="7.5901%" height="15" fill="rgb(252,170,7)" fg:x="72674" fg:w="12088"/><text x="45.8820%" y="271.50">alloc::all..</text></g><g><title>cfree (11,607 samples, 7.29%)</title><rect x="45.9340%" y="245" width="7.2880%" height="15" fill="rgb(231,118,14)" fg:x="73155" fg:w="11607"/><text x="46.1840%" y="255.50">cfree</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,766 samples, 8.02%)</title><rect x="45.5925%" y="357" width="8.0158%" height="15" fill="rgb(238,83,0)" fg:x="72611" fg:w="12766"/><text x="45.8425%" y="367.50">&lt;alloc::vec..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u16&gt;]&gt; (12,766 samples, 8.02%)</title><rect x="45.5925%" y="341" width="8.0158%" height="15" fill="rgb(221,39,39)" fg:x="72611" fg:w="12766"/><text x="45.8425%" y="351.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u16&gt;&gt; (12,706 samples, 7.98%)</title><rect x="45.6301%" y="325" width="7.9781%" height="15" fill="rgb(222,119,46)" fg:x="72671" fg:w="12706"/><text x="45.8801%" y="335.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u16&gt;&gt; (12,706 samples, 7.98%)</title><rect x="45.6301%" y="309" width="7.9781%" height="15" fill="rgb(222,165,49)" fg:x="72671" fg:w="12706"/><text x="45.8801%" y="319.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,706 samples, 7.98%)</title><rect x="45.6301%" y="293" width="7.9781%" height="15" fill="rgb(219,113,52)" fg:x="72671" fg:w="12706"/><text x="45.8801%" y="303.50">&lt;alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (615 samples, 0.39%)</title><rect x="53.2221%" y="277" width="0.3862%" height="15" fill="rgb(214,7,15)" fg:x="84762" fg:w="615"/><text x="53.4721%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (231 samples, 0.15%)</title><rect x="53.4632%" y="261" width="0.1450%" height="15" fill="rgb(235,32,4)" fg:x="85146" fg:w="231"/><text x="53.7132%" y="271.50"></text></g><g><title>[libc.so.6] (16 samples, 0.01%)</title><rect x="54.0936%" y="261" width="0.0100%" height="15" fill="rgb(238,90,54)" fg:x="86150" fg:w="16"/><text x="54.3436%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (790 samples, 0.50%)</title><rect x="53.6082%" y="325" width="0.4960%" height="15" fill="rgb(213,208,19)" fg:x="85377" fg:w="790"/><text x="53.8582%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (790 samples, 0.50%)</title><rect x="53.6082%" y="309" width="0.4960%" height="15" fill="rgb(233,156,4)" fg:x="85377" fg:w="790"/><text x="53.8582%" y="319.50"></text></g><g><title>cfree (766 samples, 0.48%)</title><rect x="53.6233%" y="293" width="0.4810%" height="15" fill="rgb(207,194,5)" fg:x="85401" fg:w="766"/><text x="53.8733%" y="303.50"></text></g><g><title>[libc.so.6] (387 samples, 0.24%)</title><rect x="53.8613%" y="277" width="0.2430%" height="15" fill="rgb(206,111,30)" fg:x="85780" fg:w="387"/><text x="54.1113%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (13,605 samples, 8.54%)</title><rect x="45.5925%" y="373" width="8.5426%" height="15" fill="rgb(243,70,54)" fg:x="72611" fg:w="13605"/><text x="45.8425%" y="383.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u16&gt;&gt;&gt; (839 samples, 0.53%)</title><rect x="53.6082%" y="357" width="0.5268%" height="15" fill="rgb(242,28,8)" fg:x="85377" fg:w="839"/><text x="53.8582%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (839 samples, 0.53%)</title><rect x="53.6082%" y="341" width="0.5268%" height="15" fill="rgb(219,106,18)" fg:x="85377" fg:w="839"/><text x="53.8582%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (49 samples, 0.03%)</title><rect x="54.1043%" y="325" width="0.0308%" height="15" fill="rgb(244,222,10)" fg:x="86167" fg:w="49"/><text x="54.3543%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (167 samples, 0.10%)</title><rect x="54.1350%" y="373" width="0.1049%" height="15" fill="rgb(236,179,52)" fg:x="86216" fg:w="167"/><text x="54.3850%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (167 samples, 0.10%)</title><rect x="54.1350%" y="357" width="0.1049%" height="15" fill="rgb(213,23,39)" fg:x="86216" fg:w="167"/><text x="54.3850%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (167 samples, 0.10%)</title><rect x="54.1350%" y="341" width="0.1049%" height="15" fill="rgb(238,48,10)" fg:x="86216" fg:w="167"/><text x="54.3850%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (167 samples, 0.10%)</title><rect x="54.1350%" y="325" width="0.1049%" height="15" fill="rgb(251,196,23)" fg:x="86216" fg:w="167"/><text x="54.3850%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (167 samples, 0.10%)</title><rect x="54.1350%" y="309" width="0.1049%" height="15" fill="rgb(250,152,24)" fg:x="86216" fg:w="167"/><text x="54.3850%" y="319.50"></text></g><g><title>cfree (167 samples, 0.10%)</title><rect x="54.1350%" y="293" width="0.1049%" height="15" fill="rgb(209,150,17)" fg:x="86216" fg:w="167"/><text x="54.3850%" y="303.50"></text></g><g><title>[libc.so.6] (161 samples, 0.10%)</title><rect x="54.1388%" y="277" width="0.1011%" height="15" fill="rgb(234,202,34)" fg:x="86222" fg:w="161"/><text x="54.3888%" y="287.50"></text></g><g><title>[libc.so.6] (147 samples, 0.09%)</title><rect x="54.1476%" y="261" width="0.0923%" height="15" fill="rgb(253,148,53)" fg:x="86236" fg:w="147"/><text x="54.3976%" y="271.50"></text></g><g><title>[libc.so.6] (127 samples, 0.08%)</title><rect x="54.1602%" y="245" width="0.0797%" height="15" fill="rgb(218,129,16)" fg:x="86256" fg:w="127"/><text x="54.4102%" y="255.50"></text></g><g><title>[libc.so.6] (29 samples, 0.02%)</title><rect x="54.2217%" y="229" width="0.0182%" height="15" fill="rgb(216,85,19)" fg:x="86354" fg:w="29"/><text x="54.4717%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (235 samples, 0.15%)</title><rect x="55.3067%" y="357" width="0.1476%" height="15" fill="rgb(235,228,7)" fg:x="88082" fg:w="235"/><text x="55.5567%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (235 samples, 0.15%)</title><rect x="55.3067%" y="341" width="0.1476%" height="15" fill="rgb(245,175,0)" fg:x="88082" fg:w="235"/><text x="55.5567%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (235 samples, 0.15%)</title><rect x="55.3067%" y="325" width="0.1476%" height="15" fill="rgb(208,168,36)" fg:x="88082" fg:w="235"/><text x="55.5567%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::backward_unchecked (19 samples, 0.01%)</title><rect x="55.4624%" y="309" width="0.0119%" height="15" fill="rgb(246,171,24)" fg:x="88330" fg:w="19"/><text x="55.7124%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_sub (19 samples, 0.01%)</title><rect x="55.4624%" y="293" width="0.0119%" height="15" fill="rgb(215,142,24)" fg:x="88330" fg:w="19"/><text x="55.7124%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 0.06%)</title><rect x="55.4543%" y="357" width="0.0603%" height="15" fill="rgb(250,187,7)" fg:x="88317" fg:w="96"/><text x="55.7043%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (96 samples, 0.06%)</title><rect x="55.4543%" y="341" width="0.0603%" height="15" fill="rgb(228,66,33)" fg:x="88317" fg:w="96"/><text x="55.7043%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (96 samples, 0.06%)</title><rect x="55.4543%" y="325" width="0.0603%" height="15" fill="rgb(234,215,21)" fg:x="88317" fg:w="96"/><text x="55.7043%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (64 samples, 0.04%)</title><rect x="55.4743%" y="309" width="0.0402%" height="15" fill="rgb(222,191,20)" fg:x="88349" fg:w="64"/><text x="55.7243%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (88 samples, 0.06%)</title><rect x="55.5152%" y="357" width="0.0553%" height="15" fill="rgb(245,79,54)" fg:x="88414" fg:w="88"/><text x="55.7652%" y="367.50"></text></g><g><title>tetrs::logic::bot::try_place (2,214 samples, 1.39%)</title><rect x="54.2399%" y="373" width="1.3902%" height="15" fill="rgb(240,10,37)" fg:x="86383" fg:w="2214"/><text x="54.4899%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (95 samples, 0.06%)</title><rect x="55.5704%" y="357" width="0.0597%" height="15" fill="rgb(214,192,32)" fg:x="88502" fg:w="95"/><text x="55.8204%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (95 samples, 0.06%)</title><rect x="55.5704%" y="341" width="0.0597%" height="15" fill="rgb(209,36,54)" fg:x="88502" fg:w="95"/><text x="55.8204%" y="351.50"></text></g><g><title>tetrs::logic::bot::generate_states (55,534 samples, 34.87%)</title><rect x="20.7847%" y="389" width="34.8698%" height="15" fill="rgb(220,10,11)" fg:x="33102" fg:w="55534"/><text x="21.0347%" y="399.50">tetrs::logic::bot::generate_states</text></g><g><title>tetrs::logic::id_manager::next_unique_id (39 samples, 0.02%)</title><rect x="55.6301%" y="373" width="0.0245%" height="15" fill="rgb(221,106,17)" fg:x="88597" fg:w="39"/><text x="55.8801%" y="383.50"></text></g><g><title>&lt;u8 as core::iter::range::Step&gt;::forward_unchecked (379 samples, 0.24%)</title><rect x="56.0212%" y="341" width="0.2380%" height="15" fill="rgb(251,142,44)" fg:x="89220" fg:w="379"/><text x="56.2712%" y="351.50"></text></g><g><title>core::num::&lt;impl u8&gt;::unchecked_add (379 samples, 0.24%)</title><rect x="56.0212%" y="325" width="0.2380%" height="15" fill="rgb(238,13,15)" fg:x="89220" fg:w="379"/><text x="56.2712%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (533 samples, 0.33%)</title><rect x="56.0200%" y="373" width="0.3347%" height="15" fill="rgb(208,107,27)" fg:x="89218" fg:w="533"/><text x="56.2700%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (533 samples, 0.33%)</title><rect x="56.0200%" y="357" width="0.3347%" height="15" fill="rgb(205,136,37)" fg:x="89218" fg:w="533"/><text x="56.2700%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (152 samples, 0.10%)</title><rect x="56.2592%" y="341" width="0.0954%" height="15" fill="rgb(250,205,27)" fg:x="89599" fg:w="152"/><text x="56.5092%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (137 samples, 0.09%)</title><rect x="56.4206%" y="357" width="0.0860%" height="15" fill="rgb(210,80,43)" fg:x="89856" fg:w="137"/><text x="56.6706%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (130 samples, 0.08%)</title><rect x="56.4250%" y="341" width="0.0816%" height="15" fill="rgb(247,160,36)" fg:x="89863" fg:w="130"/><text x="56.6750%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (130 samples, 0.08%)</title><rect x="56.4250%" y="325" width="0.0816%" height="15" fill="rgb(234,13,49)" fg:x="89863" fg:w="130"/><text x="56.6750%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (72 samples, 0.05%)</title><rect x="56.5066%" y="357" width="0.0452%" height="15" fill="rgb(234,122,0)" fg:x="89993" fg:w="72"/><text x="56.7566%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (72 samples, 0.05%)</title><rect x="56.5066%" y="341" width="0.0452%" height="15" fill="rgb(207,146,38)" fg:x="89993" fg:w="72"/><text x="56.7566%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (72 samples, 0.05%)</title><rect x="56.5066%" y="325" width="0.0452%" height="15" fill="rgb(207,177,25)" fg:x="89993" fg:w="72"/><text x="56.7566%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 0.09%)</title><rect x="56.5612%" y="357" width="0.0917%" height="15" fill="rgb(211,178,42)" fg:x="90080" fg:w="146"/><text x="56.8112%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (146 samples, 0.09%)</title><rect x="56.5612%" y="341" width="0.0917%" height="15" fill="rgb(230,69,54)" fg:x="90080" fg:w="146"/><text x="56.8112%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (146 samples, 0.09%)</title><rect x="56.5612%" y="325" width="0.0917%" height="15" fill="rgb(214,135,41)" fg:x="90080" fg:w="146"/><text x="56.8112%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (58 samples, 0.04%)</title><rect x="56.6165%" y="309" width="0.0364%" height="15" fill="rgb(237,67,25)" fg:x="90168" fg:w="58"/><text x="56.8665%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (173 samples, 0.11%)</title><rect x="56.8721%" y="341" width="0.1086%" height="15" fill="rgb(222,189,50)" fg:x="90575" fg:w="173"/><text x="57.1221%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (63 samples, 0.04%)</title><rect x="56.9411%" y="325" width="0.0396%" height="15" fill="rgb(245,148,34)" fg:x="90685" fg:w="63"/><text x="57.1911%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (523 samples, 0.33%)</title><rect x="56.6529%" y="357" width="0.3284%" height="15" fill="rgb(222,29,6)" fg:x="90226" fg:w="523"/><text x="56.9029%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,671 samples, 1.05%)</title><rect x="59.7390%" y="341" width="1.0492%" height="15" fill="rgb(221,189,43)" fg:x="95141" fg:w="1671"/><text x="59.9890%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,671 samples, 1.05%)</title><rect x="59.7390%" y="325" width="1.0492%" height="15" fill="rgb(207,36,27)" fg:x="95141" fg:w="1671"/><text x="59.9890%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,671 samples, 1.05%)</title><rect x="59.7390%" y="309" width="1.0492%" height="15" fill="rgb(217,90,24)" fg:x="95141" fg:w="1671"/><text x="59.9890%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (169 samples, 0.11%)</title><rect x="60.7883%" y="341" width="0.1061%" height="15" fill="rgb(224,66,35)" fg:x="96812" fg:w="169"/><text x="61.0383%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (169 samples, 0.11%)</title><rect x="60.7883%" y="325" width="0.1061%" height="15" fill="rgb(221,13,50)" fg:x="96812" fg:w="169"/><text x="61.0383%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (169 samples, 0.11%)</title><rect x="60.7883%" y="309" width="0.1061%" height="15" fill="rgb(236,68,49)" fg:x="96812" fg:w="169"/><text x="61.0383%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (211 samples, 0.13%)</title><rect x="60.8944%" y="341" width="0.1325%" height="15" fill="rgb(229,146,28)" fg:x="96981" fg:w="211"/><text x="61.1444%" y="351.50"></text></g><g><title>&lt;u8 as core::iter::range::Step&gt;::backward_unchecked (27 samples, 0.02%)</title><rect x="61.0884%" y="293" width="0.0170%" height="15" fill="rgb(225,31,38)" fg:x="97290" fg:w="27"/><text x="61.3384%" y="303.50"></text></g><g><title>core::num::&lt;impl u8&gt;::unchecked_sub (27 samples, 0.02%)</title><rect x="61.0884%" y="277" width="0.0170%" height="15" fill="rgb(250,208,3)" fg:x="97290" fg:w="27"/><text x="61.3384%" y="287.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::backward_unchecked (40 samples, 0.03%)</title><rect x="61.1054%" y="293" width="0.0251%" height="15" fill="rgb(246,54,23)" fg:x="97317" fg:w="40"/><text x="61.3554%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_sub (40 samples, 0.03%)</title><rect x="61.1054%" y="277" width="0.0251%" height="15" fill="rgb(243,76,11)" fg:x="97317" fg:w="40"/><text x="61.3554%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (33 samples, 0.02%)</title><rect x="61.1305%" y="293" width="0.0207%" height="15" fill="rgb(245,21,50)" fg:x="97357" fg:w="33"/><text x="61.3805%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (286 samples, 0.18%)</title><rect x="61.0269%" y="341" width="0.1796%" height="15" fill="rgb(228,9,43)" fg:x="97192" fg:w="286"/><text x="61.2769%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (286 samples, 0.18%)</title><rect x="61.0269%" y="325" width="0.1796%" height="15" fill="rgb(208,100,47)" fg:x="97192" fg:w="286"/><text x="61.2769%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (286 samples, 0.18%)</title><rect x="61.0269%" y="309" width="0.1796%" height="15" fill="rgb(232,26,8)" fg:x="97192" fg:w="286"/><text x="61.2769%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (88 samples, 0.06%)</title><rect x="61.1512%" y="293" width="0.0553%" height="15" fill="rgb(216,166,38)" fg:x="97390" fg:w="88"/><text x="61.4012%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (147 samples, 0.09%)</title><rect x="61.4294%" y="293" width="0.0923%" height="15" fill="rgb(251,202,51)" fg:x="97833" fg:w="147"/><text x="61.6794%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (27 samples, 0.02%)</title><rect x="61.5217%" y="293" width="0.0170%" height="15" fill="rgb(254,216,34)" fg:x="97980" fg:w="27"/><text x="61.7717%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (27 samples, 0.02%)</title><rect x="61.5386%" y="293" width="0.0170%" height="15" fill="rgb(251,32,27)" fg:x="98007" fg:w="27"/><text x="61.7886%" y="303.50"></text></g><g><title>__rdl_realloc (108 samples, 0.07%)</title><rect x="61.6730%" y="229" width="0.0678%" height="15" fill="rgb(208,127,28)" fg:x="98221" fg:w="108"/><text x="61.9230%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (77 samples, 0.05%)</title><rect x="61.6924%" y="213" width="0.0483%" height="15" fill="rgb(224,137,22)" fg:x="98252" fg:w="77"/><text x="61.9424%" y="223.50"></text></g><g><title>__rust_realloc (27 samples, 0.02%)</title><rect x="61.7408%" y="229" width="0.0170%" height="15" fill="rgb(254,70,32)" fg:x="98329" fg:w="27"/><text x="61.9908%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,040 samples, 1.91%)</title><rect x="61.6573%" y="277" width="1.9088%" height="15" fill="rgb(229,75,37)" fg:x="98196" fg:w="3040"/><text x="61.9073%" y="287.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (3,040 samples, 1.91%)</title><rect x="61.6573%" y="261" width="1.9088%" height="15" fill="rgb(252,64,23)" fg:x="98196" fg:w="3040"/><text x="61.9073%" y="271.50">a..</text></g><g><title>alloc::alloc::realloc (3,022 samples, 1.90%)</title><rect x="61.6686%" y="245" width="1.8975%" height="15" fill="rgb(232,162,48)" fg:x="98214" fg:w="3022"/><text x="61.9186%" y="255.50">a..</text></g><g><title>realloc (2,880 samples, 1.81%)</title><rect x="61.7577%" y="229" width="1.8084%" height="15" fill="rgb(246,160,12)" fg:x="98356" fg:w="2880"/><text x="62.0077%" y="239.50">r..</text></g><g><title>[libc.so.6] (2,425 samples, 1.52%)</title><rect x="62.0434%" y="213" width="1.5227%" height="15" fill="rgb(247,166,0)" fg:x="98811" fg:w="2425"/><text x="62.2934%" y="223.50"></text></g><g><title>[libc.so.6] (1,956 samples, 1.23%)</title><rect x="62.3379%" y="197" width="1.2282%" height="15" fill="rgb(249,219,21)" fg:x="99280" fg:w="1956"/><text x="62.5879%" y="207.50"></text></g><g><title>[libc.so.6] (218 samples, 0.14%)</title><rect x="63.4292%" y="181" width="0.1369%" height="15" fill="rgb(205,209,3)" fg:x="101018" fg:w="218"/><text x="63.6792%" y="191.50"></text></g><g><title>__rdl_alloc (22 samples, 0.01%)</title><rect x="63.5667%" y="277" width="0.0138%" height="15" fill="rgb(243,44,1)" fg:x="101237" fg:w="22"/><text x="63.8167%" y="287.50"></text></g><g><title>__rust_alloc (33 samples, 0.02%)</title><rect x="63.5805%" y="277" width="0.0207%" height="15" fill="rgb(206,159,16)" fg:x="101259" fg:w="33"/><text x="63.8305%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (43 samples, 0.03%)</title><rect x="63.6013%" y="277" width="0.0270%" height="15" fill="rgb(244,77,30)" fg:x="101292" fg:w="43"/><text x="63.8513%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,503 samples, 2.20%)</title><rect x="61.5556%" y="293" width="2.1995%" height="15" fill="rgb(218,69,12)" fg:x="98034" fg:w="3503"/><text x="61.8056%" y="303.50">a..</text></g><g><title>malloc (202 samples, 0.13%)</title><rect x="63.6283%" y="277" width="0.1268%" height="15" fill="rgb(212,87,7)" fg:x="101335" fg:w="202"/><text x="63.8783%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::array (32 samples, 0.02%)</title><rect x="63.7551%" y="293" width="0.0201%" height="15" fill="rgb(245,114,25)" fg:x="101537" fg:w="32"/><text x="64.0051%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (32 samples, 0.02%)</title><rect x="63.7551%" y="277" width="0.0201%" height="15" fill="rgb(210,61,42)" fg:x="101537" fg:w="32"/><text x="64.0051%" y="287.50"></text></g><g><title>core::cmp::max (90 samples, 0.06%)</title><rect x="63.7752%" y="293" width="0.0565%" height="15" fill="rgb(211,52,33)" fg:x="101569" fg:w="90"/><text x="64.0252%" y="303.50"></text></g><g><title>core::cmp::Ord::max (90 samples, 0.06%)</title><rect x="63.7752%" y="277" width="0.0565%" height="15" fill="rgb(234,58,33)" fg:x="101569" fg:w="90"/><text x="64.0252%" y="287.50"></text></g><g><title>core::cmp::max_by (90 samples, 0.06%)</title><rect x="63.7752%" y="261" width="0.0565%" height="15" fill="rgb(220,115,36)" fg:x="101569" fg:w="90"/><text x="64.0252%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3,940 samples, 2.47%)</title><rect x="61.3867%" y="325" width="2.4739%" height="15" fill="rgb(243,153,54)" fg:x="97765" fg:w="3940"/><text x="61.6367%" y="335.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3,904 samples, 2.45%)</title><rect x="61.4093%" y="309" width="2.4513%" height="15" fill="rgb(251,47,18)" fg:x="97801" fg:w="3904"/><text x="61.6593%" y="319.50">al..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (46 samples, 0.03%)</title><rect x="63.8317%" y="293" width="0.0289%" height="15" fill="rgb(242,102,42)" fg:x="101659" fg:w="46"/><text x="64.0817%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (46 samples, 0.03%)</title><rect x="63.8317%" y="277" width="0.0289%" height="15" fill="rgb(234,31,38)" fg:x="101659" fg:w="46"/><text x="64.0817%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (140 samples, 0.09%)</title><rect x="63.8687%" y="325" width="0.0879%" height="15" fill="rgb(221,117,51)" fg:x="101718" fg:w="140"/><text x="64.1187%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,606 samples, 2.89%)</title><rect x="61.2159%" y="341" width="2.8921%" height="15" fill="rgb(212,20,18)" fg:x="97493" fg:w="4606"/><text x="61.4659%" y="351.50">al..</text></g><g><title>core::ptr::write (241 samples, 0.15%)</title><rect x="63.9566%" y="325" width="0.1513%" height="15" fill="rgb(245,133,36)" fg:x="101858" fg:w="241"/><text x="64.2066%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="64.1080%" y="341" width="0.0107%" height="15" fill="rgb(212,6,19)" fg:x="102099" fg:w="17"/><text x="64.3580%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (163 samples, 0.10%)</title><rect x="64.1186%" y="341" width="0.1023%" height="15" fill="rgb(218,1,36)" fg:x="102116" fg:w="163"/><text x="64.3686%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (163 samples, 0.10%)</title><rect x="64.1186%" y="325" width="0.1023%" height="15" fill="rgb(246,84,54)" fg:x="102116" fg:w="163"/><text x="64.3686%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (148 samples, 0.09%)</title><rect x="64.1281%" y="309" width="0.0929%" height="15" fill="rgb(242,110,6)" fg:x="102131" fg:w="148"/><text x="64.3781%" y="319.50"></text></g><g><title>__rdl_dealloc (16 samples, 0.01%)</title><rect x="64.2241%" y="213" width="0.0100%" height="15" fill="rgb(214,47,5)" fg:x="102284" fg:w="16"/><text x="64.4741%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (16 samples, 0.01%)</title><rect x="64.2241%" y="197" width="0.0100%" height="15" fill="rgb(218,159,25)" fg:x="102284" fg:w="16"/><text x="64.4741%" y="207.50"></text></g><g><title>__rust_dealloc (38 samples, 0.02%)</title><rect x="64.2342%" y="213" width="0.0239%" height="15" fill="rgb(215,211,28)" fg:x="102300" fg:w="38"/><text x="64.4842%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (827 samples, 0.52%)</title><rect x="64.2210%" y="245" width="0.5193%" height="15" fill="rgb(238,59,32)" fg:x="102279" fg:w="827"/><text x="64.4710%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (827 samples, 0.52%)</title><rect x="64.2210%" y="229" width="0.5193%" height="15" fill="rgb(226,82,3)" fg:x="102279" fg:w="827"/><text x="64.4710%" y="239.50"></text></g><g><title>cfree (768 samples, 0.48%)</title><rect x="64.2580%" y="213" width="0.4822%" height="15" fill="rgb(240,164,32)" fg:x="102338" fg:w="768"/><text x="64.5080%" y="223.50"></text></g><g><title>[libc.so.6] (666 samples, 0.42%)</title><rect x="64.3221%" y="197" width="0.4182%" height="15" fill="rgb(232,46,7)" fg:x="102440" fg:w="666"/><text x="64.5721%" y="207.50"></text></g><g><title>[libc.so.6] (395 samples, 0.25%)</title><rect x="64.4922%" y="181" width="0.2480%" height="15" fill="rgb(229,129,53)" fg:x="102711" fg:w="395"/><text x="64.7422%" y="191.50"></text></g><g><title>[libc.so.6] (287 samples, 0.18%)</title><rect x="64.5601%" y="165" width="0.1802%" height="15" fill="rgb(234,188,29)" fg:x="102819" fg:w="287"/><text x="64.8101%" y="175.50"></text></g><g><title>[libc.so.6] (136 samples, 0.09%)</title><rect x="64.6549%" y="149" width="0.0854%" height="15" fill="rgb(246,141,4)" fg:x="102970" fg:w="136"/><text x="64.9049%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(usize,usize)&gt;&gt; (845 samples, 0.53%)</title><rect x="64.2210%" y="341" width="0.5306%" height="15" fill="rgb(229,23,39)" fg:x="102279" fg:w="845"/><text x="64.4710%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (845 samples, 0.53%)</title><rect x="64.2210%" y="325" width="0.5306%" height="15" fill="rgb(206,12,3)" fg:x="102279" fg:w="845"/><text x="64.4710%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(usize,usize),alloc::alloc::Global&gt;&gt; (845 samples, 0.53%)</title><rect x="64.2210%" y="309" width="0.5306%" height="15" fill="rgb(252,226,20)" fg:x="102279" fg:w="845"/><text x="64.4710%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (845 samples, 0.53%)</title><rect x="64.2210%" y="293" width="0.5306%" height="15" fill="rgb(216,123,35)" fg:x="102279" fg:w="845"/><text x="64.4710%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (845 samples, 0.53%)</title><rect x="64.2210%" y="277" width="0.5306%" height="15" fill="rgb(212,68,40)" fg:x="102279" fg:w="845"/><text x="64.4710%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (845 samples, 0.53%)</title><rect x="64.2210%" y="261" width="0.5306%" height="15" fill="rgb(254,125,32)" fg:x="102279" fg:w="845"/><text x="64.4710%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (18 samples, 0.01%)</title><rect x="64.7403%" y="245" width="0.0113%" height="15" fill="rgb(253,97,22)" fg:x="103106" fg:w="18"/><text x="64.9903%" y="255.50"></text></g><g><title>__rdl_dealloc (32 samples, 0.02%)</title><rect x="64.7761%" y="197" width="0.0201%" height="15" fill="rgb(241,101,14)" fg:x="103163" fg:w="32"/><text x="65.0261%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (32 samples, 0.02%)</title><rect x="64.7761%" y="181" width="0.0201%" height="15" fill="rgb(238,103,29)" fg:x="103163" fg:w="32"/><text x="65.0261%" y="191.50"></text></g><g><title>__rust_dealloc (27 samples, 0.02%)</title><rect x="64.7962%" y="197" width="0.0170%" height="15" fill="rgb(233,195,47)" fg:x="103195" fg:w="27"/><text x="65.0462%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (468 samples, 0.29%)</title><rect x="64.7610%" y="229" width="0.2939%" height="15" fill="rgb(246,218,30)" fg:x="103139" fg:w="468"/><text x="65.0110%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (462 samples, 0.29%)</title><rect x="64.7648%" y="213" width="0.2901%" height="15" fill="rgb(219,145,47)" fg:x="103145" fg:w="462"/><text x="65.0148%" y="223.50"></text></g><g><title>cfree (385 samples, 0.24%)</title><rect x="64.8131%" y="197" width="0.2417%" height="15" fill="rgb(243,12,26)" fg:x="103222" fg:w="385"/><text x="65.0631%" y="207.50"></text></g><g><title>[libc.so.6] (230 samples, 0.14%)</title><rect x="64.9104%" y="181" width="0.1444%" height="15" fill="rgb(214,87,16)" fg:x="103377" fg:w="230"/><text x="65.1604%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (483 samples, 0.30%)</title><rect x="64.7610%" y="261" width="0.3033%" height="15" fill="rgb(208,99,42)" fg:x="103139" fg:w="483"/><text x="65.0110%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (483 samples, 0.30%)</title><rect x="64.7610%" y="245" width="0.3033%" height="15" fill="rgb(253,99,2)" fg:x="103139" fg:w="483"/><text x="65.0110%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;u16&gt;&gt; (500 samples, 0.31%)</title><rect x="64.7516%" y="341" width="0.3140%" height="15" fill="rgb(220,168,23)" fg:x="103124" fg:w="500"/><text x="65.0016%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;u16,std::collections::hash::map::RandomState&gt;&gt; (500 samples, 0.31%)</title><rect x="64.7516%" y="325" width="0.3140%" height="15" fill="rgb(242,38,24)" fg:x="103124" fg:w="500"/><text x="65.0016%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u16,(),std::collections::hash::map::RandomState&gt;&gt; (500 samples, 0.31%)</title><rect x="64.7516%" y="309" width="0.3140%" height="15" fill="rgb(225,182,9)" fg:x="103124" fg:w="500"/><text x="65.0016%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u16,())&gt;&gt; (500 samples, 0.31%)</title><rect x="64.7516%" y="293" width="0.3140%" height="15" fill="rgb(243,178,37)" fg:x="103124" fg:w="500"/><text x="65.0016%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (500 samples, 0.31%)</title><rect x="64.7516%" y="277" width="0.3140%" height="15" fill="rgb(232,139,19)" fg:x="103124" fg:w="500"/><text x="65.0016%" y="287.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::clear (35 samples, 0.02%)</title><rect x="65.0655%" y="341" width="0.0220%" height="15" fill="rgb(225,201,24)" fg:x="103624" fg:w="35"/><text x="65.3155%" y="351.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::clear (35 samples, 0.02%)</title><rect x="65.0655%" y="325" width="0.0220%" height="15" fill="rgb(221,47,46)" fg:x="103624" fg:w="35"/><text x="65.3155%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::clear (35 samples, 0.02%)</title><rect x="65.0655%" y="309" width="0.0220%" height="15" fill="rgb(249,23,13)" fg:x="103624" fg:w="35"/><text x="65.3155%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clear (35 samples, 0.02%)</title><rect x="65.0655%" y="293" width="0.0220%" height="15" fill="rgb(219,9,5)" fg:x="103624" fg:w="35"/><text x="65.3155%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (919 samples, 0.58%)</title><rect x="68.6621%" y="181" width="0.5770%" height="15" fill="rgb(254,171,16)" fg:x="109352" fg:w="919"/><text x="68.9121%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,954 samples, 1.23%)</title><rect x="68.2766%" y="197" width="1.2269%" height="15" fill="rgb(230,171,20)" fg:x="108738" fg:w="1954"/><text x="68.5266%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (421 samples, 0.26%)</title><rect x="69.2392%" y="181" width="0.2643%" height="15" fill="rgb(210,71,41)" fg:x="110271" fg:w="421"/><text x="69.4892%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4,629 samples, 2.91%)</title><rect x="70.1791%" y="181" width="2.9065%" height="15" fill="rgb(206,173,20)" fg:x="111768" fg:w="4629"/><text x="70.4291%" y="191.50">co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6,720 samples, 4.22%)</title><rect x="69.5035%" y="197" width="4.2195%" height="15" fill="rgb(233,88,34)" fg:x="110692" fg:w="6720"/><text x="69.7535%" y="207.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,015 samples, 0.64%)</title><rect x="73.0857%" y="181" width="0.6373%" height="15" fill="rgb(223,209,46)" fg:x="116397" fg:w="1015"/><text x="73.3357%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (12,064 samples, 7.57%)</title><rect x="66.1486%" y="245" width="7.5750%" height="15" fill="rgb(250,43,18)" fg:x="105349" fg:w="12064"/><text x="66.3986%" y="255.50">&lt;std::coll..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12,064 samples, 7.57%)</title><rect x="66.1486%" y="229" width="7.5750%" height="15" fill="rgb(208,13,10)" fg:x="105349" fg:w="12064"/><text x="66.3986%" y="239.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12,064 samples, 7.57%)</title><rect x="66.1486%" y="213" width="7.5750%" height="15" fill="rgb(212,200,36)" fg:x="105349" fg:w="12064"/><text x="66.3986%" y="223.50">&lt;core::has..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,002 samples, 0.63%)</title><rect x="73.7236%" y="245" width="0.6292%" height="15" fill="rgb(225,90,30)" fg:x="117413" fg:w="1002"/><text x="73.9736%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (516 samples, 0.32%)</title><rect x="74.0288%" y="229" width="0.3240%" height="15" fill="rgb(236,182,39)" fg:x="117899" fg:w="516"/><text x="74.2788%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (516 samples, 0.32%)</title><rect x="74.0288%" y="213" width="0.3240%" height="15" fill="rgb(212,144,35)" fg:x="117899" fg:w="516"/><text x="74.2788%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (516 samples, 0.32%)</title><rect x="74.0288%" y="197" width="0.3240%" height="15" fill="rgb(228,63,44)" fg:x="117899" fg:w="516"/><text x="74.2788%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2,752 samples, 1.73%)</title><rect x="74.4463%" y="197" width="1.7280%" height="15" fill="rgb(228,109,6)" fg:x="118564" fg:w="2752"/><text x="74.6963%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2,678 samples, 1.68%)</title><rect x="74.4928%" y="181" width="1.6815%" height="15" fill="rgb(238,117,24)" fg:x="118638" fg:w="2678"/><text x="74.7428%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,678 samples, 1.68%)</title><rect x="74.4928%" y="165" width="1.6815%" height="15" fill="rgb(242,26,26)" fg:x="118638" fg:w="2678"/><text x="74.7428%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (1,445 samples, 0.91%)</title><rect x="75.2670%" y="149" width="0.9073%" height="15" fill="rgb(221,92,48)" fg:x="119871" fg:w="1445"/><text x="75.5170%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (119 samples, 0.07%)</title><rect x="76.0996%" y="133" width="0.0747%" height="15" fill="rgb(209,209,32)" fg:x="121197" fg:w="119"/><text x="76.3496%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (17,075 samples, 10.72%)</title><rect x="65.7028%" y="261" width="10.7214%" height="15" fill="rgb(221,70,22)" fg:x="104639" fg:w="17075"/><text x="65.9528%" y="271.50">core::hash::Buil..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,298 samples, 2.07%)</title><rect x="74.3534%" y="245" width="2.0708%" height="15" fill="rgb(248,145,5)" fg:x="118416" fg:w="3298"/><text x="74.6034%" y="255.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (3,256 samples, 2.04%)</title><rect x="74.3798%" y="229" width="2.0444%" height="15" fill="rgb(226,116,26)" fg:x="118458" fg:w="3256"/><text x="74.6298%" y="239.50">c..</text></g><g><title>core::hash::Hasher::write_u16 (3,256 samples, 2.04%)</title><rect x="74.3798%" y="213" width="2.0444%" height="15" fill="rgb(244,5,17)" fg:x="118458" fg:w="3256"/><text x="74.6298%" y="223.50">c..</text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (398 samples, 0.25%)</title><rect x="76.1743%" y="197" width="0.2499%" height="15" fill="rgb(252,159,33)" fg:x="121316" fg:w="398"/><text x="76.4243%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (17,196 samples, 10.80%)</title><rect x="65.6275%" y="277" width="10.7974%" height="15" fill="rgb(206,71,0)" fg:x="104519" fg:w="17196"/><text x="65.8775%" y="287.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (188 samples, 0.12%)</title><rect x="79.0187%" y="213" width="0.1180%" height="15" fill="rgb(233,118,54)" fg:x="125846" fg:w="188"/><text x="79.2687%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2,868 samples, 1.80%)</title><rect x="77.6235%" y="229" width="1.8008%" height="15" fill="rgb(234,83,48)" fg:x="123624" fg:w="2868"/><text x="77.8735%" y="239.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (458 samples, 0.29%)</title><rect x="79.1368%" y="213" width="0.2876%" height="15" fill="rgb(228,3,54)" fg:x="126034" fg:w="458"/><text x="79.3868%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (633 samples, 0.40%)</title><rect x="79.4243%" y="229" width="0.3975%" height="15" fill="rgb(226,155,13)" fg:x="126492" fg:w="633"/><text x="79.6743%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (633 samples, 0.40%)</title><rect x="79.4243%" y="213" width="0.3975%" height="15" fill="rgb(241,28,37)" fg:x="126492" fg:w="633"/><text x="79.6743%" y="223.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (633 samples, 0.40%)</title><rect x="79.4243%" y="197" width="0.3975%" height="15" fill="rgb(233,93,10)" fg:x="126492" fg:w="633"/><text x="79.6743%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (633 samples, 0.40%)</title><rect x="79.4243%" y="181" width="0.3975%" height="15" fill="rgb(225,113,19)" fg:x="126492" fg:w="633"/><text x="79.6743%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (3,647 samples, 2.29%)</title><rect x="79.8218%" y="229" width="2.2900%" height="15" fill="rgb(241,2,18)" fg:x="127125" fg:w="3647"/><text x="80.0718%" y="239.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1,274 samples, 0.80%)</title><rect x="82.1118%" y="229" width="0.7999%" height="15" fill="rgb(228,207,21)" fg:x="130772" fg:w="1274"/><text x="82.3618%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,274 samples, 0.80%)</title><rect x="82.1118%" y="213" width="0.7999%" height="15" fill="rgb(213,211,35)" fg:x="130772" fg:w="1274"/><text x="82.3618%" y="223.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (28,834 samples, 18.10%)</title><rect x="65.0875%" y="341" width="18.1049%" height="15" fill="rgb(209,83,10)" fg:x="103659" fg:w="28834"/><text x="65.3375%" y="351.50">std::collections::hash::set:..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (28,834 samples, 18.10%)</title><rect x="65.0875%" y="325" width="18.1049%" height="15" fill="rgb(209,164,1)" fg:x="103659" fg:w="28834"/><text x="65.3375%" y="335.50">hashbrown::set::HashSet&lt;T,S,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (28,834 samples, 18.10%)</title><rect x="65.0875%" y="309" width="18.1049%" height="15" fill="rgb(213,184,43)" fg:x="103659" fg:w="28834"/><text x="65.3375%" y="319.50">hashbrown::map::HashMap&lt;K,V,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28,834 samples, 18.10%)</title><rect x="65.0875%" y="293" width="18.1049%" height="15" fill="rgb(231,61,34)" fg:x="103659" fg:w="28834"/><text x="65.3375%" y="303.50">hashbrown::map::HashMap&lt;K,V,..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (10,778 samples, 6.77%)</title><rect x="76.4249%" y="277" width="6.7675%" height="15" fill="rgb(235,75,3)" fg:x="121715" fg:w="10778"/><text x="76.6749%" y="287.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10,778 samples, 6.77%)</title><rect x="76.4249%" y="261" width="6.7675%" height="15" fill="rgb(220,106,47)" fg:x="121715" fg:w="10778"/><text x="76.6749%" y="271.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (10,778 samples, 6.77%)</title><rect x="76.4249%" y="245" width="6.7675%" height="15" fill="rgb(210,196,33)" fg:x="121715" fg:w="10778"/><text x="76.6749%" y="255.50">hashbrown..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (447 samples, 0.28%)</title><rect x="82.9117%" y="229" width="0.2807%" height="15" fill="rgb(229,154,42)" fg:x="132046" fg:w="447"/><text x="83.1617%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (447 samples, 0.28%)</title><rect x="82.9117%" y="213" width="0.2807%" height="15" fill="rgb(228,114,26)" fg:x="132046" fg:w="447"/><text x="83.1617%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (447 samples, 0.28%)</title><rect x="82.9117%" y="197" width="0.2807%" height="15" fill="rgb(208,144,1)" fg:x="132046" fg:w="447"/><text x="83.1617%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (180 samples, 0.11%)</title><rect x="84.2284%" y="197" width="0.1130%" height="15" fill="rgb(239,112,37)" fg:x="134143" fg:w="180"/><text x="84.4784%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (575 samples, 0.36%)</title><rect x="84.0852%" y="213" width="0.3610%" height="15" fill="rgb(210,96,50)" fg:x="133915" fg:w="575"/><text x="84.3352%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (167 samples, 0.10%)</title><rect x="84.3414%" y="197" width="0.1049%" height="15" fill="rgb(222,178,2)" fg:x="134323" fg:w="167"/><text x="84.5914%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,495 samples, 0.94%)</title><rect x="84.6453%" y="197" width="0.9387%" height="15" fill="rgb(226,74,18)" fg:x="134807" fg:w="1495"/><text x="84.8953%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3,395 samples, 2.13%)</title><rect x="83.5955%" y="261" width="2.1317%" height="15" fill="rgb(225,67,54)" fg:x="133135" fg:w="3395"/><text x="83.8455%" y="271.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,395 samples, 2.13%)</title><rect x="83.5955%" y="245" width="2.1317%" height="15" fill="rgb(251,92,32)" fg:x="133135" fg:w="3395"/><text x="83.8455%" y="255.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,395 samples, 2.13%)</title><rect x="83.5955%" y="229" width="2.1317%" height="15" fill="rgb(228,149,22)" fg:x="133135" fg:w="3395"/><text x="83.8455%" y="239.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,040 samples, 1.28%)</title><rect x="84.4463%" y="213" width="1.2809%" height="15" fill="rgb(243,54,13)" fg:x="134490" fg:w="2040"/><text x="84.6963%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (228 samples, 0.14%)</title><rect x="85.5840%" y="197" width="0.1432%" height="15" fill="rgb(243,180,28)" fg:x="136302" fg:w="228"/><text x="85.8340%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (313 samples, 0.20%)</title><rect x="85.7272%" y="261" width="0.1965%" height="15" fill="rgb(208,167,24)" fg:x="136530" fg:w="313"/><text x="85.9772%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (169 samples, 0.11%)</title><rect x="85.8176%" y="245" width="0.1061%" height="15" fill="rgb(245,73,45)" fg:x="136674" fg:w="169"/><text x="86.0676%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (169 samples, 0.11%)</title><rect x="85.8176%" y="229" width="0.1061%" height="15" fill="rgb(237,203,48)" fg:x="136674" fg:w="169"/><text x="86.0676%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (169 samples, 0.11%)</title><rect x="85.8176%" y="213" width="0.1061%" height="15" fill="rgb(211,197,16)" fg:x="136674" fg:w="169"/><text x="86.0676%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (784 samples, 0.49%)</title><rect x="85.9237%" y="213" width="0.4923%" height="15" fill="rgb(243,99,51)" fg:x="136843" fg:w="784"/><text x="86.1737%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (670 samples, 0.42%)</title><rect x="85.9953%" y="197" width="0.4207%" height="15" fill="rgb(215,123,29)" fg:x="136957" fg:w="670"/><text x="86.2453%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (670 samples, 0.42%)</title><rect x="85.9953%" y="181" width="0.4207%" height="15" fill="rgb(239,186,37)" fg:x="136957" fg:w="670"/><text x="86.2453%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (252 samples, 0.16%)</title><rect x="86.2578%" y="165" width="0.1582%" height="15" fill="rgb(252,136,39)" fg:x="137375" fg:w="252"/><text x="86.5078%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.02%)</title><rect x="86.3978%" y="149" width="0.0182%" height="15" fill="rgb(223,213,32)" fg:x="137598" fg:w="29"/><text x="86.6478%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (4,927 samples, 3.09%)</title><rect x="83.4027%" y="293" width="3.0937%" height="15" fill="rgb(233,115,5)" fg:x="132828" fg:w="4927"/><text x="83.6527%" y="303.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (4,908 samples, 3.08%)</title><rect x="83.4146%" y="277" width="3.0817%" height="15" fill="rgb(207,226,44)" fg:x="132847" fg:w="4908"/><text x="83.6646%" y="287.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (912 samples, 0.57%)</title><rect x="85.9237%" y="261" width="0.5726%" height="15" fill="rgb(208,126,0)" fg:x="136843" fg:w="912"/><text x="86.1737%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (912 samples, 0.57%)</title><rect x="85.9237%" y="245" width="0.5726%" height="15" fill="rgb(244,66,21)" fg:x="136843" fg:w="912"/><text x="86.1737%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u16 (912 samples, 0.57%)</title><rect x="85.9237%" y="229" width="0.5726%" height="15" fill="rgb(222,97,12)" fg:x="136843" fg:w="912"/><text x="86.1737%" y="239.50"></text></g><g><title>core::num::&lt;impl u16&gt;::to_ne_bytes (128 samples, 0.08%)</title><rect x="86.4160%" y="213" width="0.0804%" height="15" fill="rgb(219,213,19)" fg:x="137627" fg:w="128"/><text x="86.6660%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (82 samples, 0.05%)</title><rect x="86.8141%" y="213" width="0.0515%" height="15" fill="rgb(252,169,30)" fg:x="138261" fg:w="82"/><text x="87.0641%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (60 samples, 0.04%)</title><rect x="86.8656%" y="213" width="0.0377%" height="15" fill="rgb(206,32,51)" fg:x="138343" fg:w="60"/><text x="87.1156%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (60 samples, 0.04%)</title><rect x="86.8656%" y="197" width="0.0377%" height="15" fill="rgb(250,172,42)" fg:x="138343" fg:w="60"/><text x="87.1156%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (28 samples, 0.02%)</title><rect x="86.8857%" y="181" width="0.0176%" height="15" fill="rgb(209,34,43)" fg:x="138375" fg:w="28"/><text x="87.1357%" y="191.50"></text></g><g><title>core::mem::swap (19 samples, 0.01%)</title><rect x="86.9033%" y="213" width="0.0119%" height="15" fill="rgb(223,11,35)" fg:x="138403" fg:w="19"/><text x="87.1533%" y="223.50"></text></g><g><title>core::mem::swap_simple (19 samples, 0.01%)</title><rect x="86.9033%" y="197" width="0.0119%" height="15" fill="rgb(251,219,26)" fg:x="138403" fg:w="19"/><text x="87.1533%" y="207.50"></text></g><g><title>core::ptr::read (19 samples, 0.01%)</title><rect x="86.9033%" y="181" width="0.0119%" height="15" fill="rgb(231,119,3)" fg:x="138403" fg:w="19"/><text x="87.1533%" y="191.50"></text></g><g><title>__rdl_dealloc (21 samples, 0.01%)</title><rect x="86.9447%" y="117" width="0.0132%" height="15" fill="rgb(216,97,11)" fg:x="138469" fg:w="21"/><text x="87.1947%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (21 samples, 0.01%)</title><rect x="86.9447%" y="101" width="0.0132%" height="15" fill="rgb(223,59,9)" fg:x="138469" fg:w="21"/><text x="87.1947%" y="111.50"></text></g><g><title>__rust_dealloc (57 samples, 0.04%)</title><rect x="86.9579%" y="117" width="0.0358%" height="15" fill="rgb(233,93,31)" fg:x="138490" fg:w="57"/><text x="87.2079%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (359 samples, 0.23%)</title><rect x="86.9372%" y="149" width="0.2254%" height="15" fill="rgb(239,81,33)" fg:x="138457" fg:w="359"/><text x="87.1872%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (355 samples, 0.22%)</title><rect x="86.9397%" y="133" width="0.2229%" height="15" fill="rgb(213,120,34)" fg:x="138461" fg:w="355"/><text x="87.1897%" y="143.50"></text></g><g><title>cfree (269 samples, 0.17%)</title><rect x="86.9937%" y="117" width="0.1689%" height="15" fill="rgb(243,49,53)" fg:x="138547" fg:w="269"/><text x="87.2437%" y="127.50"></text></g><g><title>[libc.so.6] (187 samples, 0.12%)</title><rect x="87.0452%" y="101" width="0.1174%" height="15" fill="rgb(247,216,33)" fg:x="138629" fg:w="187"/><text x="87.2952%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (412 samples, 0.26%)</title><rect x="86.9152%" y="213" width="0.2587%" height="15" fill="rgb(226,26,14)" fg:x="138422" fg:w="412"/><text x="87.1652%" y="223.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (412 samples, 0.26%)</title><rect x="86.9152%" y="197" width="0.2587%" height="15" fill="rgb(215,49,53)" fg:x="138422" fg:w="412"/><text x="87.1652%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::_{{closure}} (412 samples, 0.26%)</title><rect x="86.9152%" y="181" width="0.2587%" height="15" fill="rgb(245,162,40)" fg:x="138422" fg:w="412"/><text x="87.1652%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (377 samples, 0.24%)</title><rect x="86.9372%" y="165" width="0.2367%" height="15" fill="rgb(229,68,17)" fg:x="138457" fg:w="377"/><text x="87.1872%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (18 samples, 0.01%)</title><rect x="87.1626%" y="149" width="0.0113%" height="15" fill="rgb(213,182,10)" fg:x="138816" fg:w="18"/><text x="87.4126%" y="159.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (18 samples, 0.01%)</title><rect x="87.1626%" y="133" width="0.0113%" height="15" fill="rgb(245,125,30)" fg:x="138816" fg:w="18"/><text x="87.4126%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (148 samples, 0.09%)</title><rect x="87.6976%" y="85" width="0.0929%" height="15" fill="rgb(232,202,2)" fg:x="139668" fg:w="148"/><text x="87.9476%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (307 samples, 0.19%)</title><rect x="87.6549%" y="101" width="0.1928%" height="15" fill="rgb(237,140,51)" fg:x="139600" fg:w="307"/><text x="87.9049%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (91 samples, 0.06%)</title><rect x="87.7905%" y="85" width="0.0571%" height="15" fill="rgb(236,157,25)" fg:x="139816" fg:w="91"/><text x="88.0405%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (614 samples, 0.39%)</title><rect x="87.9305%" y="85" width="0.3855%" height="15" fill="rgb(219,209,0)" fg:x="140039" fg:w="614"/><text x="88.1805%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1,902 samples, 1.19%)</title><rect x="87.2957%" y="149" width="1.1943%" height="15" fill="rgb(240,116,54)" fg:x="139028" fg:w="1902"/><text x="87.5457%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,902 samples, 1.19%)</title><rect x="87.2957%" y="133" width="1.1943%" height="15" fill="rgb(216,10,36)" fg:x="139028" fg:w="1902"/><text x="87.5457%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,902 samples, 1.19%)</title><rect x="87.2957%" y="117" width="1.1943%" height="15" fill="rgb(222,72,44)" fg:x="139028" fg:w="1902"/><text x="87.5457%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,023 samples, 0.64%)</title><rect x="87.8476%" y="101" width="0.6423%" height="15" fill="rgb(232,159,9)" fg:x="139907" fg:w="1023"/><text x="88.0976%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (277 samples, 0.17%)</title><rect x="88.3160%" y="85" width="0.1739%" height="15" fill="rgb(210,39,32)" fg:x="140653" fg:w="277"/><text x="88.5660%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (165 samples, 0.10%)</title><rect x="88.4900%" y="149" width="0.1036%" height="15" fill="rgb(216,194,45)" fg:x="140930" fg:w="165"/><text x="88.7400%" y="159.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (59 samples, 0.04%)</title><rect x="88.5565%" y="133" width="0.0370%" height="15" fill="rgb(218,18,35)" fg:x="141036" fg:w="59"/><text x="88.8065%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (59 samples, 0.04%)</title><rect x="88.5565%" y="117" width="0.0370%" height="15" fill="rgb(207,83,51)" fg:x="141036" fg:w="59"/><text x="88.8065%" y="127.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (59 samples, 0.04%)</title><rect x="88.5565%" y="101" width="0.0370%" height="15" fill="rgb(225,63,43)" fg:x="141036" fg:w="59"/><text x="88.8065%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (476 samples, 0.30%)</title><rect x="88.6388%" y="101" width="0.2989%" height="15" fill="rgb(207,57,36)" fg:x="141167" fg:w="476"/><text x="88.8888%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (453 samples, 0.28%)</title><rect x="88.6532%" y="85" width="0.2844%" height="15" fill="rgb(216,99,33)" fg:x="141190" fg:w="453"/><text x="88.9032%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (453 samples, 0.28%)</title><rect x="88.6532%" y="69" width="0.2844%" height="15" fill="rgb(225,42,16)" fg:x="141190" fg:w="453"/><text x="88.9032%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (274 samples, 0.17%)</title><rect x="88.7656%" y="53" width="0.1720%" height="15" fill="rgb(220,201,45)" fg:x="141369" fg:w="274"/><text x="89.0156%" y="63.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (2,820 samples, 1.77%)</title><rect x="87.1739%" y="197" width="1.7707%" height="15" fill="rgb(225,33,4)" fg:x="138834" fg:w="2820"/><text x="87.4239%" y="207.50">h..</text></g><g><title>hashbrown::map::make_hash (2,820 samples, 1.77%)</title><rect x="87.1739%" y="181" width="1.7707%" height="15" fill="rgb(224,33,50)" fg:x="138834" fg:w="2820"/><text x="87.4239%" y="191.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (2,798 samples, 1.76%)</title><rect x="87.1877%" y="165" width="1.7569%" height="15" fill="rgb(246,198,51)" fg:x="138856" fg:w="2798"/><text x="87.4377%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (559 samples, 0.35%)</title><rect x="88.5936%" y="149" width="0.3510%" height="15" fill="rgb(205,22,4)" fg:x="141095" fg:w="559"/><text x="88.8436%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u16&gt;::hash (554 samples, 0.35%)</title><rect x="88.5967%" y="133" width="0.3479%" height="15" fill="rgb(206,3,8)" fg:x="141100" fg:w="554"/><text x="88.8467%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u16 (554 samples, 0.35%)</title><rect x="88.5967%" y="117" width="0.3479%" height="15" fill="rgb(251,23,15)" fg:x="141100" fg:w="554"/><text x="88.8467%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (2,866 samples, 1.80%)</title><rect x="87.1739%" y="213" width="1.7996%" height="15" fill="rgb(252,88,28)" fg:x="138834" fg:w="2866"/><text x="87.4239%" y="223.50">h..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (46 samples, 0.03%)</title><rect x="88.9446%" y="197" width="0.0289%" height="15" fill="rgb(212,127,14)" fg:x="141654" fg:w="46"/><text x="89.1946%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (46 samples, 0.03%)</title><rect x="88.9446%" y="181" width="0.0289%" height="15" fill="rgb(247,145,37)" fg:x="141654" fg:w="46"/><text x="89.1946%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (46 samples, 0.03%)</title><rect x="88.9446%" y="165" width="0.0289%" height="15" fill="rgb(209,117,53)" fg:x="141654" fg:w="46"/><text x="89.1946%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (46 samples, 0.03%)</title><rect x="88.9446%" y="149" width="0.0289%" height="15" fill="rgb(212,90,42)" fg:x="141654" fg:w="46"/><text x="89.1946%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket_ptr (45 samples, 0.03%)</title><rect x="88.9734%" y="213" width="0.0283%" height="15" fill="rgb(218,164,37)" fg:x="141700" fg:w="45"/><text x="89.2234%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (623 samples, 0.39%)</title><rect x="89.1543%" y="165" width="0.3912%" height="15" fill="rgb(246,65,34)" fg:x="141988" fg:w="623"/><text x="89.4043%" y="175.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (623 samples, 0.39%)</title><rect x="89.1543%" y="149" width="0.3912%" height="15" fill="rgb(231,100,33)" fg:x="141988" fg:w="623"/><text x="89.4043%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (1,526 samples, 0.96%)</title><rect x="89.0017%" y="181" width="0.9582%" height="15" fill="rgb(228,126,14)" fg:x="141745" fg:w="1526"/><text x="89.2517%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (660 samples, 0.41%)</title><rect x="89.5455%" y="165" width="0.4144%" height="15" fill="rgb(215,173,21)" fg:x="142611" fg:w="660"/><text x="89.7955%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (660 samples, 0.41%)</title><rect x="89.5455%" y="149" width="0.4144%" height="15" fill="rgb(210,6,40)" fg:x="142611" fg:w="660"/><text x="89.7955%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (95 samples, 0.06%)</title><rect x="90.3881%" y="165" width="0.0597%" height="15" fill="rgb(212,48,18)" fg:x="143953" fg:w="95"/><text x="90.6381%" y="175.50"></text></g><g><title>hashbrown::raw::is_full (95 samples, 0.06%)</title><rect x="90.3881%" y="149" width="0.0597%" height="15" fill="rgb(230,214,11)" fg:x="143953" fg:w="95"/><text x="90.6381%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (782 samples, 0.49%)</title><rect x="89.9599%" y="181" width="0.4910%" height="15" fill="rgb(254,105,39)" fg:x="143271" fg:w="782"/><text x="90.2099%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2,432 samples, 1.53%)</title><rect x="89.0017%" y="197" width="1.5271%" height="15" fill="rgb(245,158,5)" fg:x="141745" fg:w="2432"/><text x="89.2517%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (114 samples, 0.07%)</title><rect x="90.4572%" y="181" width="0.0716%" height="15" fill="rgb(249,208,11)" fg:x="144063" fg:w="114"/><text x="90.7072%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (114 samples, 0.07%)</title><rect x="90.4572%" y="165" width="0.0716%" height="15" fill="rgb(210,39,28)" fg:x="144063" fg:w="114"/><text x="90.7072%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (114 samples, 0.07%)</title><rect x="90.4572%" y="149" width="0.0716%" height="15" fill="rgb(211,56,53)" fg:x="144063" fg:w="114"/><text x="90.7072%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (24 samples, 0.02%)</title><rect x="90.5288%" y="181" width="0.0151%" height="15" fill="rgb(226,201,30)" fg:x="144177" fg:w="24"/><text x="90.7788%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (2,563 samples, 1.61%)</title><rect x="89.0017%" y="213" width="1.6093%" height="15" fill="rgb(239,101,34)" fg:x="141745" fg:w="2563"/><text x="89.2517%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (131 samples, 0.08%)</title><rect x="90.5288%" y="197" width="0.0823%" height="15" fill="rgb(226,209,5)" fg:x="144177" fg:w="131"/><text x="90.7788%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (107 samples, 0.07%)</title><rect x="90.5438%" y="181" width="0.0672%" height="15" fill="rgb(250,105,47)" fg:x="144201" fg:w="107"/><text x="90.7938%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (222 samples, 0.14%)</title><rect x="90.6116%" y="181" width="0.1394%" height="15" fill="rgb(230,72,3)" fg:x="144309" fg:w="222"/><text x="90.8616%" y="191.50"></text></g><g><title>core::intrinsics::write_bytes (222 samples, 0.14%)</title><rect x="90.6116%" y="165" width="0.1394%" height="15" fill="rgb(232,218,39)" fg:x="144309" fg:w="222"/><text x="90.8616%" y="175.50"></text></g><g><title>[libc.so.6] (186 samples, 0.12%)</title><rect x="90.6342%" y="149" width="0.1168%" height="15" fill="rgb(248,166,6)" fg:x="144345" fg:w="186"/><text x="90.8842%" y="159.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (202 samples, 0.13%)</title><rect x="90.7517%" y="165" width="0.1268%" height="15" fill="rgb(247,89,20)" fg:x="144532" fg:w="202"/><text x="91.0017%" y="175.50"></text></g><g><title>__rdl_alloc (52 samples, 0.03%)</title><rect x="90.9476%" y="101" width="0.0327%" height="15" fill="rgb(248,130,54)" fg:x="144844" fg:w="52"/><text x="91.1976%" y="111.50"></text></g><g><title>__rust_alloc (45 samples, 0.03%)</title><rect x="90.9802%" y="101" width="0.0283%" height="15" fill="rgb(234,196,4)" fg:x="144896" fg:w="45"/><text x="91.2302%" y="111.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1,010 samples, 0.63%)</title><rect x="90.8785%" y="165" width="0.6342%" height="15" fill="rgb(250,143,31)" fg:x="144734" fg:w="1010"/><text x="91.1285%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,010 samples, 0.63%)</title><rect x="90.8785%" y="149" width="0.6342%" height="15" fill="rgb(211,110,34)" fg:x="144734" fg:w="1010"/><text x="91.1285%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,010 samples, 0.63%)</title><rect x="90.8785%" y="133" width="0.6342%" height="15" fill="rgb(215,124,48)" fg:x="144734" fg:w="1010"/><text x="91.1285%" y="143.50"></text></g><g><title>alloc::alloc::alloc (973 samples, 0.61%)</title><rect x="90.9017%" y="117" width="0.6109%" height="15" fill="rgb(216,46,13)" fg:x="144771" fg:w="973"/><text x="91.1517%" y="127.50"></text></g><g><title>malloc (796 samples, 0.50%)</title><rect x="91.0129%" y="101" width="0.4998%" height="15" fill="rgb(205,184,25)" fg:x="144948" fg:w="796"/><text x="91.2629%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1,255 samples, 0.79%)</title><rect x="90.7510%" y="181" width="0.7880%" height="15" fill="rgb(228,1,10)" fg:x="144531" fg:w="1255"/><text x="91.0010%" y="191.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (42 samples, 0.03%)</title><rect x="91.5127%" y="165" width="0.0264%" height="15" fill="rgb(213,116,27)" fg:x="145744" fg:w="42"/><text x="91.7627%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (7,899 samples, 4.96%)</title><rect x="86.7061%" y="229" width="4.9598%" height="15" fill="rgb(241,95,50)" fg:x="138089" fg:w="7899"/><text x="86.9561%" y="239.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1,680 samples, 1.05%)</title><rect x="90.6110%" y="213" width="1.0549%" height="15" fill="rgb(238,48,32)" fg:x="144308" fg:w="1680"/><text x="90.8610%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,679 samples, 1.05%)</title><rect x="90.6116%" y="197" width="1.0542%" height="15" fill="rgb(235,113,49)" fg:x="144309" fg:w="1679"/><text x="90.8616%" y="207.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (202 samples, 0.13%)</title><rect x="91.5390%" y="181" width="0.1268%" height="15" fill="rgb(205,127,43)" fg:x="145786" fg:w="202"/><text x="91.7890%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (82 samples, 0.05%)</title><rect x="91.6144%" y="165" width="0.0515%" height="15" fill="rgb(250,162,2)" fg:x="145906" fg:w="82"/><text x="91.8644%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (57 samples, 0.04%)</title><rect x="91.6301%" y="149" width="0.0358%" height="15" fill="rgb(220,13,41)" fg:x="145931" fg:w="57"/><text x="91.8801%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (8,157 samples, 5.12%)</title><rect x="86.5768%" y="277" width="5.1218%" height="15" fill="rgb(249,221,25)" fg:x="137883" fg:w="8157"/><text x="86.8268%" y="287.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8,093 samples, 5.08%)</title><rect x="86.6169%" y="261" width="5.0816%" height="15" fill="rgb(215,208,19)" fg:x="137947" fg:w="8093"/><text x="86.8669%" y="271.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (8,048 samples, 5.05%)</title><rect x="86.6452%" y="245" width="5.0533%" height="15" fill="rgb(236,175,2)" fg:x="137992" fg:w="8048"/><text x="86.8952%" y="255.50">hashbr..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (52 samples, 0.03%)</title><rect x="91.6659%" y="229" width="0.0327%" height="15" fill="rgb(241,52,2)" fg:x="145988" fg:w="52"/><text x="91.9159%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (153 samples, 0.10%)</title><rect x="92.1274%" y="245" width="0.0961%" height="15" fill="rgb(248,140,14)" fg:x="146723" fg:w="153"/><text x="92.3774%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (818 samples, 0.51%)</title><rect x="91.7174%" y="261" width="0.5136%" height="15" fill="rgb(253,22,42)" fg:x="146070" fg:w="818"/><text x="91.9674%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (170 samples, 0.11%)</title><rect x="92.2417%" y="261" width="0.1067%" height="15" fill="rgb(234,61,47)" fg:x="146905" fg:w="170"/><text x="92.4917%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (22 samples, 0.01%)</title><rect x="92.3346%" y="245" width="0.0138%" height="15" fill="rgb(208,226,15)" fg:x="147053" fg:w="22"/><text x="92.5846%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (577 samples, 0.36%)</title><rect x="92.4351%" y="245" width="0.3623%" height="15" fill="rgb(217,221,4)" fg:x="147213" fg:w="577"/><text x="92.6851%" y="255.50"></text></g><g><title>hashbrown::raw::is_full (577 samples, 0.36%)</title><rect x="92.4351%" y="229" width="0.3623%" height="15" fill="rgb(212,174,34)" fg:x="147213" fg:w="577"/><text x="92.6851%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (822 samples, 0.52%)</title><rect x="92.3484%" y="261" width="0.5161%" height="15" fill="rgb(253,83,4)" fg:x="147075" fg:w="822"/><text x="92.5984%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (97 samples, 0.06%)</title><rect x="92.8036%" y="245" width="0.0609%" height="15" fill="rgb(250,195,49)" fg:x="147800" fg:w="97"/><text x="93.0536%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (97 samples, 0.06%)</title><rect x="92.8036%" y="229" width="0.0609%" height="15" fill="rgb(241,192,25)" fg:x="147800" fg:w="97"/><text x="93.0536%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (624 samples, 0.39%)</title><rect x="92.8658%" y="261" width="0.3918%" height="15" fill="rgb(208,124,10)" fg:x="147899" fg:w="624"/><text x="93.1158%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (691 samples, 0.43%)</title><rect x="93.2576%" y="261" width="0.4339%" height="15" fill="rgb(222,33,0)" fg:x="148523" fg:w="691"/><text x="93.5076%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (691 samples, 0.43%)</title><rect x="93.2576%" y="245" width="0.4339%" height="15" fill="rgb(234,209,28)" fg:x="148523" fg:w="691"/><text x="93.5076%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (11,543 samples, 7.25%)</title><rect x="86.4970%" y="293" width="7.2479%" height="15" fill="rgb(224,11,23)" fg:x="137756" fg:w="11543"/><text x="86.7470%" y="303.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (3,259 samples, 2.05%)</title><rect x="91.6985%" y="277" width="2.0463%" height="15" fill="rgb(232,99,1)" fg:x="146040" fg:w="3259"/><text x="91.9485%" y="287.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (85 samples, 0.05%)</title><rect x="93.6915%" y="261" width="0.0534%" height="15" fill="rgb(237,95,45)" fg:x="149214" fg:w="85"/><text x="93.9415%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (85 samples, 0.05%)</title><rect x="93.6915%" y="245" width="0.0534%" height="15" fill="rgb(208,109,11)" fg:x="149214" fg:w="85"/><text x="93.9415%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (85 samples, 0.05%)</title><rect x="93.6915%" y="229" width="0.0534%" height="15" fill="rgb(216,190,48)" fg:x="149214" fg:w="85"/><text x="93.9415%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (16 samples, 0.01%)</title><rect x="93.7580%" y="277" width="0.0100%" height="15" fill="rgb(251,171,36)" fg:x="149320" fg:w="16"/><text x="94.0080%" y="287.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (28 samples, 0.02%)</title><rect x="93.8673%" y="261" width="0.0176%" height="15" fill="rgb(230,62,22)" fg:x="149494" fg:w="28"/><text x="94.1173%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (180 samples, 0.11%)</title><rect x="93.8849%" y="261" width="0.1130%" height="15" fill="rgb(225,114,35)" fg:x="149522" fg:w="180"/><text x="94.1349%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (180 samples, 0.11%)</title><rect x="93.8849%" y="245" width="0.1130%" height="15" fill="rgb(215,118,42)" fg:x="149522" fg:w="180"/><text x="94.1349%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (134 samples, 0.08%)</title><rect x="93.9138%" y="229" width="0.0841%" height="15" fill="rgb(243,119,21)" fg:x="149568" fg:w="134"/><text x="94.1638%" y="239.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (17,239 samples, 10.82%)</title><rect x="83.1924%" y="341" width="10.8244%" height="15" fill="rgb(252,177,53)" fg:x="132493" fg:w="17239"/><text x="83.4424%" y="351.50">std::collections..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (17,239 samples, 10.82%)</title><rect x="83.1924%" y="325" width="10.8244%" height="15" fill="rgb(237,209,29)" fg:x="132493" fg:w="17239"/><text x="83.4424%" y="335.50">hashbrown::set::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17,192 samples, 10.79%)</title><rect x="83.2219%" y="309" width="10.7949%" height="15" fill="rgb(212,65,23)" fg:x="132540" fg:w="17192"/><text x="83.4719%" y="319.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (433 samples, 0.27%)</title><rect x="93.7449%" y="293" width="0.2719%" height="15" fill="rgb(230,222,46)" fg:x="149299" fg:w="433"/><text x="93.9949%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (396 samples, 0.25%)</title><rect x="93.7681%" y="277" width="0.2486%" height="15" fill="rgb(215,135,32)" fg:x="149336" fg:w="396"/><text x="94.0181%" y="287.50"></text></g><g><title>hashbrown::raw::special_is_empty (30 samples, 0.02%)</title><rect x="93.9979%" y="261" width="0.0188%" height="15" fill="rgb(246,101,22)" fg:x="149702" fg:w="30"/><text x="94.2479%" y="271.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (162 samples, 0.10%)</title><rect x="94.0211%" y="213" width="0.1017%" height="15" fill="rgb(206,107,13)" fg:x="149739" fg:w="162"/><text x="94.2711%" y="223.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (162 samples, 0.10%)</title><rect x="94.0211%" y="197" width="0.1017%" height="15" fill="rgb(250,100,44)" fg:x="149739" fg:w="162"/><text x="94.2711%" y="207.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (77 samples, 0.05%)</title><rect x="94.0745%" y="181" width="0.0483%" height="15" fill="rgb(231,147,38)" fg:x="149824" fg:w="77"/><text x="94.3245%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (77 samples, 0.05%)</title><rect x="94.0745%" y="165" width="0.0483%" height="15" fill="rgb(229,8,40)" fg:x="149824" fg:w="77"/><text x="94.3245%" y="175.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::new (238 samples, 0.15%)</title><rect x="94.0167%" y="341" width="0.1494%" height="15" fill="rgb(221,135,30)" fg:x="149732" fg:w="238"/><text x="94.2667%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (238 samples, 0.15%)</title><rect x="94.0167%" y="325" width="0.1494%" height="15" fill="rgb(249,193,18)" fg:x="149732" fg:w="238"/><text x="94.2667%" y="335.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (231 samples, 0.15%)</title><rect x="94.0211%" y="309" width="0.1450%" height="15" fill="rgb(209,133,39)" fg:x="149739" fg:w="231"/><text x="94.2711%" y="319.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (231 samples, 0.15%)</title><rect x="94.0211%" y="293" width="0.1450%" height="15" fill="rgb(232,100,14)" fg:x="149739" fg:w="231"/><text x="94.2711%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (231 samples, 0.15%)</title><rect x="94.0211%" y="277" width="0.1450%" height="15" fill="rgb(224,185,1)" fg:x="149739" fg:w="231"/><text x="94.2711%" y="287.50"></text></g><g><title>std::collections::hash::map::RandomState::new (231 samples, 0.15%)</title><rect x="94.0211%" y="261" width="0.1450%" height="15" fill="rgb(223,139,8)" fg:x="149739" fg:w="231"/><text x="94.2711%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (231 samples, 0.15%)</title><rect x="94.0211%" y="245" width="0.1450%" height="15" fill="rgb(232,213,38)" fg:x="149739" fg:w="231"/><text x="94.2711%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (231 samples, 0.15%)</title><rect x="94.0211%" y="229" width="0.1450%" height="15" fill="rgb(207,94,22)" fg:x="149739" fg:w="231"/><text x="94.2711%" y="239.50"></text></g><g><title>std::collections::hash::map::RandomState::new::_{{closure}} (69 samples, 0.04%)</title><rect x="94.1229%" y="213" width="0.0433%" height="15" fill="rgb(219,183,54)" fg:x="149901" fg:w="69"/><text x="94.3729%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (69 samples, 0.04%)</title><rect x="94.1229%" y="197" width="0.0433%" height="15" fill="rgb(216,185,54)" fg:x="149901" fg:w="69"/><text x="94.3729%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (69 samples, 0.04%)</title><rect x="94.1229%" y="181" width="0.0433%" height="15" fill="rgb(254,217,39)" fg:x="149901" fg:w="69"/><text x="94.3729%" y="191.50"></text></g><g><title>core::mem::replace (69 samples, 0.04%)</title><rect x="94.1229%" y="165" width="0.0433%" height="15" fill="rgb(240,178,23)" fg:x="149901" fg:w="69"/><text x="94.3729%" y="175.50"></text></g><g><title>core::ptr::write (69 samples, 0.04%)</title><rect x="94.1229%" y="149" width="0.0433%" height="15" fill="rgb(218,11,47)" fg:x="149901" fg:w="69"/><text x="94.3729%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (145 samples, 0.09%)</title><rect x="95.2813%" y="325" width="0.0910%" height="15" fill="rgb(218,51,51)" fg:x="151746" fg:w="145"/><text x="95.5313%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (145 samples, 0.09%)</title><rect x="95.2813%" y="309" width="0.0910%" height="15" fill="rgb(238,126,27)" fg:x="151746" fg:w="145"/><text x="95.5313%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (145 samples, 0.09%)</title><rect x="95.2813%" y="293" width="0.0910%" height="15" fill="rgb(249,202,22)" fg:x="151746" fg:w="145"/><text x="95.5313%" y="303.50"></text></g><g><title>__rdl_alloc (93 samples, 0.06%)</title><rect x="95.4634%" y="261" width="0.0584%" height="15" fill="rgb(254,195,49)" fg:x="152036" fg:w="93"/><text x="95.7134%" y="271.50"></text></g><g><title>__rust_alloc (141 samples, 0.09%)</title><rect x="95.5218%" y="261" width="0.0885%" height="15" fill="rgb(208,123,14)" fg:x="152129" fg:w="141"/><text x="95.7718%" y="271.50"></text></g><g><title>core::ptr::read_volatile (135 samples, 0.08%)</title><rect x="95.6104%" y="261" width="0.0848%" height="15" fill="rgb(224,200,8)" fg:x="152270" fg:w="135"/><text x="95.8604%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (2,299 samples, 1.44%)</title><rect x="95.3736%" y="325" width="1.4435%" height="15" fill="rgb(217,61,36)" fg:x="151893" fg:w="2299"/><text x="95.6236%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,208 samples, 1.39%)</title><rect x="95.4308%" y="309" width="1.3864%" height="15" fill="rgb(206,35,45)" fg:x="151984" fg:w="2208"/><text x="95.6808%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,208 samples, 1.39%)</title><rect x="95.4308%" y="293" width="1.3864%" height="15" fill="rgb(217,65,33)" fg:x="151984" fg:w="2208"/><text x="95.6808%" y="303.50"></text></g><g><title>alloc::alloc::alloc (2,208 samples, 1.39%)</title><rect x="95.4308%" y="277" width="1.3864%" height="15" fill="rgb(222,158,48)" fg:x="151984" fg:w="2208"/><text x="95.6808%" y="287.50"></text></g><g><title>malloc (1,787 samples, 1.12%)</title><rect x="95.6951%" y="261" width="1.1221%" height="15" fill="rgb(254,2,54)" fg:x="152405" fg:w="1787"/><text x="95.9451%" y="271.50"></text></g><g><title>[libc.so.6] (260 samples, 0.16%)</title><rect x="96.6539%" y="245" width="0.1633%" height="15" fill="rgb(250,143,38)" fg:x="153932" fg:w="260"/><text x="96.9039%" y="255.50"></text></g><g><title>[libc.so.6] (47 samples, 0.03%)</title><rect x="96.7877%" y="229" width="0.0295%" height="15" fill="rgb(248,25,0)" fg:x="154145" fg:w="47"/><text x="97.0377%" y="239.50"></text></g><g><title>__rdl_dealloc (121 samples, 0.08%)</title><rect x="96.8881%" y="197" width="0.0760%" height="15" fill="rgb(206,152,27)" fg:x="154305" fg:w="121"/><text x="97.1381%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (121 samples, 0.08%)</title><rect x="96.8881%" y="181" width="0.0760%" height="15" fill="rgb(240,77,30)" fg:x="154305" fg:w="121"/><text x="97.1381%" y="191.50"></text></g><g><title>__rust_dealloc (184 samples, 0.12%)</title><rect x="96.9641%" y="197" width="0.1155%" height="15" fill="rgb(231,5,3)" fg:x="154426" fg:w="184"/><text x="97.2141%" y="207.50"></text></g><g><title>tetrs::logic::game::is_connected (6,689 samples, 4.20%)</title><rect x="94.1662%" y="341" width="4.2000%" height="15" fill="rgb(207,226,32)" fg:x="149970" fg:w="6689"/><text x="94.4162%" y="351.50">tetrs..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(i8,i8)&gt;&gt; (2,467 samples, 1.55%)</title><rect x="96.8172%" y="325" width="1.5490%" height="15" fill="rgb(222,207,47)" fg:x="154192" fg:w="2467"/><text x="97.0672%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,467 samples, 1.55%)</title><rect x="96.8172%" y="309" width="1.5490%" height="15" fill="rgb(229,115,45)" fg:x="154192" fg:w="2467"/><text x="97.0672%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(i8,i8),alloc::alloc::Global&gt;&gt; (2,467 samples, 1.55%)</title><rect x="96.8172%" y="293" width="1.5490%" height="15" fill="rgb(224,191,6)" fg:x="154192" fg:w="2467"/><text x="97.0672%" y="303.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,467 samples, 1.55%)</title><rect x="96.8172%" y="277" width="1.5490%" height="15" fill="rgb(230,227,24)" fg:x="154192" fg:w="2467"/><text x="97.0672%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(i8,i8)&gt;&gt; (2,467 samples, 1.55%)</title><rect x="96.8172%" y="261" width="1.5490%" height="15" fill="rgb(228,80,19)" fg:x="154192" fg:w="2467"/><text x="97.0672%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,467 samples, 1.55%)</title><rect x="96.8172%" y="245" width="1.5490%" height="15" fill="rgb(247,229,0)" fg:x="154192" fg:w="2467"/><text x="97.0672%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,467 samples, 1.55%)</title><rect x="96.8172%" y="229" width="1.5490%" height="15" fill="rgb(237,194,15)" fg:x="154192" fg:w="2467"/><text x="97.0672%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (2,467 samples, 1.55%)</title><rect x="96.8172%" y="213" width="1.5490%" height="15" fill="rgb(219,203,20)" fg:x="154192" fg:w="2467"/><text x="97.0672%" y="223.50"></text></g><g><title>cfree (2,049 samples, 1.29%)</title><rect x="97.0796%" y="197" width="1.2866%" height="15" fill="rgb(234,128,8)" fg:x="154610" fg:w="2049"/><text x="97.3296%" y="207.50"></text></g><g><title>[libc.so.6] (1,264 samples, 0.79%)</title><rect x="97.5725%" y="181" width="0.7937%" height="15" fill="rgb(248,202,8)" fg:x="155395" fg:w="1264"/><text x="97.8225%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (150 samples, 0.09%)</title><rect x="99.7727%" y="325" width="0.0942%" height="15" fill="rgb(206,104,37)" fg:x="158899" fg:w="150"/><text x="100.0227%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (150 samples, 0.09%)</title><rect x="99.7727%" y="309" width="0.0942%" height="15" fill="rgb(223,8,27)" fg:x="158899" fg:w="150"/><text x="100.0227%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (150 samples, 0.09%)</title><rect x="99.7727%" y="293" width="0.0942%" height="15" fill="rgb(216,217,28)" fg:x="158899" fg:w="150"/><text x="100.0227%" y="303.50"></text></g><g><title>tetrs::logic::bot::search (158,922 samples, 99.79%)</title><rect x="0.0873%" y="405" width="99.7871%" height="15" fill="rgb(249,199,1)" fg:x="139" fg:w="158922"/><text x="0.3373%" y="415.50">tetrs::logic::bot::search</text></g><g><title>tetrs::logic::bot::heuristic (70,425 samples, 44.22%)</title><rect x="55.6546%" y="389" width="44.2199%" height="15" fill="rgb(240,85,17)" fg:x="88636" fg:w="70425"/><text x="55.9046%" y="399.50">tetrs::logic::bot::heuristic</text></g><g><title>tetrs::logic::game::simulate_clear_rows (69,310 samples, 43.52%)</title><rect x="56.3547%" y="373" width="43.5198%" height="15" fill="rgb(206,108,45)" fg:x="89751" fg:w="69310"/><text x="56.6047%" y="383.50">tetrs::logic::game::simulate_clear_rows</text></g><g><title>tetrs::logic::game::gravity (68,312 samples, 42.89%)</title><rect x="56.9813%" y="357" width="42.8931%" height="15" fill="rgb(245,210,41)" fg:x="90749" fg:w="68312"/><text x="57.2313%" y="367.50">tetrs::logic::game::gravity</text></g><g><title>tetrs::logic::id_manager::next_unique_id (2,397 samples, 1.51%)</title><rect x="98.3693%" y="341" width="1.5051%" height="15" fill="rgb(206,13,37)" fg:x="156664" fg:w="2397"/><text x="98.6193%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (16 samples, 0.01%)</title><rect x="99.9039%" y="277" width="0.0100%" height="15" fill="rgb(250,61,18)" fg:x="159108" fg:w="16"/><text x="100.1539%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (16 samples, 0.01%)</title><rect x="99.9039%" y="261" width="0.0100%" height="15" fill="rgb(235,172,48)" fg:x="159108" fg:w="16"/><text x="100.1539%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (16 samples, 0.01%)</title><rect x="99.9039%" y="245" width="0.0100%" height="15" fill="rgb(249,201,17)" fg:x="159108" fg:w="16"/><text x="100.1539%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (24 samples, 0.02%)</title><rect x="99.9020%" y="309" width="0.0151%" height="15" fill="rgb(219,208,6)" fg:x="159105" fg:w="24"/><text x="100.1520%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24 samples, 0.02%)</title><rect x="99.9020%" y="293" width="0.0151%" height="15" fill="rgb(248,31,23)" fg:x="159105" fg:w="24"/><text x="100.1520%" y="303.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (33 samples, 0.02%)</title><rect x="99.9014%" y="373" width="0.0207%" height="15" fill="rgb(245,15,42)" fg:x="159104" fg:w="33"/><text x="100.1514%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (33 samples, 0.02%)</title><rect x="99.9014%" y="357" width="0.0207%" height="15" fill="rgb(222,217,39)" fg:x="159104" fg:w="33"/><text x="100.1514%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (33 samples, 0.02%)</title><rect x="99.9014%" y="341" width="0.0207%" height="15" fill="rgb(210,219,27)" fg:x="159104" fg:w="33"/><text x="100.1514%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (33 samples, 0.02%)</title><rect x="99.9014%" y="325" width="0.0207%" height="15" fill="rgb(252,166,36)" fg:x="159104" fg:w="33"/><text x="100.1514%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="99.9303%" y="309" width="0.0107%" height="15" fill="rgb(245,132,34)" fg:x="159150" fg:w="17"/><text x="100.1803%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.01%)</title><rect x="99.9303%" y="293" width="0.0107%" height="15" fill="rgb(236,54,3)" fg:x="159150" fg:w="17"/><text x="100.1803%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (17 samples, 0.01%)</title><rect x="99.9303%" y="277" width="0.0107%" height="15" fill="rgb(241,173,43)" fg:x="159150" fg:w="17"/><text x="100.1803%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (16 samples, 0.01%)</title><rect x="99.9309%" y="261" width="0.0100%" height="15" fill="rgb(215,190,9)" fg:x="159151" fg:w="16"/><text x="100.1809%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (21 samples, 0.01%)</title><rect x="99.9297%" y="325" width="0.0132%" height="15" fill="rgb(242,101,16)" fg:x="159149" fg:w="21"/><text x="100.1797%" y="335.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (36 samples, 0.02%)</title><rect x="99.9221%" y="373" width="0.0226%" height="15" fill="rgb(223,190,21)" fg:x="159137" fg:w="36"/><text x="100.1721%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (36 samples, 0.02%)</title><rect x="99.9221%" y="357" width="0.0226%" height="15" fill="rgb(215,228,25)" fg:x="159137" fg:w="36"/><text x="100.1721%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (35 samples, 0.02%)</title><rect x="99.9228%" y="341" width="0.0220%" height="15" fill="rgb(225,36,22)" fg:x="159138" fg:w="35"/><text x="100.1728%" y="351.50"></text></g><g><title>tetrs::logic::game::simulate_clear_rows (133 samples, 0.08%)</title><rect x="99.8744%" y="405" width="0.0835%" height="15" fill="rgb(251,106,46)" fg:x="159061" fg:w="133"/><text x="100.1244%" y="415.50"></text></g><g><title>tetrs::logic::game::gravity (125 samples, 0.08%)</title><rect x="99.8794%" y="389" width="0.0785%" height="15" fill="rgb(208,90,1)" fg:x="159069" fg:w="125"/><text x="100.1294%" y="399.50"></text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::maybe_unwind (159,075 samples, 99.88%)</title><rect x="0.0810%" y="485" width="99.8832%" height="15" fill="rgb(243,10,4)" fg:x="129" fg:w="159075"/><text x="0.3310%" y="495.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::maybe_unwind</text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::_{{closure}} (159,075 samples, 99.88%)</title><rect x="0.0810%" y="469" width="99.8832%" height="15" fill="rgb(212,137,27)" fg:x="129" fg:w="159075"/><text x="0.3310%" y="479.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::_{{closure}}</text></g><g><title>macroquad::exec::resume (159,075 samples, 99.88%)</title><rect x="0.0810%" y="453" width="99.8832%" height="15" fill="rgb(231,220,49)" fg:x="129" fg:w="159075"/><text x="0.3310%" y="463.50">macroquad::exec::resume</text></g><g><title>tetrs::amain::_{{closure}} (159,075 samples, 99.88%)</title><rect x="0.0810%" y="437" width="99.8832%" height="15" fill="rgb(237,96,20)" fg:x="129" fg:w="159075"/><text x="0.3310%" y="447.50">tetrs::amain::_{{closure}}</text></g><g><title>tetrs::test_bot (159,075 samples, 99.88%)</title><rect x="0.0810%" y="421" width="99.8832%" height="15" fill="rgb(239,229,30)" fg:x="129" fg:w="159075"/><text x="0.3310%" y="431.50">tetrs::test_bot</text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw (159,076 samples, 99.88%)</title><rect x="0.0810%" y="501" width="99.8838%" height="15" fill="rgb(219,65,33)" fg:x="129" fg:w="159076"/><text x="0.3310%" y="511.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw</text></g><g><title>[libGLX_mesa.so.0.0.0] (17 samples, 0.01%)</title><rect x="99.9661%" y="405" width="0.0107%" height="15" fill="rgb(243,134,7)" fg:x="159207" fg:w="17"/><text x="100.2161%" y="415.50"></text></g><g><title>[libc.so.6] (32 samples, 0.02%)</title><rect x="99.9768%" y="309" width="0.0201%" height="15" fill="rgb(216,177,54)" fg:x="159224" fg:w="32"/><text x="100.2268%" y="319.50"></text></g><g><title>[radeonsi_dri.so] (32 samples, 0.02%)</title><rect x="99.9768%" y="293" width="0.0201%" height="15" fill="rgb(211,160,20)" fg:x="159224" fg:w="32"/><text x="100.2268%" y="303.50"></text></g><g><title>[radeonsi_dri.so] (32 samples, 0.02%)</title><rect x="99.9768%" y="277" width="0.0201%" height="15" fill="rgb(239,85,39)" fg:x="159224" fg:w="32"/><text x="100.2268%" y="287.50"></text></g><g><title>[radeonsi_dri.so] (18 samples, 0.01%)</title><rect x="99.9856%" y="261" width="0.0113%" height="15" fill="rgb(232,125,22)" fg:x="159238" fg:w="18"/><text x="100.2356%" y="271.50"></text></g><g><title>pthread_setaffinity_np (17 samples, 0.01%)</title><rect x="99.9862%" y="245" width="0.0107%" height="15" fill="rgb(244,57,34)" fg:x="159239" fg:w="17"/><text x="100.2362%" y="255.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="99.9862%" y="229" width="0.0107%" height="15" fill="rgb(214,203,32)" fg:x="159239" fg:w="17"/><text x="100.2362%" y="239.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="99.9862%" y="213" width="0.0107%" height="15" fill="rgb(207,58,43)" fg:x="159239" fg:w="17"/><text x="100.2362%" y="223.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="99.9862%" y="197" width="0.0107%" height="15" fill="rgb(215,193,15)" fg:x="159239" fg:w="17"/><text x="100.2362%" y="207.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="99.9862%" y="181" width="0.0107%" height="15" fill="rgb(232,15,44)" fg:x="159239" fg:w="17"/><text x="100.2362%" y="191.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (51 samples, 0.03%)</title><rect x="99.9661%" y="485" width="0.0320%" height="15" fill="rgb(212,3,48)" fg:x="159207" fg:w="51"/><text x="100.2161%" y="495.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (51 samples, 0.03%)</title><rect x="99.9661%" y="469" width="0.0320%" height="15" fill="rgb(218,128,7)" fg:x="159207" fg:w="51"/><text x="100.2161%" y="479.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (51 samples, 0.03%)</title><rect x="99.9661%" y="453" width="0.0320%" height="15" fill="rgb(226,216,39)" fg:x="159207" fg:w="51"/><text x="100.2161%" y="463.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (51 samples, 0.03%)</title><rect x="99.9661%" y="437" width="0.0320%" height="15" fill="rgb(243,47,51)" fg:x="159207" fg:w="51"/><text x="100.2161%" y="447.50"></text></g><g><title>[libGLX_mesa.so.0.0.0] (51 samples, 0.03%)</title><rect x="99.9661%" y="421" width="0.0320%" height="15" fill="rgb(241,183,40)" fg:x="159207" fg:w="51"/><text x="100.2161%" y="431.50"></text></g><g><title>[radeonsi_dri.so] (34 samples, 0.02%)</title><rect x="99.9768%" y="405" width="0.0213%" height="15" fill="rgb(231,217,32)" fg:x="159224" fg:w="34"/><text x="100.2268%" y="415.50"></text></g><g><title>[radeonsi_dri.so] (34 samples, 0.02%)</title><rect x="99.9768%" y="389" width="0.0213%" height="15" fill="rgb(229,61,38)" fg:x="159224" fg:w="34"/><text x="100.2268%" y="399.50"></text></g><g><title>[radeonsi_dri.so] (34 samples, 0.02%)</title><rect x="99.9768%" y="373" width="0.0213%" height="15" fill="rgb(225,210,5)" fg:x="159224" fg:w="34"/><text x="100.2268%" y="383.50"></text></g><g><title>[radeonsi_dri.so] (34 samples, 0.02%)</title><rect x="99.9768%" y="357" width="0.0213%" height="15" fill="rgb(231,79,45)" fg:x="159224" fg:w="34"/><text x="100.2268%" y="367.50"></text></g><g><title>amdgpu_winsys_create (34 samples, 0.02%)</title><rect x="99.9768%" y="341" width="0.0213%" height="15" fill="rgb(224,100,7)" fg:x="159224" fg:w="34"/><text x="100.2268%" y="351.50"></text></g><g><title>[radeonsi_dri.so] (34 samples, 0.02%)</title><rect x="99.9768%" y="325" width="0.0213%" height="15" fill="rgb(241,198,18)" fg:x="159224" fg:w="34"/><text x="100.2268%" y="335.50"></text></g><g><title>miniquad::native::linux_x11::glx_main_loop (159,131 samples, 99.92%)</title><rect x="0.0810%" y="517" width="99.9184%" height="15" fill="rgb(252,97,53)" fg:x="129" fg:w="159131"/><text x="0.3310%" y="527.50">miniquad::native::linux_x11::glx_main_loop</text></g><g><title>miniquad::native::linux_x11::glx::Glx::init (53 samples, 0.03%)</title><rect x="99.9661%" y="501" width="0.0333%" height="15" fill="rgb(220,88,7)" fg:x="159207" fg:w="53"/><text x="100.2161%" y="511.50"></text></g><g><title>all (159,261 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(213,176,14)" fg:x="0" fg:w="159261"/><text x="0.2500%" y="639.50"></text></g><g><title>tetrs (159,212 samples, 99.97%)</title><rect x="0.0308%" y="613" width="99.9692%" height="15" fill="rgb(246,73,7)" fg:x="49" fg:w="159212"/><text x="0.2808%" y="623.50">tetrs</text></g><g><title>[unknown] (159,153 samples, 99.93%)</title><rect x="0.0678%" y="597" width="99.9322%" height="15" fill="rgb(245,64,36)" fg:x="108" fg:w="159153"/><text x="0.3178%" y="607.50">[unknown]</text></g><g><title>tetrs::main (159,132 samples, 99.92%)</title><rect x="0.0810%" y="581" width="99.9190%" height="15" fill="rgb(245,80,10)" fg:x="129" fg:w="159132"/><text x="0.3310%" y="591.50">tetrs::main</text></g><g><title>macroquad::Window::from_config (159,132 samples, 99.92%)</title><rect x="0.0810%" y="565" width="99.9190%" height="15" fill="rgb(232,107,50)" fg:x="129" fg:w="159132"/><text x="0.3310%" y="575.50">macroquad::Window::from_config</text></g><g><title>miniquad::start (159,132 samples, 99.92%)</title><rect x="0.0810%" y="549" width="99.9190%" height="15" fill="rgb(253,3,0)" fg:x="129" fg:w="159132"/><text x="0.3310%" y="559.50">miniquad::start</text></g><g><title>miniquad::native::linux_x11::run (159,132 samples, 99.92%)</title><rect x="0.0810%" y="533" width="99.9190%" height="15" fill="rgb(212,99,53)" fg:x="129" fg:w="159132"/><text x="0.3310%" y="543.50">miniquad::native::linux_x11::run</text></g></svg></svg>